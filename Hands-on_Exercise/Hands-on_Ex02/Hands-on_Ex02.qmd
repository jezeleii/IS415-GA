---
title: "Hands-on_Ex02"
author: "Jezelei Manangan"
date: "August 20, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Thematic Mapping & GeoVisualization with R

In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.

Geovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.

# 1.0 Getting Started

------------------------------------------------------------------------

In this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

The code chunk below will be used to install and load these packages in RStudio.

```{r}
pacman::p_load(sf,tmap,tidyverse)
```

# 2.0 Importing Data into R

## 2.1 Datasets Used

|                                                                                                     |                                 |                                                                                                                                                                                                                                                                                           |
|--------------|--------------|--------------------------------------------|
| Master Plan 2014 Subzone Boundary (Web)                                                             | `MP14_SUBZONE_WEB_PL`)          | It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.                                                                                                                                                           |
| Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 | `respopagesextod2011to2020.csv` | This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile. |

## 2.2 Importing Geospatial Data into R

The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn="/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/geospatial"
                 , layer = "MP14_SUBZONE_WEB_PL")

```

```{r}
mpsz
```

Notice that only the first ten records will be displayed. Do you know why?

:   R's default printing behaviour, where it displays the first 10 rows by default, due to the 'tibble' package.

## 2.3 Importing Attribute Data into R

Next, I will import *`respopagsex2011to2020.csv`* file into RStudio and save the file into an R dataframe called *popdata*.

The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
popdata <- read.csv("/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/aspatial/respopagesextod2011to2020.csv")
```

```{r}
head(popdata)
```

## 2.4 Data preparation 

I will prepare a data table with year 2020 values, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

|                |                                                               |
|----------------|---------------------------------------------------------------|
| Young          | age group 0 to 4 until age group 20 to 24                     |
| Economy Active | age group 25-29 until age group 60-64                         |
| Aged           | age group 65 and above,                                       |
| Total          | all age groups                                                |
| Dependency     | the ratio between young and aged against economy active group |

### 2.4.1 Data wrangling 

The following functions will be used

|                                         |                   |
|-----------------------------------------|-------------------|
| `pivot_wider()`                         | **tidyr** package |
| `mutate(),filter(),group_by(),select()` | **dplyr** package |

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)



```

### 2.4.2 Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>% 
  mutate_at(.vars = vars(PA,SZ),
            .funs = list(toupper)) %>%   filter(`ECONOMY ACTIVE` > 0)
```

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
```

Learning points:

-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.

```{r}
dir.create("/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/rds", recursive = TRUE, showWarnings = FALSE)
write_rds(mpsz_pop2020, "/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/rds/mpszpop2020.rds")
```

# 3.0 Choropleth Mapping Geospatial Data Using *tmap*

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.

Approaches to prepare thematic map using *tmap*, they are:

1.  Plotting a thematic map quickly by using *qtm()*.
2.  Plotting highly customisable thematic map by using tmap elements.

## 3.1 Plotting a choropleth map quickly using *qtm()*

Draw a cartographic standard choropleth map as shown below:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020,
    fill = "DEPENDENCY")
```

Learning points :

-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

## 3.2 Creating a choropleth map by using tmap's elements 

The disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To counter this, **tmap**’s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          title = "Dependency ratio") + tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone", 
                                                  main.title.position = "center",
                                                  main.title.size=1.5,
                                                  legend.height=0.45,
                                                  legend.width=0.35,
                                                  frame=TRUE) + 
  tm_borders(alpha = 0.3) + 
  tm_compass(type="4star", size = 3) +
  tm_scale_bar() + 
  tm_grid(alpha = 0.2) + 
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Population data from Department of Statistics (DOS)", position = c("left", "bottom"))
  
```

## 3.3 Drawing a base map 

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.

In the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons

```{r}
tm_shape(mpsz_pop2020) + 
  tm_polygons()
```
