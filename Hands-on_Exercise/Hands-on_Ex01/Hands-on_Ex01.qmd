---
title: "Hands-on Exercise 1"
author: "Jezelei Manangan"
---

# **1.0 Exercise Objectives**

------------------------------------------------------------------------

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

By the end of this hands-on exercise, you should acquire the following competencies:

```{r}

```

1.  installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,

2.  importing geospatial data by using appropriate functions of **sf** package,

3.  importing aspatial data by using appropriate function of **readr** package,

4.  exploring the content of simple feature data frame by using appropriate **Base R**and **sf** functions,

5.  assigning or transforming coordinate systems by using using appropriate *sf*functions,

6.  converting an aspatial data into a sf data frame by using appropriate function of **sf** package,

7.  performing geoprocessing tasks by using appropriate functions of **sf** package,

8.  performing data wrangling tasks by using appropriate functions of **dplyr** package and

9.  performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

> Note: Students are encouraged to read the reference guide of each function, especially the input data requirements, syntaxt and argument option before using them.

# **2.0 Set-up** 

------------------------------------------------------------------------

## **2.1 Data Acquisition**

Data ais key to data analytics including geospatial analytics. In this hands-on exercise, I extracted the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

### **2.1.1 File Structure** 

`Hands-on_Ex01`

## **2.2 Installing R Packages** 

In this hands-on exercise, two R packages will be used. They are:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

Tidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:

|             |                                |
|-------------|--------------------------------|
| reader      | for importing csv data         |
| **readxl**  | for importing Excel worksheet, |
| **tidyr**   | for manipulating data,         |
| **dplyr**   | for transforming data, and     |
| **ggplot2** | for visualising data           |

The required packages were installed using the code chunk below:

```{r}
pacman::p_load(sf,tidyverse)
```

> *Learning Point:*
>
> -   [*`p_load`*](https://cran.r-project.org/web/packages/pacman/pacman.pdf) *function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf and tidyverse packages into R environment.*

# **3.0 Importing Geospatial Data** 

------------------------------------------------------------------------

In this section, I have imported the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

|                       |                                                    |
|-------------------------|-----------------------------------------------|
| `MP14_SUBZONE_WEB_PL` | a polygon feature layer in ESRI shapefile format,  |
| `CyclingPath`         | a line feature layer in ESRI shapefile format, and |
| `PreSchool`           | a point feature layer in kml file format           |

## **3.1 Importing polygon feature data in shapefile format** 

Dataset used: `MP14_SUBZONE_WEB_PL`

File Format: shapefile (shp) \| Data Frame Type: polygon feature

```{r}
mpsz = st_read(dsn = "/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex01/data/geospatial/MP14_SUBZONE_WEB_PL"
               , layer = "MP14_SUBZONE_WEB_PL")
```

Interpretation : In the `mpsz` data frame, there are 323 multipolygon features and 15 fields, and is in the **svy21** projected coordinates systems.

## **3.2 Importing polyline feature data in shapefile format** 

Dataset used: `CyclingPath`

File Format: shapefile (shp) \| Data Frame Type: line feature

```{r}
shapefile_path = "/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex01/data/geospatial/CyclingPath_Jul2024"

mpsz = st_read(dsn = shapefile_path, layer = "CyclingPathGazette")
```

Interpretation : In the `cyclingpath` linestring feature data frame, there are 2558 features and 2 fields, and is in the **svy21** projected coordinates systems too.

## **3.3 Importing GIS data in kml format**

Dataset used: `PreSchool`

File Format: kml \| Data Frame Type: line feature

```{r}
preschool = st_read("/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml")

```

Interpretation : In the `preschool` point feature data frame, there are 2290 features and 2 fields, and is in the wgs84 coordinates systems.

# **4.0 Checking the Content of A Simple Feature Data Frame** 

------------------------------------------------------------------------

In this section, different ways of information retrieval related to the content of a simple feature data frame is explored.

## **4.1 Working with st_geometry()**

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\$geom or mpsz\[\[1\]\], but the more general way uses *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

Note:  The print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

## **4.2 Working with glimpse()**

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.

```{r}
glimpse(mpsz)
```

Interpretation: *glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

## **4.2 Working with head()**

To reveal complete information of a feature object, use the [*head()*](#0)  function of Base R

```{r}
head(mpsz, n=5)  
```

> Note: One of the useful argument of *head()* is it allows user to select the numbers of record to display (i.e. the n argument).

# **5.0 Plotting the Geospatial Data**

------------------------------------------------------------------------

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find *plot()* of R Graphic comes in very handy as shown in the code chunk below.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```
