---
title: "In-class Exercise 04 "
author: "Jezelei Manangan"
date: "September 9, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1.0 Objective & Overview

The specific questions we would like to answer are:

-   are the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?

-   if the answer is NO, where and when the observed forest fire locations tend to cluster?

# 2.0 Installing Packages

For the purpose of this study, six R packages will be used. They are:

-   [**sf**](https://r-spatial.github.io/sf/) provides functions for importing processing and wrangling geospatial data,,

-   [**raster**](https://rspatial.org/raster/) for handling raster data in R,

-   [**spatstat**](https://cran.r-project.org/web/packages/spatstat/index.html) for performing Spatial Point Patterns Analysis such as kcross, Lcross, etc.,

-   [**sparr**](https://tilmandavies.github.io/sparr/index.html) provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported

-   [**tmap**](https://r-tmap.github.io/tmap/) provides functions to produce cartographic quality thematic maps, and

-   [**tidyverse**](https://www.tidyverse.org/), a family of R packages that provide functions to perform common data science tasks including and not limited to data import, data transformation, data wrangling and data visualisation.

```{r}
pacman::p_load(sf,raster,spatstat,sparr,tmap,tidyverse,readr, dplyr, animation)
```

# 3.0 Importing and Preparing Study Area

In this exercise, we will use the following datasets:

-   forestfires, a csv file provides locations of forest fire detected from the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data. The data are downloaded from [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). For the purpose of this exercise, only forest fires within Kepulauan Bangka Belitung will be used.

-   Kepulauan_Bangka_Belitung, an ESRI shapefile showing the sub-district (i.e. [kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundary of Kepulauan Bangka Belitung. The data set was downloaded from [Indonesia Geospatial](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html) portal. The original data covers the whole Indonesia. For the purpose of this exercise, only sub-districts within Kepulauan Bangka Belitung are extracted.

## 3.1 Importing study area

In this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import the two geospatial data sets mentioned in previous section into R environment.

**Kepulauan_Bangka_Belitung**

```{r}
kbb <- st_read(dsn = "data/rawdata/", layer = "Kepulauan_Bangka_Belitung") 
```

Looking further into the dataset, we notice that the coordinates have Polygon Z Feature.

-   Before proceeding, we need to dissolve the boundaries, and check for multi-polygon features. In this case, Polygon Z is not needed and may interfere with further analysis

    -   Group Z boundaries up

    -   Remove the Z value

    -   Transform the projection

```{r}
kbb_sf <- st_read(dsn = "data/rawdata/", layer = "Kepulauan_Bangka_Belitung") %>% 
  st_union() %>% 
  st_zm(drop = TRUE, what="ZM") %>% 
  st_transform(crs=32748)
```

## 3.2 Converging to owin object

Next, `as.owin()` is used to convert *kbb* into an owin object.

```{r}
kbb_owin <- as.owin(kbb_sf)
kbb_owin
```

Next, `class()` is used to confim if the output is indeed an owin object

```{r}
class(kbb_owin)
```

# 4.0 Importing and Preparing Forest Fire Data

Next, we will import the forest fire data set into the R environment

**forestfire.csv**

```{r}
fire_sf <- read_csv("data/rawdata/forestfires.csv") %>% 
  st_as_sf(coords = c("longitude", "latitude"),
           crs=4326 ) %>% 
  st_transform(crs=32748)
```

```{r}
st_crs(fire_sf)
```

Because **ppp** object only accepts numerical aor character as mark. The code chunk below is used to convert data type of *acq_date* to numeric.

```{r}
fire_sf <- fire_sf %>% 
  mutate(DayofYear = yday(acq_date)) %>% 
  mutate(Month_num = month(acq_date)) %>% 
  mutate(Month_fac = month(acq_date, 
         label = TRUE, 
         abbr = FALSE))
```

# 5.0 Visualizing the Fire Points

## 5.1 Overall Plot

```{r}
tmap_mode('plot')
tm_shape(kbb_sf) + 
  tm_polygons() + 
  tm_shape(fire_sf) + 
  tm_bubbles(alpha = 0.5, size = 0.05) + 
  tm_layout(main.title = "Forest Fire Distribution in Kepulauan & Bangka Belitung", 
            ) 
```

## 5.2 Visualizing Geographic Distribution of Forest Fires by Month

```{r}
tmap_mode('plot')
tm_shape(kbb_sf) + 
  tm_polygons() + 
  tm_shape(fire_sf) + 
  tm_dots(alpha = 0.5, size = 0.1) + 
  tm_layout(main.title = "Forest Fire Distribution by Month Factor in Kepulauan & Bangka Belitung", 
            ) + 
  tm_facets(by="Month_fac", 
            free.coords=FALSE,
            drop.units=TRUE)
```

# 6.0 Computing STKDE By Month

In this section, you will learn how to compute STKDE by using [`spattemp.density()`](https://tilmandavies.github.io/sparr/reference/spattemp.density.html) of **sparr** package. Before using the function, it is highly recommended you read the function’s reference guide in detail in order to understand the input data requirements and the output object generated.

## 6.1 Extracting Forest fires by month

The code chunk below is used to remofe the unwanted fields from fire_sf data.frame. This is because `as.ppp()` only need the mark field and geometry field from the input sf data.frame

```{r}
fire_month <- fire_sf %>% 
  select(Month_num)
class(fire_month)
```

## 6.2 Creating ppp

The code chunk below is used to derive a ppp obect called fire_month from fire_month sf data.frame

```{r}
fire_month_ppp <- as.ppp(fire_month)
#marks(fire_month_ppp) <- fire_sf$DayofYear
fire_month_ppp
```

```{r}
st_crs(kbb_sf)
st_crs(fire_sf)
```

The code chunk is used to check the output is in the correct object class:

```{r}
summary(fire_month_ppp)
```

In the code chunk below, we check for duplicates.

```{r}
any(duplicated(fire_month_ppp))
```

## 6.3 Including Owin object

```{r}
fire_month_owin <- fire_month_ppp[kbb_owin]
summary(fire_month_owin)
```

As a good practice, `plot()` is used to plot *ff_owin* so that we can examine the correctness of the output object.

```{r}
plot(fire_month_owin)
```

## 6.4 Computing Spatio-temporal KDE

```{r}
st_kde <- spattemp.density(fire_month_owin)
summary(st_kde)
```

## 6.5 Plotting the spatio-temporal KDE Object

In the code chunk below, `plot()` of R base is used to the KDE for between July 2023 - December 2023.

```{r}
par(mfrow = c(2, 3), fig.width = 12, fig.height = 10)

tims <- c(7,8,9,10,11,12)

for(i in tims){
  plot(st_kde, i, 
       override.par=FALSE, 
       fix.range=TRUE,
       main=paste("KDE at month",i))
}
```

# 7.0 Computing STKDE By Day of Year

In this section, I will compute the STKDE of forest fires by day of year.

## 7.1 Creating ppp object

In the code chunk below, DayofYear field is included in the output ppp object.

```{r}
fire_yday_ppp <- fire_sf %>% 
  select(DayofYear) %>% 
  as.ppp()
```

## 7.2 Including Owin object

Next, code chunk below is used to combine the ppp object and the owin object.

```{r}
fire_yday_owin <- fire_yday_ppp[kbb_owin]
summary(fire_yday_owin)
```

## 7.3 Plotting the Spatio-temporal KDE object

```{r}
kde_yday <- spattemp.density(fire_yday_owin)
summary(kde_yday)
```

```{r}
tims <- 10:352

n_cols <-4 
batch_size <- 12
n_batches <- ceiling(length(tims)/batch_size)

for (b in 1:n_batches){
  start <- (b-1) * batch_size + 1
  end <- min(b * batch_size, length(tims))
  
  current_tims <- tims[start:end]
  
  par(mfrow=c(3,4), mar=c(2,2,2,2))
  
  for(i in current_tims){
    plot(kde_yday, i,
         override.par=FALSE,
         fix.range=TRUE,
         main = paste('KDE at Day',i))
  }
}
```

# 8.0 Computing STKDE By Day of Year: Improved Method

One of the nice function provides in sparr package is `BOOT.spattemp()`. It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.

Code chunk below uses `BOOT.spattemp()` to determine both the spatial bandwidth and the scalar temporal bandwidth.

```{r}
set.seed(1234)
BOOT.spattemp(fire_yday_owin)
```

## 8.1 Creating ppp object

Now, the STKDE will be derived by using h and lambda values derive in previous step.

```{r}
kde_yday_plus <- spattemp.density(
  fire_yday_owin,
  h = 9000,
  lambda =19)
summary(kde_yday_plus)
```

## 8.2 Plotting the Spatio-temporal KDE object

```{r}
tims <- 10:352

temp_gif <- tempfile(fileext = '.gif')
saveGIF({
  for(i in tims){
    plot(kde_yday, i, 
         override.par=FALSE, 
         fix.range=TRUE,
         main=paste('KDE at Day',i))
  }
}, movie.name = "forestFires.gif", interval = 0.5, ani.width=800, ani.height=600)

```

## Displaying the GIF

![](%60r%20temp_gif%60)
