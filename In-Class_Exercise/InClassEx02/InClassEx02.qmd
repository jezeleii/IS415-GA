---
title: "Hands-on Exercise 2"
author: "Jezelei Manangan"
date: r.sys.date()
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  freeze: true
---

# Getting started

```{r}
pacman::p_load(tidyverse,sf)
```

```{r}
#| echo: false
pacman::p_load(tidyverse,sf, ggstatsplot, tmap)
```

# Working with Master Plan Planning Sub-zone Data

This code chunk imports shapefile:

```{r}
mpsz14_shp <- st_read(dsn = "data/", layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
class(mpsz14_shp)
```

This code chunk imports kml. However the file is corrupted. Take the shapefile accordingly:

```{r}
#| output: false
#mpsz14_kml <- st_read("data/MasterPlan2014SubzoneBoundaryWebKML.kml")
st_write(mpsz14_shp, "data/MP14_SUBZONE_WEB_PL.kml", 
                      delete_dsn = TRUE)
```

Why does the code not work initially? 

:   The file is likely corrupted. To resolve this, take the shape file accordingly.

    Futhermore, delete_dsn() is needed to check if the dataset exists if you are writing it over.

```{r}
mpsz14_kml <- st_read("data/MP14_SUBZONE_WEB_PL.kml")
```

## Importing Data from MPSZ_2019

This code chunk imports the MPSSZ-2019 shapefile:

```{r}
mpsz19_shp <- st_read(dsn = "data/", layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

```{r}
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

This code chunk imports the preschool data:

```{r}
preschool <- st_read("data/PreSchoolsLocation.kml") %>% 
  st_transform(crs = 3414)
```

This code chunk loads the population data:

```{r}
popdata <- read_csv("data/respopagesextod2023.csv")
```

1.  Segregate the df showing the planning subzone and area

```{r}
popdata2023 <- popdata %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(`POP` = sum(`Pop`)) %>% 
  ungroup() %>% 
  pivot_wider(names_from=AG, values_from = POP)
```

Break down the code step by step:

```{r}
#Group By Function 
popdata_step1 <- popdata %>% 
  group_by(PA, SZ, AG) 

#Summarize & Ungroup Function 
popdata_step2 <- popdata_step1 %>% 
  summarise(`POP` = sum(`Pop`)) %>% 
  ungroup()

#Pivot_Wider - transpose the selected columns 
popdata2023 <- popdata_step2 %>% 
  pivot_wider(names_from=AG, values_from = POP)
```

> Check the columns :

```{r}
colnames(popdata2023)
```

Process the code for popdata2023 :

```{r}
popdata2023 <- popdata2023 %>% 
  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %>% 
  mutate(`AGED` = rowSums(.[16:21])) %>% 
  mutate(`TOTAL` = rowSums(.[3:21])) %>% 
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)
```

Joining popdata2023 and mpsz19_shp, we first convert the names to_upper(), as r is case sensitive.

```{r}
popdata2023 <- popdata2023 %>% 
  mutate_at(.vars = vars(PA,SZ), 
            .funs = list(toupper))
```

```{r}
mpsz_pop2023 <- left_join(popdata2023, mpsz19_shp,
                          by = c("SZ" = "SUBZONE_N"))
```

left: spatial data because we need to have the geometric data
