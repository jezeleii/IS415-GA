[
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Spatial Weights & Applications",
    "section": "",
    "text": "By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-shapefile-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-shapefile-into-r-environment",
    "title": "Spatial Weights & Applications",
    "section": "3.1 Import shapefile into R environment",
    "text": "3.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer=\"Hunan\") %&gt;% \n  st_transform(crs=4490)\n\nReading layer `Hunan' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-csv-file-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-csv-file-into-r-environment",
    "title": "Spatial Weights & Applications",
    "section": "3.2 Import csv file into R environment",
    "text": "3.2 Import csv file into R environment\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\") \n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#performing-relational-join",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#performing-relational-join",
    "title": "Spatial Weights & Applications",
    "section": "3.3 Performing relational join",
    "text": "3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, hunan2012)\n\nJoining with `by = join_by(County)`\n\nnames(hunan)\n\n [1] \"NAME_2\"      \"ID_3\"        \"NAME_3\"      \"ENGTYPE_3\"   \"Shape_Leng\" \n [6] \"Shape_Area\"  \"County\"      \"City\"        \"avg_wage\"    \"deposite\"   \n[11] \"FAI\"         \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"      \n[16] \"GIO\"         \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"        \n[21] \"EmpR\"        \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"  \n[26] \"Household_R\" \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"      \n[31] \"Agri\"        \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n[36] \"geometry\"   \n\n\n\nhunan &lt;- hunan %&gt;% \n  select(1:4, 7, 15, 32)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-queen-contiguity-based-neighbours",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-queen-contiguity-based-neighbours",
    "title": "Spatial Weights & Applications",
    "section": "5.1 Computing (QUEEN) contiguity based neighbours",
    "text": "5.1 Computing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[1]\n\n[[1]]\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe GDPPC can be retrieve of these five countries by using the code chunk below:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nThe complete weight matrix can be displayed using str():\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#creating-rook-contiguity-based-neighbours",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#creating-rook-contiguity-based-neighbours",
    "title": "Spatial Weights & Applications",
    "section": "5.2 Creating (ROOK) contiguity based neighbours",
    "text": "5.2 Creating (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-contiguity-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-contiguity-weights",
    "title": "Spatial Weights & Applications",
    "section": "5.3 Visualizing contiguity weights",
    "text": "5.3 Visualizing contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n8.5.3.1 Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\n\n\n\n\n\n\n\n\n\n\n8.5.3.2 Plotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\n\n\n\n\n\n\n\n\n\ngreen_t &lt;- rgb(0,1,0, alpha=0.7)\nblue_t &lt;- rgb(0,0,1, alpha=0.7)\n#additional plot for comparison \nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen vs Rook Contiguity\")\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col=green_t)\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col=blue_t)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#determining-the-cut-off-distance",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#determining-the-cut-off-distance",
    "title": "Spatial Weights & Applications",
    "section": "6.1 Determining the cut-off distance",
    "text": "6.1 Determining the cut-off distance\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat=TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "title": "Spatial Weights & Applications",
    "section": "6.2 Computing fixed distance weight matrix",
    "text": "6.2 Computing fixed distance weight matrix\nWe will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat=TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n6.2.1 Plotting fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st Nearest Neighbours\")\nplot(k1, coords, add=TRUE, col='red', length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance Link\")\nplot(wm_d62, coords, add=TRUE, pch=19, cex=0.6)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "title": "Spatial Weights & Applications",
    "section": "6.3 Computing adaptive distance weight matrix",
    "text": "6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using the str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n6.3.1 Plotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-with-row-standardized-weights",
    "title": "Spatial Weights & Applications",
    "section": "9.1 Spatial lag with row-standardized weights",
    "text": "9.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  China Geodetic Coordinate System 2000\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC Service lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667   14100  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981   17727  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592    7525  24143.25\n4 Changde 21102      Li      County      Li 24473   53160  27737.50\n5 Changde 21103   Linli      County   Linli 25554    7031  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137    6981  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "title": "Spatial Weights & Applications",
    "section": "9.2 Spatial lag as a sum of neighbouring values",
    "text": "9.2 Spatial lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\n\nStart by applying a function that will assign a value of 1 per each neigbour – done with lapply.\n\n\n#there is an error here\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nUse lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nWe can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-average",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-average",
    "title": "Spatial Weights & Applications",
    "section": "9.3 Spatial window average",
    "text": "9.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdgpc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_w_avg_gpdgpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;% \n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-sum",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-sum",
    "title": "Spatial Weights & Applications",
    "section": "9.4 Spatial window sum",
    "text": "9.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs,\n                       glist = b_weights, \n                       style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;% \n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1,ncol=2)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html",
    "title": "In-class Exercise 05",
    "section": "",
    "text": "There can be a lot of robust discussions surrounding statistical analysis of Spatial weights, which assesses the strength of interaction (combined effect of correlation coefficient and weights)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#spatial-weights-applications",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#spatial-weights-applications",
    "title": "In-class Exercise 05",
    "section": "",
    "text": "There can be a lot of robust discussions surrounding statistical analysis of Spatial weights, which assesses the strength of interaction (combined effect of correlation coefficient and weights)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#importing-study-area",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#importing-study-area",
    "title": "In-class Exercise 05",
    "section": "3.1 Importing study area",
    "text": "3.1 Importing study area"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#converging-to-owin-object",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#converging-to-owin-object",
    "title": "In-class Exercise 05",
    "section": "3.2 Converging to owin object",
    "text": "3.2 Converging to owin object"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GA",
    "section": "",
    "text": "JEZELEI MANANGAN\n\n\nPenultimate Year, BSc Information Systems SMU\n\n\nExplore my work and see how I turn complex datasets into actionable insights. Whether you’re interested in GIS, remote sensing, or spatial analysis, you’ll find a collection of projects that demonstrate my skills in R and newfound knowledge in geospatial analytics.\n\n\n\n\n\n\n\nHands-On Exercise 01\n\n\nBuilding Block 1: Geospatial Data Science with R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 02\n\n\nBuilding Block 2: Thematic Mapping & GeoVisualization with R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 03\n\n\nBuilding Block 3: Spatial Point Pattern Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 04\n\n\nBuilding Block 4: Spatial-Temporal Point Pattern Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 05\n\n\nBuilding Block 5: Spatial Weights and Applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 06\n\n\nBuilding Block 6: Global & Local Measures of Spatial Autocorrelation"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx02/data/MPSZ-2019.html",
    "href": "In-Class_Exercise/InClassEx02/data/MPSZ-2019.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "href": "In-Class_Exercise/InClassEx04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\nWe will work with functions in the spNetwork package:\n\nto derive network kernel density estimation (NKDE), and\nto perform network G-function and k-function analysis"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#preparing-the-lixels-objects",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#preparing-the-lixels-objects",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "6.1 Preparing the lixels objects",
    "text": "6.1 Preparing the lixels objects"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#generating-line-centre-points",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#generating-line-centre-points",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "6.2 Generating line centre points",
    "text": "6.2 Generating line centre points"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#performing-nkde",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#performing-nkde",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "6.3 Performing NKDE",
    "text": "6.3 Performing NKDE"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html",
    "title": "In-class Exercise 04",
    "section": "",
    "text": "The specific questions we would like to answer are:\n\nare the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?\nif the answer is NO, where and when the observed forest fire locations tend to cluster?"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#importing-study-area",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#importing-study-area",
    "title": "In-class Exercise 04",
    "section": "3.1 Importing study area",
    "text": "3.1 Importing study area\nIn this section, st_read() of sf package will be used to import the two geospatial data sets mentioned in previous section into R environment.\nKepulauan_Bangka_Belitung\n\nkbb &lt;- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") \n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nLooking further into the dataset, we notice that the coordinates have Polygon Z Feature.\n\nBefore proceeding, we need to dissolve the boundaries, and check for multi-polygon features. In this case, Polygon Z is not needed and may interfere with further analysis\n\nGroup Z boundaries up\nRemove the Z value\nTransform the projection\n\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;% \n  st_union() %&gt;% \n  st_zm(drop = TRUE, what=\"ZM\") %&gt;% \n  st_transform(crs=32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#converging-to-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#converging-to-owin-object",
    "title": "In-class Exercise 04",
    "section": "3.2 Converging to owin object",
    "text": "3.2 Converging to owin object\nNext, as.owin() is used to convert kbb into an owin object.\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\nNext, class() is used to confim if the output is indeed an owin object\n\nclass(kbb_owin)\n\n[1] \"owin\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#overall-plot",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#overall-plot",
    "title": "In-class Exercise 04",
    "section": "5.1 Overall Plot",
    "text": "5.1 Overall Plot\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_bubbles(alpha = 0.5, size = 0.05) + \n  tm_layout(main.title = \"Forest Fire Distribution in Kepulauan & Bangka Belitung\", \n            )"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#visualizing-geographic-distribution-of-forest-fires-by-month",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#visualizing-geographic-distribution-of-forest-fires-by-month",
    "title": "In-class Exercise 04",
    "section": "5.2 Visualizing Geographic Distribution of Forest Fires by Month",
    "text": "5.2 Visualizing Geographic Distribution of Forest Fires by Month\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_dots(alpha = 0.5, size = 0.1) + \n  tm_layout(main.title = \"Forest Fire Distribution by Month Factor in Kepulauan & Bangka Belitung\", \n            ) + \n  tm_facets(by=\"Month_fac\", \n            free.coords=FALSE,\n            drop.units=TRUE)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#extracting-forest-fires-by-month",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#extracting-forest-fires-by-month",
    "title": "In-class Exercise 04",
    "section": "6.1 Extracting Forest fires by month",
    "text": "6.1 Extracting Forest fires by month\nThe code chunk below is used to remofe the unwanted fields from fire_sf data.frame. This is because as.ppp() only need the mark field and geometry field from the input sf data.frame\n\nfire_month &lt;- fire_sf %&gt;% \n  select(Month_num)\nclass(fire_month)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp",
    "title": "In-class Exercise 04",
    "section": "6.2 Creating ppp",
    "text": "6.2 Creating ppp\nThe code chunk below is used to derive a ppp obect called fire_month from fire_month sf data.frame\n\nfire_month_ppp &lt;- as.ppp(fire_month)\n#marks(fire_month_ppp) &lt;- fire_sf$DayofYear\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nst_crs(kbb_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n\nst_crs(fire_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n\n\nThe code chunk is used to check the output is in the correct object class:\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\nIn the code chunk below, we check for duplicates.\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object",
    "title": "In-class Exercise 04",
    "section": "6.3 Including Owin object",
    "text": "6.3 Including Owin object\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\nplot(fire_month_owin)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#computing-spatio-temporal-kde",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#computing-spatio-temporal-kde",
    "title": "In-class Exercise 04",
    "section": "6.4 Computing Spatio-temporal KDE",
    "text": "6.4 Computing Spatio-temporal KDE\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object",
    "title": "In-class Exercise 04",
    "section": "6.5 Plotting the spatio-temporal KDE Object",
    "text": "6.5 Plotting the spatio-temporal KDE Object\nIn the code chunk below, plot() of R base is used to the KDE for between July 2023 - December 2023.\n\npar(mfrow = c(2, 3), fig.width = 12, fig.height = 10)\n\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.width\"\nis not a graphical parameter\n\n\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.height\"\nis not a graphical parameter\n\ntims &lt;- c(7,8,9,10,11,12)\n\nfor(i in tims){\n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE,\n       main=paste(\"KDE at month\",i))\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object",
    "title": "In-class Exercise 04",
    "section": "7.1 Creating ppp object",
    "text": "7.1 Creating ppp object\nIn the code chunk below, DayofYear field is included in the output ppp object.\n\nfire_yday_ppp &lt;- fire_sf %&gt;% \n  select(DayofYear) %&gt;% \n  as.ppp()"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object-1",
    "title": "In-class Exercise 04",
    "section": "7.2 Including Owin object",
    "text": "7.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-1",
    "title": "In-class Exercise 04",
    "section": "7.3 Plotting the Spatio-temporal KDE object",
    "text": "7.3 Plotting the Spatio-temporal KDE object\n\nkde_yday &lt;- spattemp.density(fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\n\ntims &lt;- 10:352\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object-1",
    "title": "In-class Exercise 04",
    "section": "8.1 Creating ppp object",
    "text": "8.1 Creating ppp object\nNow, the STKDE will be derived by using h and lambda values derive in previous step.\n\nkde_yday_plus &lt;- spattemp.density(\n  fire_yday_owin,\n  h = 9000,\n  lambda =19)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday_plus)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 9000 (spatial)\n  lambda = 19 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [2.001642e-19, 2.445724e-12]"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-2",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-2",
    "title": "In-class Exercise 04",
    "section": "8.2 Plotting the Spatio-temporal KDE object",
    "text": "8.2 Plotting the Spatio-temporal KDE object\n\ntemp_gif &lt;- \"forestFires.gif\"\n\n# Check if the GIF already exists\nif (!file.exists(temp_gif)) {\n  # If the GIF doesn't exist, create and save it\n  saveGIF({\n    for(i in tims){\n      plot(kde_yday, i, \n           override.par=FALSE, \n           fix.range=TRUE,\n           main=paste('KDE at Day', i))\n    }\n  }, movie.name = temp_gif, interval = 0.5, ani.width=800, ani.height=600)\n} else {\n  # If the GIF already exists, skip the saving process\n  message(\"GIF already exists, skipping save.\")\n}\n\nGIF already exists, skipping save."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-shapefile-into-r-environment",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-shapefile-into-r-environment",
    "title": "In-class Exercise 05",
    "section": "3.1 Import shapefile into R environment",
    "text": "3.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer=\"Hunan\") %&gt;% \n  st_transform(crs=4490)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-csv-file-into-r-environment",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-csv-file-into-r-environment",
    "title": "In-class Exercise 05",
    "section": "3.2 Import csv file into R environment",
    "text": "3.2 Import csv file into R environment\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#performing-relational-join",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#performing-relational-join",
    "title": "In-class Exercise 05",
    "section": "3.3 Performing relational join",
    "text": "3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, hunan2012)\nnames(hunan)\n\n\nhunan &lt;- hunan %&gt;% \n  select(1:3, 7, 15, 16, 31, 32)\n\nTake note of the following when doing relational join\n\nUpper case, Lower case lettering\nCommon columns for joining\nStoring the dataset in rds\n\n\nwrite_rds(hunan, \"data/rds/hunan.rds\")\n\nTo use this data for subsequent analysis:\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan.rds\")\n\nUseful rmarkdown:\n\n#| eval: false\n#| echo:false - does not show on the quarto document rendering"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#mapping-the-gdpc",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#mapping-the-gdpc",
    "title": "In-class Exercise 05",
    "section": "Mapping the GDPC",
    "text": "Mapping the GDPC\nConverting to SpatialPolygonDataFrame\n\nhunan_sp &lt;- hunan_sf %&gt;% \n  as_Spatial()"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#determine-adaptive-bandwidth",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#determine-adaptive-bandwidth",
    "title": "In-class Exercise 05",
    "section": "Determine adaptive bandwidth",
    "text": "Determine adaptive bandwidth\n\nAIC\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,  #same value as the GDP Per Capita (Function = 1)\n                 data=hunan_sp, \n                 approach=\"AIC\", \n                 adaptive=TRUE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nCross Validation\nAIC\n\nUnusual cases here:\n\nLatLong = T -&gt; will transform data into projected coordinate system (in kilometer) vs\nLongLat = T (Great Circle Transformation)\n\n\n\nCross Validation\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data=hunan_sp, \n                 approach=\"CV\", \n                 adaptive=TRUE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#fixed-bandwidth",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#fixed-bandwidth",
    "title": "In-class Exercise 05",
    "section": "Fixed bandwidth",
    "text": "Fixed bandwidth\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data=hunan_sp, \n                 approach=\"CV\", \n                 adaptive=FALSE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n\nYou can use fixed bandwidth (change adaptive=TRUE to adaptive=FALSE)\n\nComputing Geographically Summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp, \n               vars=\"GDPPC\", \n               bw = bw_AIC, \n               kernel=\"bisquare\", \n               adaptive=TRUE,\n               longlat = T)\n\nView(gwstat[[“SDF”]]@data)\n\n\nPreparing the output\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\ncbind() to append the newly derived data [cannot introduce sorting /arrange etc]\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\nWhat is the difference between these neighbours and the sp data\n\nLM, LSD,LVar, LSKe, LCV - L for Local\n\nBased on the output, there is no unique identifier for the data"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#visualising-geographically-weighted-summary-statistic",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#visualising-geographically-weighted-summary-statistic",
    "title": "In-class Exercise 05",
    "section": "Visualising geographically weighted summary statistic",
    "text": "Visualising geographically weighted summary statistic\n\ntm_shape(hunan_gstat) + \n  tm_fill(\"GDPPC_LM\", \n          n = 5, \n          style= \"quantile\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Distribution of geographically weighted mean\", \n            main.title.position = \"center\", \n            main.title.size = 2.0, \n            legend.text.size = 1.2,\n            legend.height=1.50, \n            legend.width=1.50,\n            frame=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#objectives",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#objectives",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#packages-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#packages-used",
    "title": "Take-Home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\nThe table below provides a summary of the packages I’ve used for this exercise\n\nThe code chunk below installs and launches the R packages,\n\n\ntidyverse\nfor performing data science tasks such as importing, wrangling and visualising data.\nIt contains the following packages used :\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\n\nsf\npackage provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n\ntmap\nwhich provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\nspatstat\nhas functions useful for Point Pattern Analysis\n\n\nraster\nreads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)\n\n\nspNetwork\nwhich provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n\nsp\n\n\n\ndplyr\n\n\n\nsparr\nprovides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n\nanimation\n\n\n\n\n\npacman::p_load(tidyverse, sf, sp, tmap, spatstat, raster, spNetwork, RColorBrewer,dplyr, sparr,animation, magick)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#datasets-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#datasets-used",
    "title": "Take-Home Exercise 1",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nIn response to the background context of the armed conflict happening in Myanmar, the exercise aims to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\nUpon further research, I’ve managed to come across an interesting resource which maps out the Warscapes in Myanmar. It illustrates the variations in the type of conflict inflicted in different zones of the country\n\nAspatial Data\n\nMYNMAR.CSV dataset derived from Armed Conflict Location & Event Data Project (ACLED), a non-profit organization collecting, analyzing and mapping data on political violence and protest events around the world. (Limited to Jan 2021 - June 2024)\n\n\n\nGeospatial\nThe following datasets were obtained from: https://data.humdata.org/organization/mimu\n\nMyanmar Country Boundaries MIMU\nMyanmar State_Region Boundaries MIMU\nPoints of Interest from OpenStreetMap, depicting different categories of features mapped by the OSM community. It depicts various categories such as : public services and infrastructure, emergency and safety locations, amenities etc.\n\nThis additional dataset from OpenStreetMap is crucial for analyzing armed conflict in Myanmar as it provides detailed geographic information on key locations such as public services, infrastructure, and emergency and safety sites. Understanding the distribution of these points of interest helps in assessing the impact of conflict on civilian infrastructure, access to essential services, and the safety of affected populations. Furthermore, it may aid in planning humanitarian assistance, evacuation routes, and monitoring areas of strategic importance during the conflict through data insights.\nFor the purposes of this exercise, we will focus on the State/Region boundaries, seeing as the conflict is generally explored in this manner (as inferred from the given references in the Take Home Exercise Overview). This is represented by the first administrative level (admin1). Myanmar is divided into 7 states and 7 regions (plus the Union Territory of Naypyidaw).\nThese boundaries are politically and administratively significant. Different states (e.g., Kachin, Rakhine, Shan) and regions have distinct ethnic compositions and different conflict dynamics, making this level critical for understanding broader conflict patterns."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#importing-spatial-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#importing-spatial-data",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Importing Spatial Data",
    "text": "3.1 Importing Spatial Data\n\n1. Myanmar CSV\nUsing read_csv to import the data in the MYANMAR.CSV file, which is the ACLED Dataset detailing armed conflict in Myanmar:\n\narmed_conflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck and transform the CRS of the ACLED Dataset:\n\ncolnames(armed_conflict_data)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\n\n\narmed_conflict &lt;- st_as_sf(armed_conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;% \n  st_transform(armed_conflict, crs=32647)\n\n\n\n2. Country, State, Region, District Boundaries\nUsing the st_read function, we will import data from the State & Region Sub-boundary dataset to visualize Myanmar’s landscape. We will focus our analysis on the State_Region Level (Admin1)\n\nstate_region_sf &lt;-  st_read(dsn=\"data/geospatial/stateRegion\", layer \n=\"mmr_polbnda_adm1_250k_mimu_1\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/stateRegion' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\ndistrict_sf &lt;- st_read(dsn=\"data/geospatial/district\", layer \n=\"mmr_polbnda_adm2_250k_mimu\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/district' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nAfter importing the dataset, we will plot to see the boundaries of the State & Regions of Myanmar. The plot() function is used to plot the geometry of the sf object. The st_geometry() function is used to extract the geometry of the state_region_sf object.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_polygons() + \n  tm_text(\"ST\", size =0.9, just=\"center\")\n\n\n\n\n\n\n\ntm_layout(frame=FALSE)\n\n$tm_layout\n$tm_layout$frame\n[1] FALSE\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\n\n3. Points of Interest\nFrom here on out, we will denote points-of-interest as POI.\nI will load the corresponding shapefile:\n\npoi_sf &lt;- st_read(dsn = \"data/geospatial/pointsOfInterest\", layer = \"hotosm_mmr_points_of_interest_points_shp\") %&gt;%\n  st_set_crs(4326) %&gt;%  \n  st_transform(crs = 32647)  \n\nReading layer `hotosm_mmr_points_of_interest_points_shp' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/pointsOfInterest' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56187 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 92.15357 ymin: 9.756896 xmax: 101.1515 ymax: 28.36754\nCRS:           NA\n\n\n\nst_crs(poi_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\ncolnames(poi_sf)\n\n [1] \"name\"       \"name_en\"    \"amenity\"    \"man_made\"   \"shop\"      \n [6] \"tourism\"    \"opening_ho\" \"beds\"       \"rooms\"      \"addr_full\" \n[11] \"addr_house\" \"addr_stree\" \"addr_city\"  \"source\"     \"name_my\"   \n[16] \"osm_id\"     \"osm_type\"   \"geometry\"  \n\n\nBased on the unique amenities, those that would be relevant in analyzing armed conflict effects in Myanmar would be : “hospital” , “refugee_site”, “Health centre” , “clinic”:\n\npoi_sf &lt;- poi_sf %&gt;% \n  mutate(amenity = str_to_lower(amenity)) %&gt;% \n  filter(amenity %in% c(\"refugee_site\", \"hospital\", \"health center\")) %&gt;% \n  dplyr::select(name_en, amenity, geometry)\n\npoi_sf\n\nSimple feature collection with 617 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -211935.1 ymin: 1103190 xmax: 697952 ymax: 3026108\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                         name_en  amenity                 geometry\n1                           &lt;NA&gt; hospital POINT (439165.5 1562018)\n2       Kalar Chaunggyi Hospital hospital POINT (262988.5 1908198)\n3                  militry O.P.T hospital POINT (238995.6 2440150)\n4           Myint Mo Oo Hospital hospital POINT (414147.5 1556093)\n5             Chan Myae Hospital hospital POINT (412546.6 1555811)\n6              Mediland Hospital hospital POINT (412151.4 1557561)\n7  Traditional Medicine Hospital hospital POINT (411729.3 1557083)\n8                           &lt;NA&gt; hospital POINT (458901.2 1144896)\n9              Kra Buri Hospital hospital POINT (475772.4 1149467)\n10        Dawei General Hospital hospital POINT (413966.3 1556630)\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) +\n  tm_polygons(alpha=0.5) + \n  tm_shape(poi_sf) +\n  tm_dots(col = \"amenity\", palette = \"Set1\",\n          title=\"Amenity Type\") +\n  tm_layout(main.title = \"Distribution of Healthcare Infrastructure & Amenities\", \n            main.title.position = c(\"center\", \"top\")\n  ) + \n  tm_layout(legend.outside=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#data-preparation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nBefore a thematic map can be prepared, we have to prepare a data table which includes the variables event types, focused on : Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nstr(armed_conflict)\n\nsf [42,608 × 30] (S3: sf/tbl_df/tbl/data.frame)\n $ event_id_cnty     : chr [1:42608] \"MMR64313\" \"MMR64320\" \"MMR64321\" \"MMR64322\" ...\n $ event_date        : chr [1:42608] \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" ...\n $ year              : num [1:42608] 2024 2024 2024 2024 2024 ...\n $ time_precision    : num [1:42608] 1 1 1 1 1 1 1 1 1 1 ...\n $ disorder_type     : chr [1:42608] \"Political violence\" \"Political violence\" \"Political violence\" \"Strategic developments\" ...\n $ event_type        : chr [1:42608] \"Battles\" \"Battles\" \"Battles\" \"Strategic developments\" ...\n $ sub_event_type    : chr [1:42608] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Change to group/activity\" ...\n $ actor1            : chr [1:42608] \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"Military Forces of Myanmar (2021-)\" ...\n $ assoc_actor_1     : chr [1:42608] \"MDA - AGF: Madaya - The Authentic Genes Force; SSTF: Security & Special Task Force CDM People's Police\" NA NA NA ...\n $ inter1            : num [1:42608] 3 3 3 1 3 1 1 2 1 1 ...\n $ actor2            : chr [1:42608] \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" NA ...\n $ assoc_actor_2     : chr [1:42608] NA NA NA NA ...\n $ inter2            : num [1:42608] 1 1 1 0 1 0 2 1 2 2 ...\n $ interaction       : num [1:42608] 13 13 13 10 13 10 12 12 12 12 ...\n $ civilian_targeting: chr [1:42608] NA NA NA NA ...\n $ iso               : num [1:42608] 104 104 104 104 104 104 104 104 104 104 ...\n $ region            : chr [1:42608] \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" ...\n $ country           : chr [1:42608] \"Myanmar\" \"Myanmar\" \"Myanmar\" \"Myanmar\" ...\n $ admin1            : chr [1:42608] \"Mandalay\" \"Mandalay\" \"Mandalay\" \"Sagaing\" ...\n $ admin2            : chr [1:42608] \"Mandalay\" \"Pyinoolwin\" \"Pyinoolwin\" \"Shwebo\" ...\n $ admin3            : chr [1:42608] \"Patheingyi\" \"Singu\" \"Thabeikkyin\" \"Khin-U\" ...\n $ location          : chr [1:42608] \"Aung Tha Pyay\" \"Pin Lel Gyi\" \"Thabeikkyin\" \"Khin-U\" ...\n $ geo_precision     : num [1:42608] 2 1 2 2 2 2 1 1 2 1 ...\n $ source            : chr [1:42608] \"Democratic Voice of Burma; Irrawaddy\" \"Irrawaddy\" \"Irrawaddy\" \"Democratic Voice of Burma; Khit Thit Media\" ...\n $ source_scale      : chr [1:42608] \"National\" \"National\" \"National\" \"Subnational-National\" ...\n $ notes             : chr [1:42608] \"On 30 June 2024, near Aung Tha Pyay village (Patheingyi township, Mandalay district, Mandalay region), a combin\"| __truncated__ \"On 30 June 2024, in Pin Lel Gyi village (Singu township, Pyinoolwin district, Mandalay region), the People's De\"| __truncated__ \"On 30 June 2024, in Thabeikkyin township (Pyinoolwin district, Mandalay region), the People's Defense Force - M\"| __truncated__ \"Change to armed group: On 30 June 2024, in Khin-U town (Khin-U township, Shwebo district, Sagaing region), a mi\"| __truncated__ ...\n $ fatalities        : num [1:42608] 0 0 0 0 0 0 0 2 0 0 ...\n $ tags              : chr [1:42608] NA NA NA NA ...\n $ timestamp         : num [1:42608] 1.72e+09 1.72e+09 1.72e+09 1.72e+09 1.72e+09 ...\n $ geometry          :sfc_POINT of length 42608; first list element:  'XY' num [1:2] 214961 2452068\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"event_id_cnty\" \"event_date\" \"year\" \"time_precision\" ...\n\n\nHere is a visual overview of the 4 different types of Armed Conflict (based on event_types) :\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_borders(col = \"black\") + \n  tm_shape(armed_conflict) + \n  tm_dots(col = \"event_type\", palette = \"Set1\", size = 0.01, alpha = 0.5) +\n  tm_facets(by = \"event_type\") + \n  tm_layout(title = \"Armed Conflict in Myanmar (Jan 2021 - Jun 2024)\", \n            legend.outside = TRUE) +\n  tm_legend(title = \"Event Type\")\n\n\n\n\n\n\n\n\nFrom the plots above, we see that armed conflict even types seem to concentrate in the North-west region, particularly at the boundary of Sagaing, Mandalay and Magwe state, which we will zoom in on.\nIn order to group and have a sensing of the effects of armed conflict, we will aggregate based on fatalities to see a quick overview as well as their state (administrative boundary 1) :\n\narmed_conflict_fatalities &lt;- armed_conflict %&gt;% \n  group_by(admin1, event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Summarize fatalities based on the administrative boundary (stateRegion)\n  group_by(admin1) %&gt;% \n  mutate(total_fatalities_admin1 = sum(total_fatalities)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Arrange admin1 by descending order of fatalities and then the event type \n  arrange(desc(total_fatalities_admin1), admin1, desc(total_fatalities)) \n\n`summarise()` has grouped output by 'admin1'. You can override using the\n`.groups` argument.\n\narmed_conflict_fatalities\n\nSimple feature collection with 72 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 72 × 5\n   admin1   event_type                total_fatalities                  geometry\n   &lt;chr&gt;    &lt;chr&gt;                                &lt;dbl&gt;          &lt;MULTIPOINT [m]&gt;\n 1 Sagaing  Battles                              11225 ((-16397.05 2576482), (-…\n 2 Sagaing  Explosions/Remote violen…             5161 ((-13753.92 2572123), (-…\n 3 Sagaing  Violence against civilia…             2513 ((-13808.2 2533298), (-1…\n 4 Sagaing  Strategic developments                  40 ((-16397.05 2576482), (-…\n 5 Magway   Battles                               3910 ((-14448.48 2310133), (-…\n 6 Magway   Explosions/Remote violen…             1701 ((-11811.97 2503484), (-…\n 7 Magway   Violence against civilia…              544 ((-9822.857 2409014), (-…\n 8 Magway   Strategic developments                  17 ((-11256.98 2417070), (-…\n 9 Mandalay Battles                               1658 ((69197.66 2321843), (84…\n10 Mandalay Explosions/Remote violen…             1051 ((75228.96 2349261), (96…\n# ℹ 62 more rows\n# ℹ 1 more variable: total_fatalities_admin1 &lt;dbl&gt;\n\n\nBased on the above result, we see that the fatalities are concentrated in are concentrated in these 3 states: Sagaing, Magway and Mandalay.\nThe code chunk below explores the data further:\n\narmed_conflict_fatalities_by_event_type &lt;- armed_conflict %&gt;% \n  group_by(event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\narmed_conflict_fatalities_by_event_type\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 4\n  event_type              total_fatalities event_count                  geometry\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;int&gt;          &lt;MULTIPOINT [m]&gt;\n1 Battles                            35924       12049 ((-207135 2358896), (-20…\n2 Explosions/Remote viol…            11562       12208 ((-208804.4 2357274), (-…\n3 Violence against civil…             6478        6225 ((-206931.7 2359490), (-…\n4 Strategic developments               127       12126 ((-206931.7 2359490), (-…\n\n\nBefore doing so, let’s explore the nuances in the naming convention to understand a potential reason why conflict arises:\n\narea_names &lt;- state_region_sf %&gt;% \n  distinct(ST_RG) %&gt;% \n  pull(ST_RG)\n\narea_names\n\n[1] \"Region\"          \"State\"           \"Union Territory\"\n\n\n\nKey Differences\n\nState:\n\nRepresents areas predominantly inhabited by ethnic minorities, each with their own cultural and historical significance.\nOften involved in ethnic conflicts, seeking more autonomy.\n\nRegion:\n\nRepresents the Bamar-majority areas, which have more economic and political power.\nTypically less conflict-prone compared to states.\n\nUnion Territory:\n\nA special administrative area directly controlled by the central government (e.g., the capital region).\nNo local parliament or legislative autonomy."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#subsetting-the-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#subsetting-the-data",
    "title": "Take-Home Exercise 1",
    "section": "3.3 Subsetting the data:",
    "text": "3.3 Subsetting the data:\n\n3.3.1 Data Processing of subsetted dataset - MYANMAR.CSV\nWe’ll now process the data to see the corresponding fatalities with the different event types mentioned above, Battles, Explosions/Remote violence, Strategic developments and Violence against civilians.\nFrom this point forward, we will focus on the event_type of ‘Battles’ and sub_event_type of ‘Armed Clash’ as it would be interesting to analyse given that it has the most event counts and fatalities as aggregated in the code above:\n\nSince we are interested in deriving the quarterly KDE layers, we will convert the event_date column (currently in [chr] format), into a Date object that can be used for further analysis.\n\n\narmed_conflict_sf &lt;- armed_conflict %&gt;%\n  filter(event_type == \"Battles\") %&gt;% \n  filter(admin1 %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  dplyr::select(1:3, 5:8, 11, 15, 19, 20, 27, 29, 30)\n\nSave the intermediate dataset to rds:\n\nwrite_rds(armed_conflict_sf, \"data/rds/armed_conflict_sf.rds\")\n\nWe change the CRS to 32647 given that it is in the North Western Zone of Myanmar:\n\narmed_conflict_sf &lt;- read_rds(\"data/rds/armed_conflict_sf.rds\") %&gt;% \n  st_transform(crs = 32647) \n\n\nhead(armed_conflict_sf)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 146213 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 14\n  event_id_cnty event_date   year disorder_type event_type sub_event_type actor1\n  &lt;chr&gt;         &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n1 MMR64313      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n2 MMR64320      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n3 MMR64321      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n4 MMR64323      30 June 20…  2024 Political vi… Battles    Armed clash    PKDF …\n5 MMR64314      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n6 MMR64319      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n# ℹ 7 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\narmed_conflict_sf &lt;- armed_conflict_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) %&gt;% \n  mutate(quarter = paste0(\"Q\", quarter(event_date), \" \", year(event_date)))\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_conflict_battles &lt;- armed_conflict_sf %&gt;% \n  group_by(event_type, sub_event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n    filter(event_type == \"Battles\") %&gt;% \n    ungroup() \n\n`summarise()` has grouped output by 'event_type'. You can override using the\n`.groups` argument.\n\narmed_conflict_battles\n\nSimple feature collection with 3 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 5\n  event_type sub_event_type                      total_fatalities event_count\n  &lt;chr&gt;      &lt;chr&gt;                                          &lt;dbl&gt;       &lt;int&gt;\n1 Battles    Armed clash                                    16750        4681\n2 Battles    Government regains territory                       0           1\n3 Battles    Non-state actor overtakes territory               43          15\n# ℹ 1 more variable: geometry &lt;GEOMETRY [m]&gt;\n\n\n\ntotal_deaths &lt;- armed_conflict %&gt;% summarize(total_fatalities = sum(fatalities, na.rm=TRUE),\n            event_count = n())\n\ntotal_deaths\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 3\n  total_fatalities event_count                                          geometry\n             &lt;dbl&gt;       &lt;int&gt;                                  &lt;MULTIPOINT [m]&gt;\n1            54091       42608 ((-208804.4 2357274), (-207135 2358896), (-20693…\n\n\nOut of 54091 deaths for the whole of Myanmar for Jan 2021 - Jun 2024, encompassing all event_types and sub_event_types recorded, deaths from event_type == “Battles” , specifically the sub_event_type of “Armed clash” has lead to 34581 deaths in the states of Myanmar alone, accounting for ~63.9% of deaths.\n\n\n3.3.1 Data Processing of subsetted dataset - State_Region_sf\n\nstate3_sf &lt;- state_region_sf %&gt;% \n  filter(ST %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  st_transform(crs = 32647)\n\nstate3_sf\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -37628.21 ymin: 2086865 xmax: 308341.4 ymax: 3029739\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID       ST ST_PCODE  ST_RG          ST_MMR PCode_V\n1        8   Magway   MMR009 Region   မကွေးတိုင်းဒေသကြီး     9.4\n2        9 Mandalay   MMR010 Region မန္တလေးတိုင်းဒေသကြီး     9.4\n3       13  Sagaing   MMR005 Region  စစ်ကိုင်းတိုင်းဒေသကြီး     9.4\n                        geometry\n1 MULTIPOLYGON (((-1717.607 2...\n2 MULTIPOLYGON (((208184.3 26...\n3 MULTIPOLYGON (((275295.6 30...\n\n\n\nplot(state3_sf)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#filtering-down-to-battles-armed-clash",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#filtering-down-to-battles-armed-clash",
    "title": "Take-Home Exercise 1",
    "section": "3.4 Filtering down to Battles, Armed Clash",
    "text": "3.4 Filtering down to Battles, Armed Clash\n\n3.4.1 Analyzing Densities based on fatalities and event_count\nCalculating area of each state in km^2:\n\nstate3_sf &lt;- state3_sf %&gt;% \n  mutate(area_km2 = st_area(geometry) / 1e6)\n\nDensity for Fatalities & Event_count in the area:\n\nevent_density_data &lt;- armed_conflict_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    total_events = n(),               \n    total_fatalities = sum(fatalities, na.rm = TRUE)  \n  ) %&gt;% \n  ungroup()\n\nMerge the event data with the state-level area data\n\nevent_density_data\n\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 4\n  admin1   total_events total_fatalities                                geometry\n  &lt;chr&gt;           &lt;int&gt;            &lt;dbl&gt;                        &lt;MULTIPOINT [m]&gt;\n1 Magway           1115             3910 ((-14448.48 2310133), (-11778.42 23314…\n2 Mandalay          602             1658 ((69197.66 2321843), (84966.22 2353705…\n3 Sagaing          2980            11225 ((-16397.05 2576482), (-13816.45 25496…\n\n\n\nevent_density_data &lt;- state3_sf %&gt;%\n  st_join(event_density_data, by = \"admin1\")\n\n\ncolnames(event_density_data)\n\n [1] \"OBJECTID\"         \"ST\"               \"ST_PCODE\"         \"ST_RG\"           \n [5] \"ST_MMR\"           \"PCode_V\"          \"area_km2\"         \"admin1\"          \n [9] \"total_events\"     \"total_fatalities\" \"geometry\"        \n\n\n\nevent_density_data &lt;- event_density_data %&gt;%\n  mutate(\n    event_density = total_events / area_km2,         \n    fatality_density = total_fatalities / area_km2    \n  )\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Plot event density\ntm_shape(event_density_data) +\n  tm_polygons(\"event_density\", title = \"Event Density (Events/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n# Plot fatality density\ntm_shape(event_density_data) +\n  tm_polygons(\"fatality_density\", title = \"Fatality Density (Fatalities/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.1 Subsetting the data:\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_clash_sf &lt;- armed_conflict_sf %&gt;% \n  filter(event_type == \"Battles\", sub_event_type ==\"Armed clash\") %&gt;% \n  group_by(quarter, event_type, sub_event_type, admin1, geometry, event_date) %&gt;% \n  summarize(\n      `FATALITIES` = sum(fatalities, na.rm=TRUE), \n      event_count = n()\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'quarter', 'event_type', 'sub_event_type',\n'admin1', 'geometry'. You can override using the `.groups` argument.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-object-to-sp-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-object-to-sp-object",
    "title": "Take-Home Exercise 1",
    "section": "3.5 Converting sf Object to sp Object",
    "text": "3.5 Converting sf Object to sp Object\n\narmed_clash_sp &lt;- as(armed_clash_sf, \"Spatial\")\nstate3_sp &lt;- as(state3_sf, \"Spatial\")\n\n\ncolnames(armed_clash_sf)\n\n[1] \"quarter\"        \"event_type\"     \"sub_event_type\" \"admin1\"        \n[5] \"geometry\"       \"event_date\"     \"FATALITIES\"     \"event_count\"   \n\n\n\nunique_coordinates &lt;- armed_clash_sf %&gt;%\n  summarise(unique_count = n_distinct(geometry))  # Directly on geometry column\n\n# For total event count\ntotal_armed_clash_count &lt;- armed_clash_sf %&gt;% \n  summarise(event_count = sum(event_count, na.rm = TRUE))\n\n# Print results\nprint(unique_coordinates)\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  unique_count                                                          geometry\n         &lt;int&gt;                                                  &lt;MULTIPOINT [m]&gt;\n1         1547 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), …\n\nprint(total_armed_clash_count)  \n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  event_count                                                           geometry\n        &lt;int&gt;                                                   &lt;MULTIPOINT [m]&gt;\n1        4681 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), (…\n\n\nOut of 4681 Armed Clash conflict events, only 1547 unique coordinate points are recorded, indicating the that armed clashes occurred more than once for the coordinate points in general."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "3.6 Converting sp Object to spatstat’s ppp Format",
    "text": "3.6 Converting sp Object to spatstat’s ppp Format\n\nglimpse(armed_clash_sp)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 4594 obs. of  7 variables:\n  .. ..$ quarter       : chr [1:4594] \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" ...\n  .. ..$ event_type    : chr [1:4594] \"Battles\" \"Battles\" \"Battles\" \"Battles\" ...\n  .. ..$ sub_event_type: chr [1:4594] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Armed clash\" ...\n  .. ..$ admin1        : chr [1:4594] \"Magway\" \"Magway\" \"Magway\" \"Mandalay\" ...\n  .. ..$ event_date    : Date[1:4594], format: \"2021-03-30\" \"2021-03-31\" ...\n  .. ..$ FATALITIES    : num [1:4594] 1 1 4 1 2 4 6 1 2 5 ...\n  .. ..$ event_count   : int [1:4594] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:4594, 1:2] -4389 -4389 -6592 97374 101220 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -16397 2108023 255317 2987342\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\narmed_clash_ppp &lt;- as.ppp(armed_clash_sf)\n\nWarning in as.ppp.sf(armed_clash_sf): only first attribute column is used for\nmarks\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\nplot(armed_clash_ppp)\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#handling-duplicated-points",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#handling-duplicated-points",
    "title": "Take-Home Exercise 1",
    "section": "3.7 Handling Duplicated Points",
    "text": "3.7 Handling Duplicated Points\nWe check for duplication in the ppp object using the code chunk below. Before processing, we need to account for the fact that we have divided the data into quarters, which would result in the event_types at the same location being treated as separate points, but spatstat recognizing them as duplicates as they share the exact same coordinates.\n\nany(duplicated(armed_clash_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(armed_clash_ppp) &gt; 1)\n\n[1] 2503\n\n\nTo account for the number of locations which have more than one point event, we can use the code chunk below:\n\ncoords &lt;- st_coordinates(armed_clash_sf)\ncoords_df &lt;- as.data.frame(coords)\n\nlocation_counts &lt;- coords_df %&gt;% \n  group_by(X,Y) %&gt;% \n  summarize(count = n()) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'X'. You can override using the `.groups`\nargument.\n\nlocations_with_multiple_events &lt;- location_counts %&gt;% \n  filter(count &gt; 1)\n\ncount_locations_with_multiple_events &lt;- nrow(locations_with_multiple_events)\ncount_locations_with_multiple_events\n\n[1] 607\n\n\nOut of 1547 unique coordinate points, 515 have more than one conflict events occuring throughout the time period of Jan 2021 - Jun 2024, which could account for the 2503 duplicate count above.\n\ntmap_mode('view')\n\ntm_shape(armed_clash_sf) + \n  tm_dots(alpha = 0.7, size = 0.01)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "title": "Take-Home Exercise 1",
    "section": "3.8 Spotting Duplicate points from the map shown",
    "text": "3.8 Spotting Duplicate points from the map shown\nTo address the duplicate points, which largely arises due to the temporal aspect of the data we will use Jittering (adding a small perturbation to the duplicate points so that they do not occupy the exact same space)\nThe code chunk below implements the jittering approach.\n\narmed_clash_jitter &lt;- rjitter(armed_clash_ppp, \n                                 retry=TRUE, \n                                 nsim=1, \n                                 drop=TRUE)\n\nCheck for duplicated points in the data:\n\nany(duplicated(armed_clash_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Combining point events object and owin object",
    "text": "4.1 Combining point events object and owin object\nIn the next step of geospatial data wrangling, we extract armed conflict (armed clash as a subset of Battles) events located within Myanmar using this code chunk:\n\narmed_clash_myn_ppp &lt;- armed_clash_ppp[states3_owin]\n\nThe output combined both the point and polygon feature in one ppp object class as shown below:\n\nplot(armed_clash_myn_ppp, cex = 0.4, main=\"Spatial Distribution of Battles (Armed Clash) in Myanmar\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(armed_clash_myn_ppp)\n\nMarked planar point pattern:  4594 points\nAverage intensity 2.703969e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     4594 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 10179 vertices\nenclosing rectangle: [-37628.21, 308341.37] x [2086865.1, 3029739.1] units\n                     (346000 x 942900 units)\nWindow area = 1.69898e+11 square units\nFraction of frame area: 0.521"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#kernel-density-estimation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nThis section with perform first-order SPPA and focus on :\n\nDeriving KDE for visualizing and exploring the intensity of point processes\nPerform Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour Statistics\n\n\n5.1.1 Computing KDE using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n\nkde_armed_clash_myn_bw &lt;- density(armed_clash_myn_ppp, \n                                     sigma=bw.diggle, \n                                     edge=TRUE,\n                                     kernel=\"gaussian\")\n\n\nplot(kde_armed_clash_myn_bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp)\nsigma_diggle\n\n   sigma \n84.63052 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, we need to rescale.ppp() unit from meter to kilometer to prevent interference in the scale as well as the distortion of the bandwith values:\n\narmed_clash_myn_ppp.km &lt;- rescale.ppp(armed_clash_myn_ppp, 1000, \"km\")\n\nWe re-run density() using the rescaled data and plot the output KDE map: (Note the difference between _bw and .bw to denote scaled data)\n\nkde_armed_clash_myn.bw &lt;- density(armed_clash_myn_ppp.km,\n                                     sigma=bw.diggle, \n                                     edge=TRUE, \n                                     kernel=\"gaussian\")\n\nplot(kde_armed_clash_myn.bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp.km)\nsigma_diggle\n\n     sigma \n0.08463052"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Working with different automatic bandwidth methods",
    "text": "6.1 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(armed_clash_myn_ppp.km)\n\n   sigma \n32.05992 \n\n\n\nbw.scott(armed_clash_myn_ppp.km)\n\n sigma.x  sigma.y \n16.84732 26.63314 \n\n\n\nbw.ppl(armed_clash_myn_ppp.km)\n\n   sigma \n3.674435 \n\n\n\nbw.diggle(armed_clash_myn_ppp.km)\n\n     sigma \n0.08463052 \n\n\nThe code chunk beow will be used to compare the output of using the different methods.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States CvL\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States Scott\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States ppl\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States diggleL\"))\n\n\n\n\n\n\n\n\nInterpretation: To summarize given the expectation of multiple clusters in th Myanmar conflict data, I’ll be predominantly utilizing bw.ppl(), well-suited for capturing multiple clusters without overfitting or underfitting, Baddeley et al. (2016). In the case where tighter, isolated clusters are preferred, bw.diggle() will be the sigma used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-kernel-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-kernel-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Working with different kernel methods",
    "text": "6.2 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Fixed vs Adaptive bandwidth for KDE",
    "text": "6.2 Fixed vs Adaptive bandwidth for KDE\nThe choice between automatic and adaptive bandwidth depends on the objectives and nature of our analysis.\n\n6.2.1 Computing KDE by using fixed bandwidth\n\n\n\n\n\n\nFixed Bandwidth\nAdaptive Bandwidth\n\n\n\n\nOffers Consistency across Space: Uniform smoothing across the entire study area.\nVarying Spatial Densities: Showing significant differences in conflict event densities (urban, rural ares), adaptive bandwidth could give a more nuanced understanding\n\n\nGeneral Hotspot Detection: To identify overall hotspots or conflict zones without too much detail\nLocal Hotspot Detection\n\n\n\nBased on our earlier analysis, we received a sigma value of 6. which results in minimal smoothing, meaning the KDE will show more localized patterns, however, this could lead to overfitting, where small clusters are exaggerated and conflict points are more prone to misinterpretation.\nCurrently, as I am unsure of what sigma degree to use, a good starting point would be to calculate the average or median Nearest Neighbour distance between points and use that as an initial value:\n\nmean_distance &lt;- mean(nndist(armed_clash_myn_ppp.km))\n\npar(mfrow=c(1,2))\nkde_diggle &lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.diggle)\nkde_ppl&lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.ppl)\nplot(kde_diggle)\nplot(kde_ppl)\n\n\n\n\n\n\n\n\n\n6.2.2 Computing KDE by using adaptive bandwidth\n\nkde_armed_clash_myn_adaptive &lt;- adaptive.density(armed_clash_myn_ppp.km, \n                                                 method=\"kernel\")\nplot(kde_armed_clash_myn_adaptive)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "title": "Take-Home Exercise 1",
    "section": "6.3 Fixed Bandwith for Quarterly KDE Analysis",
    "text": "6.3 Fixed Bandwith for Quarterly KDE Analysis\n\nKey Considerations for KDE Comparison Across Quarters:\n\nConsistency: For the KDEs to be comparable across different quarters, you need to use the same sigma for all quarters. This ensures that the degree of smoothing is consistent across the time periods, allowing you to make fair comparisons of density patterns over time.\nScale of Patterns: The chosen sigma should be large enough to reveal the relevant spatial patterns without introducing too much noise (from a very small sigma) or losing too much detail (from a very large sigma).\n\n\n\n\n\n\n\n\n\n\nInitial Sigma Value (0.07)\n\nMean Distance (1.6)\n\n\n\n\n\nAdvantages\nDisadvantages\nAdvantages\nDisadvantages\n\n\nCaptures local detail: This smaller sigma will emphasize fine-grained, local patterns, showing small clusters of events that may otherwise be smoothed over with a larger sigma.\nToo small for larger trends: A sigma of 0.18 may result in overfitting, where the KDE highlights every small cluster or isolated event.\nGood balance of local and global patterns: A sigma of 1.6 km (based on average nearest neighbor distance) strikes a balance between capturing local clusters and revealing broader spatial trends. It smooths out small noise while still showing meaningful clusters.\nLess local detail: While the 1.6 km sigma is a good balance, it may not capture very small-scale, localized patterns that might be relevant in specific analyses.\n\n\nGood for high-detail analysis: If your goal is to observe very specific spatial variations within each quarter, this smaller sigma might be more suitable.\nDifficult for comparisons: A very small sigma might highlight differences in individual points rather than overall trends, making it harder to compare the general distributions across quarters.\nBetter for comparisons: Since this sigma is derived from the overall spacing of points in your dataset, it reflects a more general spatial structure. This makes it more suitable for comparing KDE patterns across different quarters, as it ensures that the bandwidth is appropriate for both sparse and dense data, without overemphasizing small differences.\n\n\n\n\nContent adapted from Luc Anselin Spatial Econometrics.\nBased on this analysis, I am more inclined to go with the mean distance calculated for a Fixed Bandwidth, which we will use to compare Battles (Armed clash) across different quarters.\nSimple visualizations through graphs can help us get a better sense of the temporal aspect of when these armed clashes occurred. Since we are dealing with time:\n\narmed_clash_long &lt;- armed_clash_sf %&gt;%\n  arrange(desc(FATALITIES)) %&gt;% \n  pivot_longer(cols = c(FATALITIES, event_count), \n               names_to = \"measure\",             \n               values_to = \"value\")\n\n\nggplot(armed_clash_long, aes(x = value, \n                             y = factor(quarter, levels = sort(unique(quarter))))) + \n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"black\") +  \n  geom_text(data = armed_clash_long %&gt;%\n              group_by(quarter, measure) %&gt;% \n              filter(value == max(value)),  \n            aes(label = round(value, 1)),  \n            position = position_dodge(width = 0.9), \n            vjust = 0.5,  \n            hjust = 4.0,  \n            size = 3,    \n            color = \"white\") + \n  facet_wrap(~measure, scales = \"free_x\") + \n  labs(title = \"Total Fatalities and Event Count by Event Type per Quarter\", \n       x = \"Value\", \n       y = \"Quarter\") + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nquarters &lt;- unique(marks(armed_clash_myn_ppp))\n\npar(mfrow = c(2,2))\n\nfor (q in quarters){\n  quarter_ppp &lt;- armed_clash_myn_ppp[marks(armed_clash_myn_ppp)==q]\n  plot(quarter_ppp, main=paste(\"Spatial Distribution for\", q), cex = 0.5)\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object",
    "text": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object\n\nq1_2021_ppp &lt;- q1_2021_jitter[states3_owin]\nq2_2021_ppp &lt;- q2_2021_jitter[states3_owin]\nq3_2021_ppp &lt;- q3_2021_jitter[states3_owin]\nq4_2021_ppp &lt;- q4_2021_jitter[states3_owin]\n\n# For 2022\nq1_2022_ppp &lt;- q1_2022_jitter[states3_owin]\nq2_2022_ppp &lt;- q2_2022_jitter[states3_owin]\nq3_2022_ppp &lt;- q3_2022_jitter[states3_owin]\nq4_2022_ppp &lt;- q4_2022_jitter[states3_owin]\n\n# For 2023\nq1_2023_ppp &lt;- q1_2023_jitter[states3_owin]\nq2_2023_ppp &lt;- q2_2023_jitter[states3_owin]\nq3_2023_ppp &lt;- q3_2023_jitter[states3_owin]\nq4_2023_ppp &lt;- q4_2023_jitter[states3_owin]\n\n# For 2024\nq1_2024_ppp &lt;- q1_2024_jitter[states3_owin]\nq2_2024_ppp &lt;- q2_2024_jitter[states3_owin]"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#rescale.ppp",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#rescale.ppp",
    "title": "Take-Home Exercise 1",
    "section": "7.2 Rescale.ppp()",
    "text": "7.2 Rescale.ppp()\n\n# For 2021\nq1_2021_ppp.km = rescale.ppp(q1_2021_ppp, 1000, \"km\")\nq2_2021_ppp.km = rescale.ppp(q2_2021_ppp, 1000, \"km\")\nq3_2021_ppp.km = rescale.ppp(q3_2021_ppp, 1000, \"km\")\nq4_2021_ppp.km = rescale.ppp(q4_2021_ppp, 1000, \"km\")\n\n# For 2022\nq1_2022_ppp.km = rescale.ppp(q1_2022_ppp, 1000, \"km\")\nq2_2022_ppp.km = rescale.ppp(q2_2022_ppp, 1000, \"km\")\nq3_2022_ppp.km = rescale.ppp(q3_2022_ppp, 1000, \"km\")\nq4_2022_ppp.km = rescale.ppp(q4_2022_ppp, 1000, \"km\")\n\n# For 2023\nq1_2023_ppp.km = rescale.ppp(q1_2023_ppp, 1000, \"km\")\nq2_2023_ppp.km = rescale.ppp(q2_2023_ppp, 1000, \"km\")\nq3_2023_ppp.km = rescale.ppp(q3_2023_ppp, 1000, \"km\")\nq4_2023_ppp.km = rescale.ppp(q4_2023_ppp, 1000, \"km\")\n\n# For 2024\nq1_2024_ppp.km = rescale.ppp(q1_2024_ppp, 1000, \"km\")\nq2_2024_ppp.km = rescale.ppp(q2_2024_ppp, 1000, \"km\")\n\nIn the code chunk below, we will compute the KDE of each quarter of each year. bw.diggle method is used to derive the bandwidth of each KDE:\n\npar(mfrow = c(4, 4), mar = c(2, 2, 2, 2)) \n\n# 2021 plots\nplot(density(q1_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2021\")\n\nplot(density(q2_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2021\")\n\n\nplot(density(q3_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2021\")\n\nplot(density(q4_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2021\")\n\n\n# 2022 plots\nplot(density(q1_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2022\")\n\nplot(density(q2_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2022\")\n\n\nplot(density(q3_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2022\")\n\nplot(density(q4_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2022\")\n\n# 2023 plots\nplot(density(q1_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2023\")\n\nplot(density(q2_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2023\")\n\n\nplot(density(q3_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2023\")\n\nplot(density(q4_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2023\")\n\n# 2024 plots\nplot(density(q1_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2024\")\n\nplot(density(q2_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2024\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Take-Home Exercise 1",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(armed_clash_myn_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  armed_clash_myn_ppp.km\nR = 0.26742, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nInterpretation:\n\nThe R-value (0.37315) suggests that the points (armed clashes) are clustered—events tend to occur near each other.\nThe p-value (extremely low) provides very strong evidence against the null hypothesis of randomness. Thus, we conclude that the distribution of armed clashes is not random but instead shows a statistically significant clustered pattern.\n\n\n8.1.1 Clark and Evans Test: Q2 2021\n\nclarkevans.test(q2_2021_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2021_ppp.km\nR = 0.39527, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.2 Clark and Evans Test: Q2 2022\n\nclarkevans.test(q2_2022_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2022_ppp.km\nR = 0.41889, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.3 Clark and Evans Test: Q2 2023\n\nclarkevans.test(q2_2023_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2023_ppp.km\nR = 0.43067, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.4 Clark and Evans Test: Q2 2024\n\nclarkevans.test(q2_2024_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2024_ppp.km\nR = 0.3442, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nReasons to account for the observed pattern:\nBased on the R-value, where lower R values indicate strong clustering, it follows the reasons below:\n\nEscalation of Conflict in the hotspot Area: From 2021 onwards, the area of study has recently experience a military coup in February 2021, which was concentrated as the Tatmadaw (military) cracked down on urban areas and strategic areas. These mentioned states were areas where civilian resistance was particularly strong.\nImplication of Dispersion: This observation is further evidence by the quarterly summation of the deaths by state, where for the same quarters observed below: Q4 2021 - Q2 2022, there was a stark increase in the total_fatalities and event_count, marking the amplification of armed clash battles in the region, accounting for the strong clustering patterns observed from Q2 2021 which showed the strongest clustering out of the 4 quarters assessed and eventual distribution of the conflict towards other areas.\n\n\nquarterly_summary %&gt;% \n  arrange(desc(total_fatalities))\n\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   quarter total_fatalities event_count                                 geometry\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                         &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022             2494         504 ((-11051.37 2410853), (-10908.92 256130…\n 2 Q1 2022             1759         410 ((-13816.45 2549666), (-12383.46 255035…\n 3 Q4 2021             1674         340 ((-12383.46 2550351), (-10581.74 255763…\n 4 Q3 2022             1649         414 ((-14448.48 2310133), (-12383.46 255035…\n 5 Q4 2023             1502         432 ((-13753.92 2572123), (-10781.63 257609…\n 6 Q1 2023             1335         429 ((-9542.333 2376489), (-8200.325 237117…\n 7 Q2 2023             1291         372 ((-10160.54 2446554), (-8954.966 256734…\n 8 Q4 2022             1264         377 ((-10226.14 2411015), (-8954.966 256734…\n 9 Q3 2023              998         428 ((-10171.84 2571422), (-10106 2331539),…\n10 Q3 2021              759         179 ((-13645.89 2571086), (-9197.246 255207…\n11 Q1 2024              757         292 ((-16397.05 2576482), (-13753.92 257212…\n12 Q2 2024              726         279 ((-11281.63 2583340), (-10452.13 257881…\n13 Q2 2021              522         130 ((-13808.2 2533298), (-10226.14 2411015…\n14 Q1 2021               20           8 ((-10581.74 2557635), (-9197.246 255207…\n\n\n\nquarterly_summary_by_state &lt;- armed_clash_sf %&gt;%\n  group_by(quarter, admin1) %&gt;%  # Group by quarter\n  summarise(\n    total_fatalities = sum(FATALITIES, na.rm = TRUE), \n    event_count = n()                               \n  ) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\n`summarise()` has grouped output by 'quarter'. You can override using the\n`.groups` argument.\n\nprint(quarterly_summary_by_state)\n\nSimple feature collection with 42 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 42 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q2 2022 Magway               726         134 ((-11051.37 2410853), (-10745.5…\n10 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n# ℹ 32 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-to-owin-objects",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-to-owin-objects",
    "title": "Take-Home Exercise 1",
    "section": "9.2 Converting sf to owin objects",
    "text": "9.2 Converting sf to owin objects\n\nsagaing_owin = as.owin(sagaing)\nmagway_owin = as.owin(magway)\nmandalay_owin = as.owin(mandalay)\n\n\npar(mfrow=c(1,3))\nplot(sagaing_owin)\nplot(magway_owin)\nplot(mandalay_owin)\n\n\n\n\n\n\n\n\n\n9.2.1 Combining armed clash points and the study area\nBy using the code chunk below, we are able to extract armed clashes that is within the specific region to do our analysis later on.\n\narmed_clash_sng_ppp = armed_clash_jitter[sagaing_owin]\narmed_clash_mgy_ppp = armed_clash_jitter[magway_owin]\narmed_clash_mnd_ppp = armed_clash_jitter[mandalay_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\narmed_clash_sng.km = rescale(armed_clash_sng_ppp, 1000, \"km\")\narmed_clash_mgy.km = rescale(armed_clash_mgy_ppp, 1000, \"km\")\narmed_clash_mnd.km = rescale(armed_clash_mnd_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these 3 study areas and the locations of the battles (armed clashes).\n\npar(mfrow=c(1,3))\nplot(armed_clash_sng.km, main=\"Sagaing\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mgy.km, main=\"Magway\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mnd.km, main=\"Mandalay\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "9.6 Analysing Spatial Point Process Using G-Function",
    "text": "9.6 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I compute the G-function estimation by using Gest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n9.6.1 Computing G-function estimation\n\nG_SNG = Gest(armed_clash_sng_ppp, correction = \"best\")\nplot(G_SNG)\n\n\n\n\n\n\n\n\n\n\n9.6.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_SNG.csr)\n\n\n\n\n\n\n\n\n\n\n9.7 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.In this section, I compute the F-function estimation by using Fest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n\n9.7.1 Computing F-function estimation\n\nF_SNG = Fest(armed_clash_sng_ppp, correction=\"best\")\nplot(F_SNG)\n\n\n\n\n\n\n\n\n\n\n9.7.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Fest, correction = \"all\", nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(F_SNG.csr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Exercise 1",
    "section": "9.8 Analysing Spatial Point Process Using K-Function",
    "text": "9.8 Analysing Spatial Point Process Using K-Function\n\n9.8.1 Computing K-function estimation\n\n#K_SNG = Kest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(K_SNG, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with K-fucntion\n\n#K_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Kest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(K_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Exercise 1",
    "section": "9.9 Analysing Spatial Point Process Using L-Function",
    "text": "9.9 Analysing Spatial Point Process Using L-Function\n\n9.9.1 Computing L-function estimation\n\n#L_SNG = Lest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(L_SNG, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with L-fucntion\n\n#L_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Lest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(L_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:",
    "text": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:\n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \ntm_shape(armed_clash_sagaing) + \n  tm_dots(size = 0.1, alpha = 0.5) + \ntm_facets(by=\"quarter\", \n          free.coords=FALSE,\n          drop.units = TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "title": "Take-Home Exercise 1",
    "section": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground",
    "text": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground\nAlong with the quarterly visualization of the armed clashes, we see a corresponding fixation of attacks on the Southern point of the Sagaing, near the border of two other states in conflict (Madway and Mandalay). According to the article by Think Global Health:\n\nAttacks on Health Care in Myanmar, 2021 – 2023\nMyanmar’s health system is under attack countrywide, with the greatest number of attacks taking place in the Sagaing, Mandalay, and Yangon regions.\nAccording to Insecurity Insight, a nonprofit group collecting data on conflicts worldwide, nearly 1,200 attacks on health-care workers and facilities have taken place in the three years since the coup. Doctors, aid workers, and other medical personnel have been detained and arrested, targeted for allegedly taking care of protestors or participating in the civil disobedience movement (CDM).  \n\n\nquarterly_summary_sagaing &lt;- quarterly_summary_by_state %&gt;% \n  filter(admin1 == \"Sagaing\")\nquarterly_summary_sagaing  \n\nSimple feature collection with 14 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n * &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n10 Q3 2021 Sagaing              521         130 ((-13645.89 2571086), (-9197.24…\n11 Q1 2024 Sagaing              451         190 ((-16397.05 2576482), (-13753.9…\n12 Q2 2021 Sagaing              387          90 ((-13808.2 2533298), (-9514.18 …\n13 Q2 2024 Sagaing              348         133 ((-11281.63 2583340), (-10452.1…\n14 Q1 2021 Sagaing               13           4 ((-10581.74 2557635), (-9197.24…\n\n\nCoincidentally (or not), the quarters with the higest number of recorded fatalities fall between Q4 2021 - Q3 2022, where we will focus the computation of STKDE\n\narmed_clash_sagaing\n\nSimple feature collection with 2903 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10 Q1 2022 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#computing-stkde-by-day-of-year",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#computing-stkde-by-day-of-year",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Day of Year",
    "text": "10.2 Computing STKDE by Day of Year\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;% \n  filter(admin1 == \"Sagaing\") %&gt;% \n  filter(quarter %in% c(\"Q4 2021\", \"Q1 2022\", \"Q2 2022\", \"Q3 2022\")) %&gt;% \n  mutate(dayYear = yday(event_date)) %&gt;% \n  mutate(monthNum = month(event_date)) %&gt;% \n  mutate(monthFac = month(event_date,\n                          label=TRUE,\n                          abbr=FALSE))\narmed_clash_year_sf\n\nSimple feature collection with 1119 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2863190\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,119 × 11\n   quarter event_type sub_event_type admin1           geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;         &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-02-01\n 2 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-03-24\n 3 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-15\n 4 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-23\n 5 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-03-18\n 6 Q1 2022 Battles    Armed clash    Sagai…    (95831 2496973) 2022-01-11\n 7 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-01-24\n 8 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-02-04\n 9 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-01-12\n10 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-02-05\n# ℹ 1,109 more rows\n# ℹ 5 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, dayYear &lt;dbl&gt;,\n#   monthNum &lt;dbl&gt;, monthFac &lt;ord&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\narmed_clash_yday_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(dayYear) %&gt;% \n  as.ppp()\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_yday_owin &lt;- armed_clash_yday_ppp[sagaing_owin]\nsummary(sagaing_yday_owin)\n\nMarked planar point pattern:  1119 points\nAverage intensity 1.192011e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    91.0   172.0   176.3   260.5   365.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_yday_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp(sagaing_yday_owin)\n\nInitialising...Done.\nOptimising...\nh = 26068.43 \b; lambda = 29.14375 \nh = 28675.27 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 2635.987 \nh = 26720.14 \b; lambda = 1332.565 \nh = 27371.85 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 1332.565 \nh = 26394.29 \b; lambda = 680.8545 \nh = 26557.21 \b; lambda = 354.9991 \nh = 26638.68 \b; lambda = 192.0715 \nh = 26679.41 \b; lambda = 110.6076 \nh = 26699.78 \b; lambda = 69.87568 \nDone.\n\n\n          h      lambda \n26699.77626    69.87568 \n\n\n\nkde_yday &lt;- spattemp.density(sagaing_yday_owin,\n                             h=26699.77626,\n                             lambda=69.87568)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 26699.78 (spatial)\n  lambda = 69.8757 (temporal)\n\nNo. of observations\n  1119 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 365]\n\nEvaluation\n  128 x 128 x 365 trivariate lattice\n  Density range: [1.553021e-30, 1.912896e-13]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:365\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#saving-intermediate-datasets",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#saving-intermediate-datasets",
    "title": "Take-Home Exercise 1",
    "section": "10.3 Saving Intermediate Datasets:",
    "text": "10.3 Saving Intermediate Datasets:\n\nwrite_rds(healthcare_sng, \"data/rds/healthcare_sng.rds\")\nwrite_rds(quarterly_summary, \"data/rds/quarterly_summary.rds\")\nwrite_rds(quarterly_summary_by_state, \"data/rds/quarterly_summary_by_state.rds\")\nwrite_rds(state3_sf, \"data/rds/state3_sf.rds\")\nwrite_rds(event_density_data, \"data/rds/event_density_data.rds.rds\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#key-findings",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#key-findings",
    "title": "Take-Home Exercise 1",
    "section": "Key Findings:",
    "text": "Key Findings:\n\nClustering of Armed Clashes:\n\nWithin Q4 2021 to Q2 2022, with R-values indicating a highly clustered distribution of conflict events. This clustering is particularly evident in Sagaing, Mandalay, and Magway, where much of the conflict was concentrated.\nThe clustering can be attributed to the ongoing civil resistance following the military coup in Myanmar in 2021, with Sagaing experiencing heavily intense conflicts. This has prompted me to research further, finding that: \n\nThe area is prone to natural disasters, being located at the ‘Sagaing fault’ and is already a natural hotspot for refugee / displaced individuals due to the socio-economic plight it has faced, as part of the ‘Dry Zone’ \nMilitary Conscription drives has ‘provoked reverse migration, pushing young men who fled Myanmar’s war-torn Dry Zone to give up their livellihoods and risk their lives to return home’ \n\n\nKernel Density Estimation:\n\nKDE analysis allowed us to visualize the intensity of conflict over time. Using fixed bandwidth (e.g., bw.ppl()), we observed that while the intensity of conflict was concentrated in certain regions, particularly in Sagaing, there was a gradual dispersion of conflict events over time into neighboring regions such as Magway and Mandalay.\nThe choice of bandwidth (sigma) and kernel function was important for interpreting both local and broader trends in armed clashes. The Gaussian kernel was effective in showing overall trends, while smaller sigmas captured finer details, especially in high-density areas. Initially, I actually went with bw.diggle instead of bw.ppl bandwidth as I thought bw.diggle() is always the best choice for detecting clusters, and bw.ppl is better for smoothing over broader areas. However, this interpretation may be overly simplistic. \n\nGoing by bw.diggle, I obtained a really small sigma value which might have been a sign of overfitting. Furthermore, because of the plotting and the movement of the conflict over time, we ought to expect multiple clsuter, which implied bw.ppl was a better fit. \n\n\nSpatio-temporal KDE:\n\nThe STKDE provided a nuanced view of how conflict events evolved quarter by quarter, confirming that some periods saw a stark increase in fatalities, such as Q4 2021 through Q2 2022.\nThe temporal analysis highlighted the cyclical nature of the conflict, with periods of intense violence followed by temporary dispersions or shifts in conflict zones.\n\n2nd-Order Spatial Point Pattern Analysis:\n\nThe use of G-, F-, K-, and L-functions provided further confirmation of the non-random distribution of armed clashes. These functions indicated significant spatial interaction among the conflict points, suggesting that the locations of armed clashes were influenced by proximity to other events, reflecting the complex nature of the conflict. 2nd Point Pattern Analysis allowed me to research further on the conflicting factors that affected (random) spatial distribution of armed conflict, and found the unfortunate but deliberate choice to target civilian institutions like hospitals.\n\nHealthcare as a Battleground:\n\nBy overlaying points of interest (POI) such as hospitals and healthcare facilities onto the map, we observed that many clashes occurred near key civilian infrastructure. This aligns with findings that healthcare has become a battleground in Myanmar, particularly in Sagaing and surrounding regions. Attacks on healthcare facilities have not only disrupted medical services but also contributed to the broader humanitarian crisis in the region."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#objectives",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#objectives",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#packages-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#packages-used",
    "title": "Take-Home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\nThe table below provides a summary of the packages I’ve used for this exercise\n\nThe code chunk below installs and launches the R packages,\n\n\ntidyverse\nfor performing data science tasks such as importing, wrangling and visualising data.\nIt contains the following packages used :\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\n\nsf\npackage provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n\ntmap\nwhich provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\nspatstat\nhas functions useful for Point Pattern Analysis\n\n\nraster\nreads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)\n\n\nspNetwork\nwhich provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n\nsp\n\n\n\ndplyr\n\n\n\nsparr\nprovides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n\nanimation\n\n\n\n\n\npacman::p_load(tidyverse, sf, sp, tmap, spatstat, raster, spNetwork, RColorBrewer,dplyr, sparr,animation, magick)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#datasets-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#datasets-used",
    "title": "Take-Home Exercise 1",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nIn response to the background context of the armed conflict happening in Myanmar, the exercise aims to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\nUpon further research, I’ve managed to come across an interesting resource which maps out the Warscapes in Myanmar. It illustrates the variations in the type of conflict inflicted in different zones of the country\n\nAspatial Data\n\nMYNMAR.CSV dataset derived from Armed Conflict Location & Event Data Project (ACLED), a non-profit organization collecting, analyzing and mapping data on political violence and protest events around the world. (Limited to Jan 2021 - June 2024)\n\n\n\nGeospatial\nThe following datasets were obtained from: https://data.humdata.org/organization/mimu\n\nMyanmar Country Boundaries MIMU\nMyanmar State_Region Boundaries MIMU\nPoints of Interest from OpenStreetMap, depicting different categories of features mapped by the OSM community. It depicts various categories such as : public services and infrastructure, emergency and safety locations, amenities etc.\n\nThis additional dataset from OpenStreetMap is crucial for analyzing armed conflict in Myanmar as it provides detailed geographic information on key locations such as public services, infrastructure, and emergency and safety sites. Understanding the distribution of these points of interest helps in assessing the impact of conflict on civilian infrastructure, access to essential services, and the safety of affected populations. Furthermore, it may aid in planning humanitarian assistance, evacuation routes, and monitoring areas of strategic importance during the conflict through data insights.\nFor the purposes of this exercise, we will focus on the State/Region boundaries, seeing as the conflict is generally explored in this manner (as inferred from the given references in the Take Home Exercise Overview). This is represented by the first administrative level (admin1). Myanmar is divided into 7 states and 7 regions (plus the Union Territory of Naypyidaw).\nThese boundaries are politically and administratively significant. Different states (e.g., Kachin, Rakhine, Shan) and regions have distinct ethnic compositions and different conflict dynamics, making this level critical for understanding broader conflict patterns."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#importing-spatial-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#importing-spatial-data",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Importing Spatial Data",
    "text": "3.1 Importing Spatial Data\n\n1. Myanmar CSV\nUsing read_csv to import the data in the MYANMAR.CSV file, which is the ACLED Dataset detailing armed conflict in Myanmar:\n\narmed_conflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck and transform the CRS of the ACLED Dataset:\n\ncolnames(armed_conflict_data)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\n\n\narmed_conflict &lt;- st_as_sf(armed_conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;% \n  st_transform(armed_conflict, crs=32647)\n\n\n\n2. Country, State, Region, District Boundaries\nUsing the st_read function, we will import data from the State & Region Sub-boundary dataset to visualize Myanmar’s landscape. We will focus our analysis on the State_Region Level (Admin1)\n\nstate_region_sf &lt;-  st_read(dsn=\"data/geospatial/stateRegion\", layer \n=\"mmr_polbnda_adm1_250k_mimu_1\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/stateRegion' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\ndistrict_sf &lt;- st_read(dsn=\"data/geospatial/district\", layer \n=\"mmr_polbnda_adm2_250k_mimu\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/district' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nAfter importing the dataset, we will plot to see the boundaries of the State & Regions of Myanmar. The plot() function is used to plot the geometry of the sf object. The st_geometry() function is used to extract the geometry of the state_region_sf object.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_polygons() + \n  tm_text(\"ST\", size =0.9, just=\"center\")\n\n\n\n\n\n\n\ntm_layout(frame=FALSE)\n\n$tm_layout\n$tm_layout$frame\n[1] FALSE\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\n\n3. Points of Interest\nFrom here on out, we will denote points-of-interest as POI.\nI will load the corresponding shapefile:\n\npoi_sf &lt;- st_read(dsn = \"data/geospatial/pointsOfInterest\", layer = \"hotosm_mmr_points_of_interest_points_shp\") %&gt;%\n  st_set_crs(4326) %&gt;%  \n  st_transform(crs = 32647)  \n\nReading layer `hotosm_mmr_points_of_interest_points_shp' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/pointsOfInterest' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56187 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 92.15357 ymin: 9.756896 xmax: 101.1515 ymax: 28.36754\nCRS:           NA\n\n\n\nst_crs(poi_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\ncolnames(poi_sf)\n\n [1] \"name\"       \"name_en\"    \"amenity\"    \"man_made\"   \"shop\"      \n [6] \"tourism\"    \"opening_ho\" \"beds\"       \"rooms\"      \"addr_full\" \n[11] \"addr_house\" \"addr_stree\" \"addr_city\"  \"source\"     \"name_my\"   \n[16] \"osm_id\"     \"osm_type\"   \"geometry\"  \n\n\nBased on the unique amenities, those that would be relevant in analyzing armed conflict effects in Myanmar would be : “hospital” , “refugee_site”, “Health centre” , “clinic”:\n\npoi_sf &lt;- poi_sf %&gt;% \n  mutate(amenity = str_to_lower(amenity)) %&gt;% \n  filter(amenity %in% c(\"refugee_site\", \"hospital\", \"health center\")) %&gt;% \n  dplyr::select(name_en, amenity, geometry)\n\npoi_sf\n\nSimple feature collection with 617 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -211935.1 ymin: 1103190 xmax: 697952 ymax: 3026108\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                         name_en  amenity                 geometry\n1                           &lt;NA&gt; hospital POINT (439165.5 1562018)\n2       Kalar Chaunggyi Hospital hospital POINT (262988.5 1908198)\n3                  militry O.P.T hospital POINT (238995.6 2440150)\n4           Myint Mo Oo Hospital hospital POINT (414147.5 1556093)\n5             Chan Myae Hospital hospital POINT (412546.6 1555811)\n6              Mediland Hospital hospital POINT (412151.4 1557561)\n7  Traditional Medicine Hospital hospital POINT (411729.3 1557083)\n8                           &lt;NA&gt; hospital POINT (458901.2 1144896)\n9              Kra Buri Hospital hospital POINT (475772.4 1149467)\n10        Dawei General Hospital hospital POINT (413966.3 1556630)\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) +\n  tm_polygons(alpha=0.5) + \n  tm_shape(poi_sf) +\n  tm_dots(col = \"amenity\", palette = \"Set1\",\n          title=\"Amenity Type\") +\n  tm_layout(main.title = \"Distribution of Healthcare Infrastructure & Amenities\", \n            main.title.position = c(\"center\", \"top\")\n  ) + \n  tm_layout(legend.outside=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#data-preparation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nBefore a thematic map can be prepared, we have to prepare a data table which includes the variables event types, focused on : Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nstr(armed_conflict)\n\nsf [42,608 × 30] (S3: sf/tbl_df/tbl/data.frame)\n $ event_id_cnty     : chr [1:42608] \"MMR64313\" \"MMR64320\" \"MMR64321\" \"MMR64322\" ...\n $ event_date        : chr [1:42608] \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" ...\n $ year              : num [1:42608] 2024 2024 2024 2024 2024 ...\n $ time_precision    : num [1:42608] 1 1 1 1 1 1 1 1 1 1 ...\n $ disorder_type     : chr [1:42608] \"Political violence\" \"Political violence\" \"Political violence\" \"Strategic developments\" ...\n $ event_type        : chr [1:42608] \"Battles\" \"Battles\" \"Battles\" \"Strategic developments\" ...\n $ sub_event_type    : chr [1:42608] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Change to group/activity\" ...\n $ actor1            : chr [1:42608] \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"Military Forces of Myanmar (2021-)\" ...\n $ assoc_actor_1     : chr [1:42608] \"MDA - AGF: Madaya - The Authentic Genes Force; SSTF: Security & Special Task Force CDM People's Police\" NA NA NA ...\n $ inter1            : num [1:42608] 3 3 3 1 3 1 1 2 1 1 ...\n $ actor2            : chr [1:42608] \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" NA ...\n $ assoc_actor_2     : chr [1:42608] NA NA NA NA ...\n $ inter2            : num [1:42608] 1 1 1 0 1 0 2 1 2 2 ...\n $ interaction       : num [1:42608] 13 13 13 10 13 10 12 12 12 12 ...\n $ civilian_targeting: chr [1:42608] NA NA NA NA ...\n $ iso               : num [1:42608] 104 104 104 104 104 104 104 104 104 104 ...\n $ region            : chr [1:42608] \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" ...\n $ country           : chr [1:42608] \"Myanmar\" \"Myanmar\" \"Myanmar\" \"Myanmar\" ...\n $ admin1            : chr [1:42608] \"Mandalay\" \"Mandalay\" \"Mandalay\" \"Sagaing\" ...\n $ admin2            : chr [1:42608] \"Mandalay\" \"Pyinoolwin\" \"Pyinoolwin\" \"Shwebo\" ...\n $ admin3            : chr [1:42608] \"Patheingyi\" \"Singu\" \"Thabeikkyin\" \"Khin-U\" ...\n $ location          : chr [1:42608] \"Aung Tha Pyay\" \"Pin Lel Gyi\" \"Thabeikkyin\" \"Khin-U\" ...\n $ geo_precision     : num [1:42608] 2 1 2 2 2 2 1 1 2 1 ...\n $ source            : chr [1:42608] \"Democratic Voice of Burma; Irrawaddy\" \"Irrawaddy\" \"Irrawaddy\" \"Democratic Voice of Burma; Khit Thit Media\" ...\n $ source_scale      : chr [1:42608] \"National\" \"National\" \"National\" \"Subnational-National\" ...\n $ notes             : chr [1:42608] \"On 30 June 2024, near Aung Tha Pyay village (Patheingyi township, Mandalay district, Mandalay region), a combin\"| __truncated__ \"On 30 June 2024, in Pin Lel Gyi village (Singu township, Pyinoolwin district, Mandalay region), the People's De\"| __truncated__ \"On 30 June 2024, in Thabeikkyin township (Pyinoolwin district, Mandalay region), the People's Defense Force - M\"| __truncated__ \"Change to armed group: On 30 June 2024, in Khin-U town (Khin-U township, Shwebo district, Sagaing region), a mi\"| __truncated__ ...\n $ fatalities        : num [1:42608] 0 0 0 0 0 0 0 2 0 0 ...\n $ tags              : chr [1:42608] NA NA NA NA ...\n $ timestamp         : num [1:42608] 1.72e+09 1.72e+09 1.72e+09 1.72e+09 1.72e+09 ...\n $ geometry          :sfc_POINT of length 42608; first list element:  'XY' num [1:2] 214961 2452068\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"event_id_cnty\" \"event_date\" \"year\" \"time_precision\" ...\n\n\nHere is a visual overview of the 4 different types of Armed Conflict (based on event_types) :\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_borders(col = \"black\") + \n  tm_shape(armed_conflict) + \n  tm_dots(col = \"event_type\", palette = \"Set1\", size = 0.01, alpha = 0.5) +\n  tm_facets(by = \"event_type\") + \n  tm_layout(title = \"Armed Conflict in Myanmar (Jan 2021 - Jun 2024)\", \n            legend.outside = TRUE) +\n  tm_legend(title = \"Event Type\")\n\n\n\n\n\n\n\n\nFrom the plots above, we see that armed conflict even types seem to concentrate in the North-west region, particularly at the boundary of Sagaing, Mandalay and Magwe state, which we will zoom in on.\nIn order to group and have a sensing of the effects of armed conflict, we will aggregate based on fatalities to see a quick overview as well as their state (administrative boundary 1) :\n\narmed_conflict_fatalities &lt;- armed_conflict %&gt;% \n  group_by(admin1, event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Summarize fatalities based on the administrative boundary (stateRegion)\n  group_by(admin1) %&gt;% \n  mutate(total_fatalities_admin1 = sum(total_fatalities)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Arrange admin1 by descending order of fatalities and then the event type \n  arrange(desc(total_fatalities_admin1), admin1, desc(total_fatalities)) \n\n`summarise()` has grouped output by 'admin1'. You can override using the\n`.groups` argument.\n\narmed_conflict_fatalities\n\nSimple feature collection with 72 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 72 × 5\n   admin1   event_type                total_fatalities                  geometry\n   &lt;chr&gt;    &lt;chr&gt;                                &lt;dbl&gt;          &lt;MULTIPOINT [m]&gt;\n 1 Sagaing  Battles                              11225 ((-16397.05 2576482), (-…\n 2 Sagaing  Explosions/Remote violen…             5161 ((-13753.92 2572123), (-…\n 3 Sagaing  Violence against civilia…             2513 ((-13808.2 2533298), (-1…\n 4 Sagaing  Strategic developments                  40 ((-16397.05 2576482), (-…\n 5 Magway   Battles                               3910 ((-14448.48 2310133), (-…\n 6 Magway   Explosions/Remote violen…             1701 ((-11811.97 2503484), (-…\n 7 Magway   Violence against civilia…              544 ((-9822.857 2409014), (-…\n 8 Magway   Strategic developments                  17 ((-11256.98 2417070), (-…\n 9 Mandalay Battles                               1658 ((69197.66 2321843), (84…\n10 Mandalay Explosions/Remote violen…             1051 ((75228.96 2349261), (96…\n# ℹ 62 more rows\n# ℹ 1 more variable: total_fatalities_admin1 &lt;dbl&gt;\n\n\nBased on the above result, we see that the fatalities are concentrated in are concentrated in these 3 states: Sagaing, Magway and Mandalay.\nThe code chunk below explores the data further:\n\narmed_conflict_fatalities_by_event_type &lt;- armed_conflict %&gt;% \n  group_by(event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\narmed_conflict_fatalities_by_event_type\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 4\n  event_type              total_fatalities event_count                  geometry\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;int&gt;          &lt;MULTIPOINT [m]&gt;\n1 Battles                            35924       12049 ((-207135 2358896), (-20…\n2 Explosions/Remote viol…            11562       12208 ((-208804.4 2357274), (-…\n3 Violence against civil…             6478        6225 ((-206931.7 2359490), (-…\n4 Strategic developments               127       12126 ((-206931.7 2359490), (-…\n\n\nBefore doing so, let’s explore the nuances in the naming convention to understand a potential reason why conflict arises:\n\narea_names &lt;- state_region_sf %&gt;% \n  distinct(ST_RG) %&gt;% \n  pull(ST_RG)\n\narea_names\n\n[1] \"Region\"          \"State\"           \"Union Territory\"\n\n\n\nKey Differences\n\nState:\n\nRepresents areas predominantly inhabited by ethnic minorities, each with their own cultural and historical significance.\nOften involved in ethnic conflicts, seeking more autonomy.\n\nRegion:\n\nRepresents the Bamar-majority areas, which have more economic and political power.\nTypically less conflict-prone compared to states.\n\nUnion Territory:\n\nA special administrative area directly controlled by the central government (e.g., the capital region).\nNo local parliament or legislative autonomy."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#subsetting-the-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#subsetting-the-data",
    "title": "Take-Home Exercise 1",
    "section": "3.3 Subsetting the data:",
    "text": "3.3 Subsetting the data:\n\n3.3.1 Data Processing of subsetted dataset - MYANMAR.CSV\nWe’ll now process the data to see the corresponding fatalities with the different event types mentioned above, Battles, Explosions/Remote violence, Strategic developments and Violence against civilians.\nFrom this point forward, we will focus on the event_type of ‘Battles’ and sub_event_type of ‘Armed Clash’ as it would be interesting to analyse given that it has the most event counts and fatalities as aggregated in the code above:\n\nSince we are interested in deriving the quarterly KDE layers, we will convert the event_date column (currently in [chr] format), into a Date object that can be used for further analysis.\n\n\narmed_conflict_sf &lt;- armed_conflict %&gt;%\n  filter(event_type == \"Battles\") %&gt;% \n  filter(admin1 %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  dplyr::select(1:3, 5:8, 11, 15, 19, 20, 27, 29, 30)\n\nSave the intermediate dataset to rds:\n\nwrite_rds(armed_conflict_sf, \"data/rds/armed_conflict_sf.rds\")\n\nWe change the CRS to 32647 given that it is in the North Western Zone of Myanmar:\n\narmed_conflict_sf &lt;- read_rds(\"data/rds/armed_conflict_sf.rds\") %&gt;% \n  st_transform(crs = 32647) \n\n\nhead(armed_conflict_sf)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 146213 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 14\n  event_id_cnty event_date   year disorder_type event_type sub_event_type actor1\n  &lt;chr&gt;         &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n1 MMR64313      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n2 MMR64320      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n3 MMR64321      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n4 MMR64323      30 June 20…  2024 Political vi… Battles    Armed clash    PKDF …\n5 MMR64314      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n6 MMR64319      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n# ℹ 7 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\narmed_conflict_sf &lt;- armed_conflict_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) %&gt;% \n  mutate(quarter = paste0(\"Q\", quarter(event_date), \" \", year(event_date)))\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_conflict_battles &lt;- armed_conflict_sf %&gt;% \n  group_by(event_type, sub_event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n    filter(event_type == \"Battles\") %&gt;% \n    ungroup() \n\n`summarise()` has grouped output by 'event_type'. You can override using the\n`.groups` argument.\n\narmed_conflict_battles\n\nSimple feature collection with 3 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 5\n  event_type sub_event_type                      total_fatalities event_count\n  &lt;chr&gt;      &lt;chr&gt;                                          &lt;dbl&gt;       &lt;int&gt;\n1 Battles    Armed clash                                    16750        4681\n2 Battles    Government regains territory                       0           1\n3 Battles    Non-state actor overtakes territory               43          15\n# ℹ 1 more variable: geometry &lt;GEOMETRY [m]&gt;\n\n\n\ntotal_deaths &lt;- armed_conflict %&gt;% summarize(total_fatalities = sum(fatalities, na.rm=TRUE),\n            event_count = n())\n\ntotal_deaths\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 3\n  total_fatalities event_count                                          geometry\n             &lt;dbl&gt;       &lt;int&gt;                                  &lt;MULTIPOINT [m]&gt;\n1            54091       42608 ((-208804.4 2357274), (-207135 2358896), (-20693…\n\n\nOut of 54091 deaths for the whole of Myanmar for Jan 2021 - Jun 2024, encompassing all event_types and sub_event_types recorded, deaths from event_type == “Battles” , specifically the sub_event_type of “Armed clash” has lead to 34581 deaths in the states of Myanmar alone, accounting for ~63.9% of deaths.\n\n\n3.3.1 Data Processing of subsetted dataset - State_Region_sf\n\nstate3_sf &lt;- state_region_sf %&gt;% \n  filter(ST %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  st_transform(crs = 32647)\n\nstate3_sf\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -37628.21 ymin: 2086865 xmax: 308341.4 ymax: 3029739\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID       ST ST_PCODE  ST_RG          ST_MMR PCode_V\n1        8   Magway   MMR009 Region   မကွေးတိုင်းဒေသကြီး     9.4\n2        9 Mandalay   MMR010 Region မန္တလေးတိုင်းဒေသကြီး     9.4\n3       13  Sagaing   MMR005 Region  စစ်ကိုင်းတိုင်းဒေသကြီး     9.4\n                        geometry\n1 MULTIPOLYGON (((-1717.607 2...\n2 MULTIPOLYGON (((208184.3 26...\n3 MULTIPOLYGON (((275295.6 30...\n\n\n\nplot(state3_sf)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "title": "Take-Home Exercise 1",
    "section": "3.4 Filtering down to Battles, Armed Clash",
    "text": "3.4 Filtering down to Battles, Armed Clash\n\n3.4.1 Analyzing Densities based on fatalities and event_count\nCalculating area of each state in km^2:\n\nstate3_sf &lt;- state3_sf %&gt;% \n  mutate(area_km2 = st_area(geometry) / 1e6)\n\nDensity for Fatalities & Event_count in the area:\n\nevent_density_data &lt;- armed_conflict_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    total_events = n(),               \n    total_fatalities = sum(fatalities, na.rm = TRUE)  \n  ) %&gt;% \n  ungroup()\n\nMerge the event data with the state-level area data\n\nevent_density_data\n\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 4\n  admin1   total_events total_fatalities                                geometry\n  &lt;chr&gt;           &lt;int&gt;            &lt;dbl&gt;                        &lt;MULTIPOINT [m]&gt;\n1 Magway           1115             3910 ((-14448.48 2310133), (-11778.42 23314…\n2 Mandalay          602             1658 ((69197.66 2321843), (84966.22 2353705…\n3 Sagaing          2980            11225 ((-16397.05 2576482), (-13816.45 25496…\n\n\n\nevent_density_data &lt;- state3_sf %&gt;%\n  st_join(event_density_data, by = \"admin1\")\n\n\ncolnames(event_density_data)\n\n [1] \"OBJECTID\"         \"ST\"               \"ST_PCODE\"         \"ST_RG\"           \n [5] \"ST_MMR\"           \"PCode_V\"          \"area_km2\"         \"admin1\"          \n [9] \"total_events\"     \"total_fatalities\" \"geometry\"        \n\n\n\nevent_density_data &lt;- event_density_data %&gt;%\n  mutate(\n    event_density = total_events / area_km2,         \n    fatality_density = total_fatalities / area_km2    \n  )\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Plot event density\ntm_shape(event_density_data) +\n  tm_polygons(\"event_density\", title = \"Event Density (Events/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n# Plot fatality density\ntm_shape(event_density_data) +\n  tm_polygons(\"fatality_density\", title = \"Fatality Density (Fatalities/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.1 Subsetting the data:\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_clash_sf &lt;- armed_conflict_sf %&gt;% \n  filter(event_type == \"Battles\", sub_event_type ==\"Armed clash\") %&gt;% \n  group_by(quarter, event_type, sub_event_type, admin1, geometry, event_date) %&gt;% \n  summarize(\n      `FATALITIES` = sum(fatalities, na.rm=TRUE), \n      event_count = n()\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'quarter', 'event_type', 'sub_event_type',\n'admin1', 'geometry'. You can override using the `.groups` argument.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "title": "Take-Home Exercise 1",
    "section": "3.5 Converting sf Object to sp Object",
    "text": "3.5 Converting sf Object to sp Object\n\narmed_clash_sp &lt;- as(armed_clash_sf, \"Spatial\")\nstate3_sp &lt;- as(state3_sf, \"Spatial\")\n\n\ncolnames(armed_clash_sf)\n\n[1] \"quarter\"        \"event_type\"     \"sub_event_type\" \"admin1\"        \n[5] \"geometry\"       \"event_date\"     \"FATALITIES\"     \"event_count\"   \n\n\n\nunique_coordinates &lt;- armed_clash_sf %&gt;%\n  summarise(unique_count = n_distinct(geometry))  # Directly on geometry column\n\n# For total event count\ntotal_armed_clash_count &lt;- armed_clash_sf %&gt;% \n  summarise(event_count = sum(event_count, na.rm = TRUE))\n\n# Print results\nprint(unique_coordinates)\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  unique_count                                                          geometry\n         &lt;int&gt;                                                  &lt;MULTIPOINT [m]&gt;\n1         1547 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), …\n\nprint(total_armed_clash_count)  \n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  event_count                                                           geometry\n        &lt;int&gt;                                                   &lt;MULTIPOINT [m]&gt;\n1        4681 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), (…\n\n\nOut of 4681 Armed Clash conflict events, only 1547 unique coordinate points are recorded, indicating the that armed clashes occurred more than once for the coordinate points in general."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "3.6 Converting sp Object to spatstat’s ppp Format",
    "text": "3.6 Converting sp Object to spatstat’s ppp Format\n\nglimpse(armed_clash_sp)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 4594 obs. of  7 variables:\n  .. ..$ quarter       : chr [1:4594] \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" ...\n  .. ..$ event_type    : chr [1:4594] \"Battles\" \"Battles\" \"Battles\" \"Battles\" ...\n  .. ..$ sub_event_type: chr [1:4594] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Armed clash\" ...\n  .. ..$ admin1        : chr [1:4594] \"Magway\" \"Magway\" \"Magway\" \"Mandalay\" ...\n  .. ..$ event_date    : Date[1:4594], format: \"2021-03-30\" \"2021-03-31\" ...\n  .. ..$ FATALITIES    : num [1:4594] 1 1 4 1 2 4 6 1 2 5 ...\n  .. ..$ event_count   : int [1:4594] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:4594, 1:2] -4389 -4389 -6592 97374 101220 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -16397 2108023 255317 2987342\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\narmed_clash_ppp &lt;- as.ppp(armed_clash_sf)\n\nWarning in as.ppp.sf(armed_clash_sf): only first attribute column is used for\nmarks\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\nplot(armed_clash_ppp)\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#handling-duplicated-points",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#handling-duplicated-points",
    "title": "Take-Home Exercise 1",
    "section": "3.7 Handling Duplicated Points",
    "text": "3.7 Handling Duplicated Points\nWe check for duplication in the ppp object using the code chunk below. Before processing, we need to account for the fact that we have divided the data into quarters, which would result in the event_types at the same location being treated as separate points, but spatstat recognizing them as duplicates as they share the exact same coordinates.\n\nany(duplicated(armed_clash_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(armed_clash_ppp) &gt; 1)\n\n[1] 2503\n\n\nTo account for the number of locations which have more than one point event, we can use the code chunk below:\n\ncoords &lt;- st_coordinates(armed_clash_sf)\ncoords_df &lt;- as.data.frame(coords)\n\nlocation_counts &lt;- coords_df %&gt;% \n  group_by(X,Y) %&gt;% \n  summarize(count = n()) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'X'. You can override using the `.groups`\nargument.\n\nlocations_with_multiple_events &lt;- location_counts %&gt;% \n  filter(count &gt; 1)\n\ncount_locations_with_multiple_events &lt;- nrow(locations_with_multiple_events)\ncount_locations_with_multiple_events\n\n[1] 607\n\n\nOut of 1547 unique coordinate points, 515 have more than one conflict events occuring throughout the time period of Jan 2021 - Jun 2024, which could account for the 2503 duplicate count above.\n\ntmap_mode('view')\n\ntm_shape(armed_clash_sf) + \n  tm_dots(alpha = 0.7, size = 0.01)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "title": "Take-Home Exercise 1",
    "section": "3.8 Spotting Duplicate points from the map shown",
    "text": "3.8 Spotting Duplicate points from the map shown\nTo address the duplicate points, which largely arises due to the temporal aspect of the data we will use Jittering (adding a small perturbation to the duplicate points so that they do not occupy the exact same space)\nThe code chunk below implements the jittering approach.\n\narmed_clash_jitter &lt;- rjitter(armed_clash_ppp, \n                                 retry=TRUE, \n                                 nsim=1, \n                                 drop=TRUE)\n\nCheck for duplicated points in the data:\n\nany(duplicated(armed_clash_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Combining point events object and owin object",
    "text": "4.1 Combining point events object and owin object\nIn the next step of geospatial data wrangling, we extract armed conflict (armed clash as a subset of Battles) events located within Myanmar using this code chunk:\n\narmed_clash_myn_ppp &lt;- armed_clash_ppp[states3_owin]\n\nThe output combined both the point and polygon feature in one ppp object class as shown below:\n\nplot(armed_clash_myn_ppp, cex = 0.4, main=\"Spatial Distribution of Battles (Armed Clash) in Myanmar\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(armed_clash_myn_ppp)\n\nMarked planar point pattern:  4594 points\nAverage intensity 2.703969e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     4594 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 10179 vertices\nenclosing rectangle: [-37628.21, 308341.37] x [2086865.1, 3029739.1] units\n                     (346000 x 942900 units)\nWindow area = 1.69898e+11 square units\nFraction of frame area: 0.521"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#kernel-density-estimation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nThis section with perform first-order SPPA and focus on :\n\nDeriving KDE for visualizing and exploring the intensity of point processes\nPerform Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour Statistics\n\n\n5.1.1 Computing KDE using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n\nkde_armed_clash_myn_bw &lt;- density(armed_clash_myn_ppp, \n                                     sigma=bw.diggle, \n                                     edge=TRUE,\n                                     kernel=\"gaussian\")\n\n\nplot(kde_armed_clash_myn_bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp)\nsigma_diggle\n\n   sigma \n84.63052 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, we need to rescale.ppp() unit from meter to kilometer to prevent interference in the scale as well as the distortion of the bandwith values:\n\narmed_clash_myn_ppp.km &lt;- rescale.ppp(armed_clash_myn_ppp, 1000, \"km\")\n\nWe re-run density() using the rescaled data and plot the output KDE map: (Note the difference between _bw and .bw to denote scaled data)\n\nkde_armed_clash_myn.bw &lt;- density(armed_clash_myn_ppp.km,\n                                     sigma=bw.diggle, \n                                     edge=TRUE, \n                                     kernel=\"gaussian\")\n\nplot(kde_armed_clash_myn.bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp.km)\nsigma_diggle\n\n     sigma \n0.08463052"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Working with different automatic bandwidth methods",
    "text": "6.1 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(armed_clash_myn_ppp.km)\n\n   sigma \n32.05992 \n\n\n\nbw.scott(armed_clash_myn_ppp.km)\n\n sigma.x  sigma.y \n16.84732 26.63314 \n\n\n\nbw.ppl(armed_clash_myn_ppp.km)\n\n   sigma \n3.674435 \n\n\n\nbw.diggle(armed_clash_myn_ppp.km)\n\n     sigma \n0.08463052 \n\n\nThe code chunk beow will be used to compare the output of using the different methods.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States CvL\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States Scott\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States ppl\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States diggleL\"))\n\n\n\n\n\n\n\n\nInterpretation: To summarize given the expectation of multiple clusters in th Myanmar conflict data, I’ll be predominantly utilizing bw.ppl(), well-suited for capturing multiple clusters without overfitting or underfitting, Baddeley et al. (2016). In the case where tighter, isolated clusters are preferred, bw.diggle() will be the sigma used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-kernel-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-kernel-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Working with different kernel methods",
    "text": "6.2 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Fixed vs Adaptive bandwidth for KDE",
    "text": "6.2 Fixed vs Adaptive bandwidth for KDE\nThe choice between automatic and adaptive bandwidth depends on the objectives and nature of our analysis.\n\n6.2.1 Computing KDE by using fixed bandwidth\n\n\n\n\n\n\nFixed Bandwidth\nAdaptive Bandwidth\n\n\n\n\nOffers Consistency across Space: Uniform smoothing across the entire study area.\nVarying Spatial Densities: Showing significant differences in conflict event densities (urban, rural ares), adaptive bandwidth could give a more nuanced understanding\n\n\nGeneral Hotspot Detection: To identify overall hotspots or conflict zones without too much detail\nLocal Hotspot Detection\n\n\n\nBased on our earlier analysis, we received a sigma value of 6. which results in minimal smoothing, meaning the KDE will show more localized patterns, however, this could lead to overfitting, where small clusters are exaggerated and conflict points are more prone to misinterpretation.\nCurrently, as I am unsure of what sigma degree to use, a good starting point would be to calculate the average or median Nearest Neighbour distance between points and use that as an initial value:\n\nmean_distance &lt;- mean(nndist(armed_clash_myn_ppp.km))\n\npar(mfrow=c(1,2))\nkde_diggle &lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.diggle)\nkde_ppl&lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.ppl)\nplot(kde_diggle)\nplot(kde_ppl)\n\n\n\n\n\n\n\n\n\n6.2.2 Computing KDE by using adaptive bandwidth\n\nkde_armed_clash_myn_adaptive &lt;- adaptive.density(armed_clash_myn_ppp.km, \n                                                 method=\"kernel\")\nplot(kde_armed_clash_myn_adaptive)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "title": "Take-Home Exercise 1",
    "section": "6.3 Fixed Bandwith for Quarterly KDE Analysis",
    "text": "6.3 Fixed Bandwith for Quarterly KDE Analysis\n\nKey Considerations for KDE Comparison Across Quarters:\n\nConsistency: For the KDEs to be comparable across different quarters, you need to use the same sigma for all quarters. This ensures that the degree of smoothing is consistent across the time periods, allowing you to make fair comparisons of density patterns over time.\nScale of Patterns: The chosen sigma should be large enough to reveal the relevant spatial patterns without introducing too much noise (from a very small sigma) or losing too much detail (from a very large sigma).\n\n\n\n\n\n\n\n\n\n\nInitial Sigma Value (0.07)\n\nMean Distance (1.6)\n\n\n\n\n\nAdvantages\nDisadvantages\nAdvantages\nDisadvantages\n\n\nCaptures local detail: This smaller sigma will emphasize fine-grained, local patterns, showing small clusters of events that may otherwise be smoothed over with a larger sigma.\nToo small for larger trends: A sigma of 0.18 may result in overfitting, where the KDE highlights every small cluster or isolated event.\nGood balance of local and global patterns: A sigma of 1.6 km (based on average nearest neighbor distance) strikes a balance between capturing local clusters and revealing broader spatial trends. It smooths out small noise while still showing meaningful clusters.\nLess local detail: While the 1.6 km sigma is a good balance, it may not capture very small-scale, localized patterns that might be relevant in specific analyses.\n\n\nGood for high-detail analysis: If your goal is to observe very specific spatial variations within each quarter, this smaller sigma might be more suitable.\nDifficult for comparisons: A very small sigma might highlight differences in individual points rather than overall trends, making it harder to compare the general distributions across quarters.\nBetter for comparisons: Since this sigma is derived from the overall spacing of points in your dataset, it reflects a more general spatial structure. This makes it more suitable for comparing KDE patterns across different quarters, as it ensures that the bandwidth is appropriate for both sparse and dense data, without overemphasizing small differences.\n\n\n\n\nContent adapted from Luc Anselin Spatial Econometrics.\nBased on this analysis, I am more inclined to go with the mean distance calculated for a Fixed Bandwidth, which we will use to compare Battles (Armed clash) across different quarters.\nSimple visualizations through graphs can help us get a better sense of the temporal aspect of when these armed clashes occurred. Since we are dealing with time:\n\narmed_clash_long &lt;- armed_clash_sf %&gt;%\n  arrange(desc(FATALITIES)) %&gt;% \n  pivot_longer(cols = c(FATALITIES, event_count), \n               names_to = \"measure\",             \n               values_to = \"value\")\n\n\nggplot(armed_clash_long, aes(x = value, \n                             y = factor(quarter, levels = sort(unique(quarter))))) + \n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"black\") +  \n  geom_text(data = armed_clash_long %&gt;%\n              group_by(quarter, measure) %&gt;% \n              filter(value == max(value)),  \n            aes(label = round(value, 1)),  \n            position = position_dodge(width = 0.9), \n            vjust = 0.5,  \n            hjust = 4.0,  \n            size = 3,    \n            color = \"white\") + \n  facet_wrap(~measure, scales = \"free_x\") + \n  labs(title = \"Total Fatalities and Event Count by Event Type per Quarter\", \n       x = \"Value\", \n       y = \"Quarter\") + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nquarters &lt;- unique(marks(armed_clash_myn_ppp))\n\npar(mfrow = c(2,2))\n\nfor (q in quarters){\n  quarter_ppp &lt;- armed_clash_myn_ppp[marks(armed_clash_myn_ppp)==q]\n  plot(quarter_ppp, main=paste(\"Spatial Distribution for\", q), cex = 0.5)\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object",
    "text": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object\n\nq1_2021_ppp &lt;- q1_2021_jitter[states3_owin]\nq2_2021_ppp &lt;- q2_2021_jitter[states3_owin]\nq3_2021_ppp &lt;- q3_2021_jitter[states3_owin]\nq4_2021_ppp &lt;- q4_2021_jitter[states3_owin]\n\n# For 2022\nq1_2022_ppp &lt;- q1_2022_jitter[states3_owin]\nq2_2022_ppp &lt;- q2_2022_jitter[states3_owin]\nq3_2022_ppp &lt;- q3_2022_jitter[states3_owin]\nq4_2022_ppp &lt;- q4_2022_jitter[states3_owin]\n\n# For 2023\nq1_2023_ppp &lt;- q1_2023_jitter[states3_owin]\nq2_2023_ppp &lt;- q2_2023_jitter[states3_owin]\nq3_2023_ppp &lt;- q3_2023_jitter[states3_owin]\nq4_2023_ppp &lt;- q4_2023_jitter[states3_owin]\n\n# For 2024\nq1_2024_ppp &lt;- q1_2024_jitter[states3_owin]\nq2_2024_ppp &lt;- q2_2024_jitter[states3_owin]"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#rescale.ppp",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#rescale.ppp",
    "title": "Take-Home Exercise 1",
    "section": "7.2 Rescale.ppp()",
    "text": "7.2 Rescale.ppp()\n\n# For 2021\nq1_2021_ppp.km = rescale.ppp(q1_2021_ppp, 1000, \"km\")\nq2_2021_ppp.km = rescale.ppp(q2_2021_ppp, 1000, \"km\")\nq3_2021_ppp.km = rescale.ppp(q3_2021_ppp, 1000, \"km\")\nq4_2021_ppp.km = rescale.ppp(q4_2021_ppp, 1000, \"km\")\n\n# For 2022\nq1_2022_ppp.km = rescale.ppp(q1_2022_ppp, 1000, \"km\")\nq2_2022_ppp.km = rescale.ppp(q2_2022_ppp, 1000, \"km\")\nq3_2022_ppp.km = rescale.ppp(q3_2022_ppp, 1000, \"km\")\nq4_2022_ppp.km = rescale.ppp(q4_2022_ppp, 1000, \"km\")\n\n# For 2023\nq1_2023_ppp.km = rescale.ppp(q1_2023_ppp, 1000, \"km\")\nq2_2023_ppp.km = rescale.ppp(q2_2023_ppp, 1000, \"km\")\nq3_2023_ppp.km = rescale.ppp(q3_2023_ppp, 1000, \"km\")\nq4_2023_ppp.km = rescale.ppp(q4_2023_ppp, 1000, \"km\")\n\n# For 2024\nq1_2024_ppp.km = rescale.ppp(q1_2024_ppp, 1000, \"km\")\nq2_2024_ppp.km = rescale.ppp(q2_2024_ppp, 1000, \"km\")\n\nIn the code chunk below, we will compute the KDE of each quarter of each year. bw.diggle method is used to derive the bandwidth of each KDE:\n\npar(mfrow = c(4, 4), mar = c(2, 2, 2, 2)) \n\n# 2021 plots\nplot(density(q1_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2021\")\n\nplot(density(q2_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2021\")\n\n\nplot(density(q3_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2021\")\n\nplot(density(q4_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2021\")\n\n\n# 2022 plots\nplot(density(q1_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2022\")\n\nplot(density(q2_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2022\")\n\n\nplot(density(q3_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2022\")\n\nplot(density(q4_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2022\")\n\n# 2023 plots\nplot(density(q1_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2023\")\n\nplot(density(q2_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2023\")\n\n\nplot(density(q3_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2023\")\n\nplot(density(q4_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2023\")\n\n# 2024 plots\nplot(density(q1_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2024\")\n\nplot(density(q2_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2024\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Take-Home Exercise 1",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(armed_clash_myn_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  armed_clash_myn_ppp.km\nR = 0.26742, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nInterpretation:\n\nThe R-value (0.37315) suggests that the points (armed clashes) are clustered—events tend to occur near each other.\nThe p-value (extremely low) provides very strong evidence against the null hypothesis of randomness. Thus, we conclude that the distribution of armed clashes is not random but instead shows a statistically significant clustered pattern.\n\n\n8.1.1 Clark and Evans Test: Q2 2021\n\nclarkevans.test(q2_2021_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2021_ppp.km\nR = 0.39373, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.2 Clark and Evans Test: Q2 2022\n\nclarkevans.test(q2_2022_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2022_ppp.km\nR = 0.41526, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.3 Clark and Evans Test: Q2 2023\n\nclarkevans.test(q2_2023_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2023_ppp.km\nR = 0.42649, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.4 Clark and Evans Test: Q2 2024\n\nclarkevans.test(q2_2024_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2024_ppp.km\nR = 0.34251, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nReasons to account for the observed pattern:\nBased on the R-value, where lower R values indicate strong clustering, it follows the reasons below:\n\nEscalation of Conflict in the hotspot Area: From 2021 onwards, the area of study has recently experience a military coup in February 2021, which was concentrated as the Tatmadaw (military) cracked down on urban areas and strategic areas. These mentioned states were areas where civilian resistance was particularly strong.\nImplication of Dispersion: This observation is further evidence by the quarterly summation of the deaths by state, where for the same quarters observed below: Q4 2021 - Q2 2022, there was a stark increase in the total_fatalities and event_count, marking the amplification of armed clash battles in the region, accounting for the strong clustering patterns observed from Q2 2021 which showed the strongest clustering out of the 4 quarters assessed and eventual distribution of the conflict towards other areas.\n\n\nquarterly_summary %&gt;% \n  arrange(desc(total_fatalities))\n\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   quarter total_fatalities event_count                                 geometry\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                         &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022             2494         504 ((-11051.37 2410853), (-10908.92 256130…\n 2 Q1 2022             1759         410 ((-13816.45 2549666), (-12383.46 255035…\n 3 Q4 2021             1674         340 ((-12383.46 2550351), (-10581.74 255763…\n 4 Q3 2022             1649         414 ((-14448.48 2310133), (-12383.46 255035…\n 5 Q4 2023             1502         432 ((-13753.92 2572123), (-10781.63 257609…\n 6 Q1 2023             1335         429 ((-9542.333 2376489), (-8200.325 237117…\n 7 Q2 2023             1291         372 ((-10160.54 2446554), (-8954.966 256734…\n 8 Q4 2022             1264         377 ((-10226.14 2411015), (-8954.966 256734…\n 9 Q3 2023              998         428 ((-10171.84 2571422), (-10106 2331539),…\n10 Q3 2021              759         179 ((-13645.89 2571086), (-9197.246 255207…\n11 Q1 2024              757         292 ((-16397.05 2576482), (-13753.92 257212…\n12 Q2 2024              726         279 ((-11281.63 2583340), (-10452.13 257881…\n13 Q2 2021              522         130 ((-13808.2 2533298), (-10226.14 2411015…\n14 Q1 2021               20           8 ((-10581.74 2557635), (-9197.246 255207…\n\n\n\nquarterly_summary_by_state &lt;- armed_clash_sf %&gt;%\n  group_by(quarter, admin1) %&gt;%  # Group by quarter\n  summarise(\n    total_fatalities = sum(FATALITIES, na.rm = TRUE), \n    event_count = n()                               \n  ) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\n`summarise()` has grouped output by 'quarter'. You can override using the\n`.groups` argument.\n\nprint(quarterly_summary_by_state)\n\nSimple feature collection with 42 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 42 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q2 2022 Magway               726         134 ((-11051.37 2410853), (-10745.5…\n10 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n# ℹ 32 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-to-owin-objects",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-to-owin-objects",
    "title": "Take-Home Exercise 1",
    "section": "9.2 Converting sf to owin objects",
    "text": "9.2 Converting sf to owin objects\n\nsagaing_owin = as.owin(sagaing)\nmagway_owin = as.owin(magway)\nmandalay_owin = as.owin(mandalay)\n\n\npar(mfrow=c(1,3))\nplot(sagaing_owin)\nplot(magway_owin)\nplot(mandalay_owin)\n\n\n\n\n\n\n\n\n\n9.2.1 Combining armed clash points and the study area\nBy using the code chunk below, we are able to extract armed clashes that is within the specific region to do our analysis later on.\n\narmed_clash_sng_ppp = armed_clash_jitter[sagaing_owin]\narmed_clash_mgy_ppp = armed_clash_jitter[magway_owin]\narmed_clash_mnd_ppp = armed_clash_jitter[mandalay_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\narmed_clash_sng.km = rescale(armed_clash_sng_ppp, 1000, \"km\")\narmed_clash_mgy.km = rescale(armed_clash_mgy_ppp, 1000, \"km\")\narmed_clash_mnd.km = rescale(armed_clash_mnd_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these 3 study areas and the locations of the battles (armed clashes).\n\npar(mfrow=c(1,3))\nplot(armed_clash_sng.km, main=\"Sagaing\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mgy.km, main=\"Magway\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mnd.km, main=\"Mandalay\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "9.6 Analysing Spatial Point Process Using G-Function",
    "text": "9.6 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I compute the G-function estimation by using Gest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n9.6.1 Computing G-function estimation\n\nG_SNG = Gest(armed_clash_sng_ppp, correction = \"best\")\nplot(G_SNG)\n\n\n\n\n\n\n\n\n\n\n9.6.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_SNG.csr)\n\n\n\n\n\n\n\n\n\n\n9.7 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.In this section, I compute the F-function estimation by using Fest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n\n9.7.1 Computing F-function estimation\n\nF_SNG = Fest(armed_clash_sng_ppp, correction=\"best\")\nplot(F_SNG)\n\n\n\n\n\n\n\n\n\n\n9.7.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Fest, correction = \"all\", nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(F_SNG.csr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Exercise 1",
    "section": "9.8 Analysing Spatial Point Process Using K-Function",
    "text": "9.8 Analysing Spatial Point Process Using K-Function\n\n9.8.1 Computing K-function estimation\n\n#K_SNG = Kest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(K_SNG, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with K-fucntion\n\n#K_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Kest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(K_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Exercise 1",
    "section": "9.9 Analysing Spatial Point Process Using L-Function",
    "text": "9.9 Analysing Spatial Point Process Using L-Function\n\n9.9.1 Computing L-function estimation\n\n#L_SNG = Lest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(L_SNG, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with L-fucntion\n\n#L_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Lest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(L_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:",
    "text": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:\n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \ntm_shape(armed_clash_sagaing) + \n  tm_dots(size = 0.1, alpha = 0.5) + \ntm_facets(by=\"quarter\", \n          free.coords=FALSE,\n          drop.units = TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "title": "Take-Home Exercise 1",
    "section": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground",
    "text": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground\nAlong with the quarterly visualization of the armed clashes, we see a corresponding fixation of attacks on the Southern point of the Sagaing, near the border of two other states in conflict (Madway and Mandalay). According to the article by Think Global Health:\n\nAttacks on Health Care in Myanmar, 2021 – 2023\nMyanmar’s health system is under attack countrywide, with the greatest number of attacks taking place in the Sagaing, Mandalay, and Yangon regions.\nAccording to Insecurity Insight, a nonprofit group collecting data on conflicts worldwide, nearly 1,200 attacks on health-care workers and facilities have taken place in the three years since the coup. Doctors, aid workers, and other medical personnel have been detained and arrested, targeted for allegedly taking care of protestors or participating in the civil disobedience movement (CDM).  \n\n\nquarterly_summary_sagaing &lt;- quarterly_summary_by_state %&gt;% \n  filter(admin1 == \"Sagaing\")\nquarterly_summary_sagaing  \n\nSimple feature collection with 14 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n * &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n10 Q3 2021 Sagaing              521         130 ((-13645.89 2571086), (-9197.24…\n11 Q1 2024 Sagaing              451         190 ((-16397.05 2576482), (-13753.9…\n12 Q2 2021 Sagaing              387          90 ((-13808.2 2533298), (-9514.18 …\n13 Q2 2024 Sagaing              348         133 ((-11281.63 2583340), (-10452.1…\n14 Q1 2021 Sagaing               13           4 ((-10581.74 2557635), (-9197.24…\n\n\nCoincidentally (or not), the quarters with the higest number of recorded fatalities fall between Q4 2021 - Q3 2022, where we will focus the computation of STKDE\n\narmed_clash_sagaing\n\nSimple feature collection with 2903 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10 Q1 2022 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Day of Year",
    "text": "10.2 Computing STKDE by Day of Year\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;% \n  filter(admin1 == \"Sagaing\") %&gt;% \n  filter(quarter %in% c(\"Q4 2021\", \"Q1 2022\", \"Q2 2022\", \"Q3 2022\")) %&gt;% \n  mutate(dayYear = yday(event_date)) %&gt;% \n  mutate(monthNum = month(event_date)) %&gt;% \n  mutate(monthFac = month(event_date,\n                          label=TRUE,\n                          abbr=FALSE))\narmed_clash_year_sf\n\nSimple feature collection with 1119 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2863190\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,119 × 11\n   quarter event_type sub_event_type admin1           geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;         &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-02-01\n 2 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-03-24\n 3 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-15\n 4 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-23\n 5 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-03-18\n 6 Q1 2022 Battles    Armed clash    Sagai…    (95831 2496973) 2022-01-11\n 7 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-01-24\n 8 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-02-04\n 9 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-01-12\n10 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-02-05\n# ℹ 1,109 more rows\n# ℹ 5 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, dayYear &lt;dbl&gt;,\n#   monthNum &lt;dbl&gt;, monthFac &lt;ord&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\narmed_clash_yday_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(dayYear) %&gt;% \n  as.ppp()\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_yday_owin &lt;- armed_clash_yday_ppp[sagaing_owin]\nsummary(sagaing_yday_owin)\n\nMarked planar point pattern:  1119 points\nAverage intensity 1.192011e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    91.0   172.0   176.3   260.5   365.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_yday_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp(sagaing_yday_owin)\n\nInitialising...Done.\nOptimising...\nh = 26068.43 \b; lambda = 29.14375 \nh = 28675.27 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 2635.987 \nh = 26720.14 \b; lambda = 1332.565 \nh = 27371.85 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 1332.565 \nh = 26394.29 \b; lambda = 680.8545 \nh = 26557.21 \b; lambda = 354.9991 \nh = 26638.68 \b; lambda = 192.0715 \nh = 26679.41 \b; lambda = 110.6076 \nh = 26699.78 \b; lambda = 69.87568 \nDone.\n\n\n          h      lambda \n26699.77626    69.87568 \n\n\n\nkde_yday &lt;- spattemp.density(sagaing_yday_owin,\n                             h=26699.77626,\n                             lambda=69.87568)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 26699.78 (spatial)\n  lambda = 69.8757 (temporal)\n\nNo. of observations\n  1119 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 365]\n\nEvaluation\n  128 x 128 x 365 trivariate lattice\n  Density range: [1.553021e-30, 1.912896e-13]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:365\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#saving-intermediate-datasets",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#saving-intermediate-datasets",
    "title": "Take-Home Exercise 1",
    "section": "10.3 Saving Intermediate Datasets:",
    "text": "10.3 Saving Intermediate Datasets:\n\nwrite_rds(healthcare_sng, \"data/rds/healthcare_sng.rds\")\nwrite_rds(quarterly_summary, \"data/rds/quarterly_summary.rds\")\nwrite_rds(quarterly_summary_by_state, \"data/rds/quarterly_summary_by_state.rds\")\nwrite_rds(state3_sf, \"data/rds/state3_sf.rds\")\nwrite_rds(event_density_data, \"data/rds/event_density_data.rds.rds\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#key-findings",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#key-findings",
    "title": "Take-Home Exercise 1",
    "section": "Key Findings:",
    "text": "Key Findings:\n\nClustering of Armed Clashes:\n\nWithin Q4 2021 to Q2 2022, with R-values indicating a highly clustered distribution of conflict events. This clustering is particularly evident in Sagaing, Mandalay, and Magway, where much of the conflict was concentrated.\nThe clustering can be attributed to the ongoing civil resistance following the military coup in Myanmar in 2021, with Sagaing experiencing heavily intense conflicts. This has prompted me to research further, finding that: \n\nThe area is prone to natural disasters, being located at the ‘Sagaing fault’ and is already a natural hotspot for refugee / displaced individuals due to the socio-economic plight it has faced, as part of the ‘Dry Zone’ \nMilitary Conscription drives has ‘provoked reverse migration, pushing young men who fled Myanmar’s war-torn Dry Zone to give up their livellihoods and risk their lives to return home’ \n\n\nKernel Density Estimation:\n\nKDE analysis allowed us to visualize the intensity of conflict over time. Using fixed bandwidth (e.g., bw.ppl()), we observed that while the intensity of conflict was concentrated in certain regions, particularly in Sagaing, there was a gradual dispersion of conflict events over time into neighboring regions such as Magway and Mandalay.\nThe choice of bandwidth (sigma) and kernel function was important for interpreting both local and broader trends in armed clashes. The Gaussian kernel was effective in showing overall trends, while smaller sigmas captured finer details, especially in high-density areas. Initially, I actually went with bw.diggle instead of bw.ppl bandwidth as I thought bw.diggle() is always the best choice for detecting clusters, and bw.ppl is better for smoothing over broader areas. However, this interpretation may be overly simplistic. \n\nGoing by bw.diggle, I obtained a really small sigma value which might have been a sign of overfitting. Furthermore, because of the plotting and the movement of the conflict over time, we ought to expect multiple clsuter, which implied bw.ppl was a better fit. \n\n\nSpatio-temporal KDE:\n\nThe STKDE provided a nuanced view of how conflict events evolved quarter by quarter, confirming that some periods saw a stark increase in fatalities, such as Q4 2021 through Q2 2022.\nThe temporal analysis highlighted the cyclical nature of the conflict, with periods of intense violence followed by temporary dispersions or shifts in conflict zones.\n\n2nd-Order Spatial Point Pattern Analysis:\n\nThe use of G-, F-, K-, and L-functions provided further confirmation of the non-random distribution of armed clashes. These functions indicated significant spatial interaction among the conflict points, suggesting that the locations of armed clashes were influenced by proximity to other events, reflecting the complex nature of the conflict. 2nd Point Pattern Analysis allowed me to research further on the conflicting factors that affected (random) spatial distribution of armed conflict, and found the unfortunate but deliberate choice to target civilian institutions like hospitals.\n\nHealthcare as a Battleground:\n\nBy overlaying points of interest (POI) such as hospitals and healthcare facilities onto the map, we observed that many clashes occurred near key civilian infrastructure. This aligns with findings that healthcare has become a battleground in Myanmar, particularly in Sagaing and surrounding regions. Attacks on healthcare facilities have not only disrupted medical services but also contributed to the broader humanitarian crisis in the region."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#objectives",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#objectives",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#packages-used",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#packages-used",
    "title": "Take-Home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\nThe table below provides a summary of the packages I’ve used for this exercise\n\nThe code chunk below installs and launches the R packages,\n\n\ntidyverse\nfor performing data science tasks such as importing, wrangling and visualising data.\nIt contains the following packages used :\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\n\nsf\npackage provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n\ntmap\nwhich provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\nspatstat\nhas functions useful for Point Pattern Analysis\n\n\nraster\nreads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)\n\n\nspNetwork\nwhich provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n\nsp\n\n\n\ndplyr\n\n\n\nsparr\nprovides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n\nanimation\n\n\n\n\n\npacman::p_load(tidyverse, sf, sp, tmap, spatstat, raster, spNetwork, RColorBrewer,dplyr, sparr,animation, magick)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#datasets-used",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#datasets-used",
    "title": "Take-Home Exercise 1",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nIn response to the background context of the armed conflict happening in Myanmar, the exercise aims to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\nUpon further research, I’ve managed to come across an interesting resource which maps out the Warscapes in Myanmar. It illustrates the variations in the type of conflict inflicted in different zones of the country\n\nAspatial Data\n\nMYNMAR.CSV dataset derived from Armed Conflict Location & Event Data Project (ACLED), a non-profit organization collecting, analyzing and mapping data on political violence and protest events around the world. (Limited to Jan 2021 - June 2024)\n\n\n\nGeospatial\nThe following datasets were obtained from: https://data.humdata.org/organization/mimu\n\nMyanmar Country Boundaries MIMU\nMyanmar State_Region Boundaries MIMU\nPoints of Interest from OpenStreetMap, depicting different categories of features mapped by the OSM community. It depicts various categories such as : public services and infrastructure, emergency and safety locations, amenities etc.\n\nThis additional dataset from OpenStreetMap is crucial for analyzing armed conflict in Myanmar as it provides detailed geographic information on key locations such as public services, infrastructure, and emergency and safety sites. Understanding the distribution of these points of interest helps in assessing the impact of conflict on civilian infrastructure, access to essential services, and the safety of affected populations. Furthermore, it may aid in planning humanitarian assistance, evacuation routes, and monitoring areas of strategic importance during the conflict through data insights.\nFor the purposes of this exercise, we will focus on the State/Region boundaries, seeing as the conflict is generally explored in this manner (as inferred from the given references in the Take Home Exercise Overview). This is represented by the first administrative level (admin1). Myanmar is divided into 7 states and 7 regions (plus the Union Territory of Naypyidaw).\nThese boundaries are politically and administratively significant. Different states (e.g., Kachin, Rakhine, Shan) and regions have distinct ethnic compositions and different conflict dynamics, making this level critical for understanding broader conflict patterns."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#importing-spatial-data",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#importing-spatial-data",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Importing Spatial Data",
    "text": "3.1 Importing Spatial Data\n\n1. Myanmar CSV\nUsing read_csv to import the data in the MYANMAR.CSV file, which is the ACLED Dataset detailing armed conflict in Myanmar:\n\narmed_conflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck and transform the CRS of the ACLED Dataset:\n\ncolnames(armed_conflict_data)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\n\n\narmed_conflict &lt;- st_as_sf(armed_conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;% \n  st_transform(armed_conflict, crs=32647)\n\n\n\n2. Country, State, Region, District Boundaries\nUsing the st_read function, we will import data from the State & Region Sub-boundary dataset to visualize Myanmar’s landscape. We will focus our analysis on the State_Region Level (Admin1)\n\nstate_region_sf &lt;-  st_read(dsn=\"data/geospatial/stateRegion\", layer \n=\"mmr_polbnda_adm1_250k_mimu_1\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01/data/geospatial/stateRegion' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\ndistrict_sf &lt;- st_read(dsn=\"data/geospatial/district\", layer \n=\"mmr_polbnda_adm2_250k_mimu\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01/data/geospatial/district' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nAfter importing the dataset, we will plot to see the boundaries of the State & Regions of Myanmar. The plot() function is used to plot the geometry of the sf object. The st_geometry() function is used to extract the geometry of the state_region_sf object.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_polygons() + \n  tm_text(\"ST\", size =0.9, just=\"center\")\n\n\n\n\n\n\n\ntm_layout(frame=FALSE)\n\n$tm_layout\n$tm_layout$frame\n[1] FALSE\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\n\n3. Points of Interest\nFrom here on out, we will denote points-of-interest as POI.\nI will load the corresponding shapefile:\n\npoi_sf &lt;- st_read(dsn = \"data/geospatial/pointsOfInterest\", layer = \"hotosm_mmr_points_of_interest_points_shp\") %&gt;%\n  st_set_crs(4326) %&gt;%  \n  st_transform(crs = 32647)  \n\nReading layer `hotosm_mmr_points_of_interest_points_shp' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01/data/geospatial/pointsOfInterest' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56187 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 92.15357 ymin: 9.756896 xmax: 101.1515 ymax: 28.36754\nCRS:           NA\n\n\n\nst_crs(poi_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\ncolnames(poi_sf)\n\n [1] \"name\"       \"name_en\"    \"amenity\"    \"man_made\"   \"shop\"      \n [6] \"tourism\"    \"opening_ho\" \"beds\"       \"rooms\"      \"addr_full\" \n[11] \"addr_house\" \"addr_stree\" \"addr_city\"  \"source\"     \"name_my\"   \n[16] \"osm_id\"     \"osm_type\"   \"geometry\"  \n\n\nBased on the unique amenities, those that would be relevant in analyzing armed conflict effects in Myanmar would be : “hospital” , “refugee_site”, “Health centre” , “clinic”:\n\npoi_sf &lt;- poi_sf %&gt;% \n  mutate(amenity = str_to_lower(amenity)) %&gt;% \n  filter(amenity %in% c(\"refugee_site\", \"hospital\", \"health center\")) %&gt;% \n  dplyr::select(name_en, amenity, geometry)\n\npoi_sf\n\nSimple feature collection with 617 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -211935.1 ymin: 1103190 xmax: 697952 ymax: 3026108\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                         name_en  amenity                 geometry\n1                           &lt;NA&gt; hospital POINT (439165.5 1562018)\n2       Kalar Chaunggyi Hospital hospital POINT (262988.5 1908198)\n3                  militry O.P.T hospital POINT (238995.6 2440150)\n4           Myint Mo Oo Hospital hospital POINT (414147.5 1556093)\n5             Chan Myae Hospital hospital POINT (412546.6 1555811)\n6              Mediland Hospital hospital POINT (412151.4 1557561)\n7  Traditional Medicine Hospital hospital POINT (411729.3 1557083)\n8                           &lt;NA&gt; hospital POINT (458901.2 1144896)\n9              Kra Buri Hospital hospital POINT (475772.4 1149467)\n10        Dawei General Hospital hospital POINT (413966.3 1556630)\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) +\n  tm_polygons(alpha=0.5) + \n  tm_shape(poi_sf) +\n  tm_dots(col = \"amenity\", palette = \"Set1\",\n          title=\"Amenity Type\") +\n  tm_layout(main.title = \"Distribution of Healthcare Infrastructure & Amenities\", \n            main.title.position = c(\"center\", \"top\")\n  ) + \n  tm_layout(legend.outside=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#data-preparation",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nBefore a thematic map can be prepared, we have to prepare a data table which includes the variables event types, focused on : Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nstr(armed_conflict)\n\nsf [42,608 × 30] (S3: sf/tbl_df/tbl/data.frame)\n $ event_id_cnty     : chr [1:42608] \"MMR64313\" \"MMR64320\" \"MMR64321\" \"MMR64322\" ...\n $ event_date        : chr [1:42608] \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" ...\n $ year              : num [1:42608] 2024 2024 2024 2024 2024 ...\n $ time_precision    : num [1:42608] 1 1 1 1 1 1 1 1 1 1 ...\n $ disorder_type     : chr [1:42608] \"Political violence\" \"Political violence\" \"Political violence\" \"Strategic developments\" ...\n $ event_type        : chr [1:42608] \"Battles\" \"Battles\" \"Battles\" \"Strategic developments\" ...\n $ sub_event_type    : chr [1:42608] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Change to group/activity\" ...\n $ actor1            : chr [1:42608] \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"Military Forces of Myanmar (2021-)\" ...\n $ assoc_actor_1     : chr [1:42608] \"MDA - AGF: Madaya - The Authentic Genes Force; SSTF: Security & Special Task Force CDM People's Police\" NA NA NA ...\n $ inter1            : num [1:42608] 3 3 3 1 3 1 1 2 1 1 ...\n $ actor2            : chr [1:42608] \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" NA ...\n $ assoc_actor_2     : chr [1:42608] NA NA NA NA ...\n $ inter2            : num [1:42608] 1 1 1 0 1 0 2 1 2 2 ...\n $ interaction       : num [1:42608] 13 13 13 10 13 10 12 12 12 12 ...\n $ civilian_targeting: chr [1:42608] NA NA NA NA ...\n $ iso               : num [1:42608] 104 104 104 104 104 104 104 104 104 104 ...\n $ region            : chr [1:42608] \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" ...\n $ country           : chr [1:42608] \"Myanmar\" \"Myanmar\" \"Myanmar\" \"Myanmar\" ...\n $ admin1            : chr [1:42608] \"Mandalay\" \"Mandalay\" \"Mandalay\" \"Sagaing\" ...\n $ admin2            : chr [1:42608] \"Mandalay\" \"Pyinoolwin\" \"Pyinoolwin\" \"Shwebo\" ...\n $ admin3            : chr [1:42608] \"Patheingyi\" \"Singu\" \"Thabeikkyin\" \"Khin-U\" ...\n $ location          : chr [1:42608] \"Aung Tha Pyay\" \"Pin Lel Gyi\" \"Thabeikkyin\" \"Khin-U\" ...\n $ geo_precision     : num [1:42608] 2 1 2 2 2 2 1 1 2 1 ...\n $ source            : chr [1:42608] \"Democratic Voice of Burma; Irrawaddy\" \"Irrawaddy\" \"Irrawaddy\" \"Democratic Voice of Burma; Khit Thit Media\" ...\n $ source_scale      : chr [1:42608] \"National\" \"National\" \"National\" \"Subnational-National\" ...\n $ notes             : chr [1:42608] \"On 30 June 2024, near Aung Tha Pyay village (Patheingyi township, Mandalay district, Mandalay region), a combin\"| __truncated__ \"On 30 June 2024, in Pin Lel Gyi village (Singu township, Pyinoolwin district, Mandalay region), the People's De\"| __truncated__ \"On 30 June 2024, in Thabeikkyin township (Pyinoolwin district, Mandalay region), the People's Defense Force - M\"| __truncated__ \"Change to armed group: On 30 June 2024, in Khin-U town (Khin-U township, Shwebo district, Sagaing region), a mi\"| __truncated__ ...\n $ fatalities        : num [1:42608] 0 0 0 0 0 0 0 2 0 0 ...\n $ tags              : chr [1:42608] NA NA NA NA ...\n $ timestamp         : num [1:42608] 1.72e+09 1.72e+09 1.72e+09 1.72e+09 1.72e+09 ...\n $ geometry          :sfc_POINT of length 42608; first list element:  'XY' num [1:2] 214961 2452068\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"event_id_cnty\" \"event_date\" \"year\" \"time_precision\" ...\n\n\nHere is a visual overview of the 4 different types of Armed Conflict (based on event_types) :\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_borders(col = \"black\") + \n  tm_shape(armed_conflict) + \n  tm_dots(col = \"event_type\", palette = \"Set1\", size = 0.01, alpha = 0.5) +\n  tm_facets(by = \"event_type\") + \n  tm_layout(title = \"Armed Conflict in Myanmar (Jan 2021 - Jun 2024)\", \n            legend.outside = TRUE) +\n  tm_legend(title = \"Event Type\")\n\n\n\n\n\n\n\n\nFrom the plots above, we see that armed conflict even types seem to concentrate in the North-west region, particularly at the boundary of Sagaing, Mandalay and Magwe state, which we will zoom in on.\nIn order to group and have a sensing of the effects of armed conflict, we will aggregate based on fatalities to see a quick overview as well as their state (administrative boundary 1) :\n\narmed_conflict_fatalities &lt;- armed_conflict %&gt;% \n  group_by(admin1, event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Summarize fatalities based on the administrative boundary (stateRegion)\n  group_by(admin1) %&gt;% \n  mutate(total_fatalities_admin1 = sum(total_fatalities)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Arrange admin1 by descending order of fatalities and then the event type \n  arrange(desc(total_fatalities_admin1), admin1, desc(total_fatalities)) \n\n`summarise()` has grouped output by 'admin1'. You can override using the\n`.groups` argument.\n\narmed_conflict_fatalities\n\nSimple feature collection with 72 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 72 × 5\n   admin1   event_type                total_fatalities                  geometry\n   &lt;chr&gt;    &lt;chr&gt;                                &lt;dbl&gt;          &lt;MULTIPOINT [m]&gt;\n 1 Sagaing  Battles                              11225 ((-16397.05 2576482), (-…\n 2 Sagaing  Explosions/Remote violen…             5161 ((-13753.92 2572123), (-…\n 3 Sagaing  Violence against civilia…             2513 ((-13808.2 2533298), (-1…\n 4 Sagaing  Strategic developments                  40 ((-16397.05 2576482), (-…\n 5 Magway   Battles                               3910 ((-14448.48 2310133), (-…\n 6 Magway   Explosions/Remote violen…             1701 ((-11811.97 2503484), (-…\n 7 Magway   Violence against civilia…              544 ((-9822.857 2409014), (-…\n 8 Magway   Strategic developments                  17 ((-11256.98 2417070), (-…\n 9 Mandalay Battles                               1658 ((69197.66 2321843), (84…\n10 Mandalay Explosions/Remote violen…             1051 ((75228.96 2349261), (96…\n# ℹ 62 more rows\n# ℹ 1 more variable: total_fatalities_admin1 &lt;dbl&gt;\n\n\nBased on the above result, we see that the fatalities are concentrated in are concentrated in these 3 states: Sagaing, Magway and Mandalay.\nThe code chunk below explores the data further:\n\narmed_conflict_fatalities_by_event_type &lt;- armed_conflict %&gt;% \n  group_by(event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\narmed_conflict_fatalities_by_event_type\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 4\n  event_type              total_fatalities event_count                  geometry\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;int&gt;          &lt;MULTIPOINT [m]&gt;\n1 Battles                            35924       12049 ((-207135 2358896), (-20…\n2 Explosions/Remote viol…            11562       12208 ((-208804.4 2357274), (-…\n3 Violence against civil…             6478        6225 ((-206931.7 2359490), (-…\n4 Strategic developments               127       12126 ((-206931.7 2359490), (-…\n\n\nBefore doing so, let’s explore the nuances in the naming convention to understand a potential reason why conflict arises:\n\narea_names &lt;- state_region_sf %&gt;% \n  distinct(ST_RG) %&gt;% \n  pull(ST_RG)\n\narea_names\n\n[1] \"Region\"          \"State\"           \"Union Territory\"\n\n\n\nKey Differences\n\nState:\n\nRepresents areas predominantly inhabited by ethnic minorities, each with their own cultural and historical significance.\nOften involved in ethnic conflicts, seeking more autonomy.\n\nRegion:\n\nRepresents the Bamar-majority areas, which have more economic and political power.\nTypically less conflict-prone compared to states.\n\nUnion Territory:\n\nA special administrative area directly controlled by the central government (e.g., the capital region).\nNo local parliament or legislative autonomy."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#subsetting-the-data",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#subsetting-the-data",
    "title": "Take-Home Exercise 1",
    "section": "3.3 Subsetting the data:",
    "text": "3.3 Subsetting the data:\n\n3.3.1 Data Processing of subsetted dataset - MYANMAR.CSV\nWe’ll now process the data to see the corresponding fatalities with the different event types mentioned above, Battles, Explosions/Remote violence, Strategic developments and Violence against civilians.\nFrom this point forward, we will focus on the event_type of ‘Battles’ and sub_event_type of ‘Armed Clash’ as it would be interesting to analyse given that it has the most event counts and fatalities as aggregated in the code above:\n\nSince we are interested in deriving the quarterly KDE layers, we will convert the event_date column (currently in [chr] format), into a Date object that can be used for further analysis.\n\n\narmed_conflict_sf &lt;- armed_conflict %&gt;%\n  filter(event_type == \"Battles\") %&gt;% \n  filter(admin1 %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  dplyr::select(1:3, 5:8, 11, 15, 19, 20, 27, 29, 30)\n\nSave the intermediate dataset to rds:\n\nwrite_rds(armed_conflict_sf, \"data/rds/armed_conflict_sf.rds\")\n\nWe change the CRS to 32647 given that it is in the North Western Zone of Myanmar:\n\narmed_conflict_sf &lt;- read_rds(\"data/rds/armed_conflict_sf.rds\") %&gt;% \n  st_transform(crs = 32647) \n\n\nhead(armed_conflict_sf)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 146213 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 14\n  event_id_cnty event_date   year disorder_type event_type sub_event_type actor1\n  &lt;chr&gt;         &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n1 MMR64313      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n2 MMR64320      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n3 MMR64321      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n4 MMR64323      30 June 20…  2024 Political vi… Battles    Armed clash    PKDF …\n5 MMR64314      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n6 MMR64319      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n# ℹ 7 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\narmed_conflict_sf &lt;- armed_conflict_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) %&gt;% \n  mutate(quarter = paste0(\"Q\", quarter(event_date), \" \", year(event_date)))\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_conflict_battles &lt;- armed_conflict_sf %&gt;% \n  group_by(event_type, sub_event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n    filter(event_type == \"Battles\") %&gt;% \n    ungroup() \n\n`summarise()` has grouped output by 'event_type'. You can override using the\n`.groups` argument.\n\narmed_conflict_battles\n\nSimple feature collection with 3 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 5\n  event_type sub_event_type                      total_fatalities event_count\n  &lt;chr&gt;      &lt;chr&gt;                                          &lt;dbl&gt;       &lt;int&gt;\n1 Battles    Armed clash                                    16750        4681\n2 Battles    Government regains territory                       0           1\n3 Battles    Non-state actor overtakes territory               43          15\n# ℹ 1 more variable: geometry &lt;GEOMETRY [m]&gt;\n\n\n\ntotal_deaths &lt;- armed_conflict %&gt;% summarize(total_fatalities = sum(fatalities, na.rm=TRUE),\n            event_count = n())\n\ntotal_deaths\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 3\n  total_fatalities event_count                                          geometry\n             &lt;dbl&gt;       &lt;int&gt;                                  &lt;MULTIPOINT [m]&gt;\n1            54091       42608 ((-208804.4 2357274), (-207135 2358896), (-20693…\n\n\nOut of 54091 deaths for the whole of Myanmar for Jan 2021 - Jun 2024, encompassing all event_types and sub_event_types recorded, deaths from event_type == “Battles” , specifically the sub_event_type of “Armed clash” has lead to 34581 deaths in the states of Myanmar alone, accounting for ~63.9% of deaths.\n\n\n3.3.1 Data Processing of subsetted dataset - State_Region_sf\n\nstate3_sf &lt;- state_region_sf %&gt;% \n  filter(ST %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  st_transform(crs = 32647)\n\nstate3_sf\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -37628.21 ymin: 2086865 xmax: 308341.4 ymax: 3029739\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID       ST ST_PCODE  ST_RG          ST_MMR PCode_V\n1        8   Magway   MMR009 Region   မကွေးတိုင်းဒေသကြီး     9.4\n2        9 Mandalay   MMR010 Region မန္တလေးတိုင်းဒေသကြီး     9.4\n3       13  Sagaing   MMR005 Region  စစ်ကိုင်းတိုင်းဒေသကြီး     9.4\n                        geometry\n1 MULTIPOLYGON (((-1717.607 2...\n2 MULTIPOLYGON (((208184.3 26...\n3 MULTIPOLYGON (((275295.6 30...\n\n\n\nplot(state3_sf)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "title": "Take-Home Exercise 1",
    "section": "3.4 Filtering down to Battles, Armed Clash",
    "text": "3.4 Filtering down to Battles, Armed Clash\n\n3.4.1 Analyzing Densities based on fatalities and event_count\nCalculating area of each state in km^2:\n\nstate3_sf &lt;- state3_sf %&gt;% \n  mutate(area_km2 = st_area(geometry) / 1e6)\n\nDensity for Fatalities & Event_count in the area:\n\nevent_density_data &lt;- armed_conflict_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    total_events = n(),               \n    total_fatalities = sum(fatalities, na.rm = TRUE)  \n  ) %&gt;% \n  ungroup()\n\nMerge the event data with the state-level area data\n\nevent_density_data\n\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 4\n  admin1   total_events total_fatalities                                geometry\n  &lt;chr&gt;           &lt;int&gt;            &lt;dbl&gt;                        &lt;MULTIPOINT [m]&gt;\n1 Magway           1115             3910 ((-14448.48 2310133), (-11778.42 23314…\n2 Mandalay          602             1658 ((69197.66 2321843), (84966.22 2353705…\n3 Sagaing          2980            11225 ((-16397.05 2576482), (-13816.45 25496…\n\n\n\nevent_density_data &lt;- state3_sf %&gt;%\n  st_join(event_density_data, by = \"admin1\")\n\n\ncolnames(event_density_data)\n\n [1] \"OBJECTID\"         \"ST\"               \"ST_PCODE\"         \"ST_RG\"           \n [5] \"ST_MMR\"           \"PCode_V\"          \"area_km2\"         \"admin1\"          \n [9] \"total_events\"     \"total_fatalities\" \"geometry\"        \n\n\n\nevent_density_data &lt;- event_density_data %&gt;%\n  mutate(\n    event_density = total_events / area_km2,         \n    fatality_density = total_fatalities / area_km2    \n  )\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Plot event density\ntm_shape(event_density_data) +\n  tm_polygons(\"event_density\", title = \"Event Density (Events/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n# Plot fatality density\ntm_shape(event_density_data) +\n  tm_polygons(\"fatality_density\", title = \"Fatality Density (Fatalities/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.1 Subsetting the data:\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_clash_sf &lt;- armed_conflict_sf %&gt;% \n  filter(event_type == \"Battles\", sub_event_type ==\"Armed clash\") %&gt;% \n  group_by(quarter, event_type, sub_event_type, admin1, geometry, event_date) %&gt;% \n  summarize(\n      `FATALITIES` = sum(fatalities, na.rm=TRUE), \n      event_count = n()\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'quarter', 'event_type', 'sub_event_type',\n'admin1', 'geometry'. You can override using the `.groups` argument.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "title": "Take-Home Exercise 1",
    "section": "3.5 Converting sf Object to sp Object",
    "text": "3.5 Converting sf Object to sp Object\n\narmed_clash_sp &lt;- as(armed_clash_sf, \"Spatial\")\nstate3_sp &lt;- as(state3_sf, \"Spatial\")\n\n\ncolnames(armed_clash_sf)\n\n[1] \"quarter\"        \"event_type\"     \"sub_event_type\" \"admin1\"        \n[5] \"geometry\"       \"event_date\"     \"FATALITIES\"     \"event_count\"   \n\n\n\nunique_coordinates &lt;- armed_clash_sf %&gt;%\n  summarise(unique_count = n_distinct(geometry))  # Directly on geometry column\n\n# For total event count\ntotal_armed_clash_count &lt;- armed_clash_sf %&gt;% \n  summarise(event_count = sum(event_count, na.rm = TRUE))\n\n# Print results\nprint(unique_coordinates)\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  unique_count                                                          geometry\n         &lt;int&gt;                                                  &lt;MULTIPOINT [m]&gt;\n1         1547 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), …\n\nprint(total_armed_clash_count)  \n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  event_count                                                           geometry\n        &lt;int&gt;                                                   &lt;MULTIPOINT [m]&gt;\n1        4681 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), (…\n\n\nOut of 4681 Armed Clash conflict events, only 1547 unique coordinate points are recorded, indicating the that armed clashes occurred more than once for the coordinate points in general."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "3.6 Converting sp Object to spatstat’s ppp Format",
    "text": "3.6 Converting sp Object to spatstat’s ppp Format\n\nglimpse(armed_clash_sp)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 4594 obs. of  7 variables:\n  .. ..$ quarter       : chr [1:4594] \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" ...\n  .. ..$ event_type    : chr [1:4594] \"Battles\" \"Battles\" \"Battles\" \"Battles\" ...\n  .. ..$ sub_event_type: chr [1:4594] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Armed clash\" ...\n  .. ..$ admin1        : chr [1:4594] \"Magway\" \"Magway\" \"Magway\" \"Mandalay\" ...\n  .. ..$ event_date    : Date[1:4594], format: \"2021-03-30\" \"2021-03-31\" ...\n  .. ..$ FATALITIES    : num [1:4594] 1 1 4 1 2 4 6 1 2 5 ...\n  .. ..$ event_count   : int [1:4594] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:4594, 1:2] -4389 -4389 -6592 97374 101220 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -16397 2108023 255317 2987342\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\narmed_clash_ppp &lt;- as.ppp(armed_clash_sf)\n\nWarning in as.ppp.sf(armed_clash_sf): only first attribute column is used for\nmarks\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\nplot(armed_clash_ppp)\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#handling-duplicated-points",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#handling-duplicated-points",
    "title": "Take-Home Exercise 1",
    "section": "3.7 Handling Duplicated Points",
    "text": "3.7 Handling Duplicated Points\nWe check for duplication in the ppp object using the code chunk below. Before processing, we need to account for the fact that we have divided the data into quarters, which would result in the event_types at the same location being treated as separate points, but spatstat recognizing them as duplicates as they share the exact same coordinates.\n\nany(duplicated(armed_clash_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(armed_clash_ppp) &gt; 1)\n\n[1] 2503\n\n\nTo account for the number of locations which have more than one point event, we can use the code chunk below:\n\ncoords &lt;- st_coordinates(armed_clash_sf)\ncoords_df &lt;- as.data.frame(coords)\n\nlocation_counts &lt;- coords_df %&gt;% \n  group_by(X,Y) %&gt;% \n  summarize(count = n()) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'X'. You can override using the `.groups`\nargument.\n\nlocations_with_multiple_events &lt;- location_counts %&gt;% \n  filter(count &gt; 1)\n\ncount_locations_with_multiple_events &lt;- nrow(locations_with_multiple_events)\ncount_locations_with_multiple_events\n\n[1] 607\n\n\nOut of 1547 unique coordinate points, 515 have more than one conflict events occuring throughout the time period of Jan 2021 - Jun 2024, which could account for the 2503 duplicate count above.\n\ntmap_mode('view')\n\ntm_shape(armed_clash_sf) + \n  tm_dots(alpha = 0.7, size = 0.01)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "title": "Take-Home Exercise 1",
    "section": "3.8 Spotting Duplicate points from the map shown",
    "text": "3.8 Spotting Duplicate points from the map shown\nTo address the duplicate points, which largely arises due to the temporal aspect of the data we will use Jittering (adding a small perturbation to the duplicate points so that they do not occupy the exact same space)\nThe code chunk below implements the jittering approach.\n\narmed_clash_jitter &lt;- rjitter(armed_clash_ppp, \n                                 retry=TRUE, \n                                 nsim=1, \n                                 drop=TRUE)\n\nCheck for duplicated points in the data:\n\nany(duplicated(armed_clash_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Combining point events object and owin object",
    "text": "4.1 Combining point events object and owin object\nIn the next step of geospatial data wrangling, we extract armed conflict (armed clash as a subset of Battles) events located within Myanmar using this code chunk:\n\narmed_clash_myn_ppp &lt;- armed_clash_ppp[states3_owin]\n\nThe output combined both the point and polygon feature in one ppp object class as shown below:\n\nplot(armed_clash_myn_ppp, cex = 0.4, main=\"Spatial Distribution of Battles (Armed Clash) in Myanmar\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(armed_clash_myn_ppp)\n\nMarked planar point pattern:  4594 points\nAverage intensity 2.703969e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     4594 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 10179 vertices\nenclosing rectangle: [-37628.21, 308341.37] x [2086865.1, 3029739.1] units\n                     (346000 x 942900 units)\nWindow area = 1.69898e+11 square units\nFraction of frame area: 0.521"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#kernel-density-estimation",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nThis section with perform first-order SPPA and focus on :\n\nDeriving KDE for visualizing and exploring the intensity of point processes\nPerform Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour Statistics\n\n\n5.1.1 Computing KDE using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n\nkde_armed_clash_myn_bw &lt;- density(armed_clash_myn_ppp, \n                                     sigma=bw.diggle, \n                                     edge=TRUE,\n                                     kernel=\"gaussian\")\n\n\nplot(kde_armed_clash_myn_bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp)\nsigma_diggle\n\n   sigma \n84.63052 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, we need to rescale.ppp() unit from meter to kilometer to prevent interference in the scale as well as the distortion of the bandwith values:\n\narmed_clash_myn_ppp.km &lt;- rescale.ppp(armed_clash_myn_ppp, 1000, \"km\")\n\nWe re-run density() using the rescaled data and plot the output KDE map: (Note the difference between _bw and .bw to denote scaled data)\n\nkde_armed_clash_myn.bw &lt;- density(armed_clash_myn_ppp.km,\n                                     sigma=bw.diggle, \n                                     edge=TRUE, \n                                     kernel=\"gaussian\")\n\nplot(kde_armed_clash_myn.bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp.km)\nsigma_diggle\n\n     sigma \n0.08463052"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Working with different automatic bandwidth methods",
    "text": "6.1 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(armed_clash_myn_ppp.km)\n\n   sigma \n32.05992 \n\n\n\nbw.scott(armed_clash_myn_ppp.km)\n\n sigma.x  sigma.y \n16.84732 26.63314 \n\n\n\nbw.ppl(armed_clash_myn_ppp.km)\n\n   sigma \n3.674435 \n\n\n\nbw.diggle(armed_clash_myn_ppp.km)\n\n     sigma \n0.08463052 \n\n\nThe code chunk beow will be used to compare the output of using the different methods.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States CvL\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States Scott\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States ppl\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States diggleL\"))\n\n\n\n\n\n\n\n\nInterpretation: To summarize given the expectation of multiple clusters in th Myanmar conflict data, I’ll be predominantly utilizing bw.ppl(), well-suited for capturing multiple clusters without overfitting or underfitting, Baddeley et al. (2016). In the case where tighter, isolated clusters are preferred, bw.diggle() will be the sigma used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-kernel-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-kernel-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Working with different kernel methods",
    "text": "6.2 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Fixed vs Adaptive bandwidth for KDE",
    "text": "6.2 Fixed vs Adaptive bandwidth for KDE\nThe choice between automatic and adaptive bandwidth depends on the objectives and nature of our analysis.\n\n6.2.1 Computing KDE by using fixed bandwidth\n\n\n\n\n\n\nFixed Bandwidth\nAdaptive Bandwidth\n\n\n\n\nOffers Consistency across Space: Uniform smoothing across the entire study area.\nVarying Spatial Densities: Showing significant differences in conflict event densities (urban, rural ares), adaptive bandwidth could give a more nuanced understanding\n\n\nGeneral Hotspot Detection: To identify overall hotspots or conflict zones without too much detail\nLocal Hotspot Detection\n\n\n\nBased on our earlier analysis, we received a sigma value of 6. which results in minimal smoothing, meaning the KDE will show more localized patterns, however, this could lead to overfitting, where small clusters are exaggerated and conflict points are more prone to misinterpretation.\nCurrently, as I am unsure of what sigma degree to use, a good starting point would be to calculate the average or median Nearest Neighbour distance between points and use that as an initial value:\n\nmean_distance &lt;- mean(nndist(armed_clash_myn_ppp.km))\n\npar(mfrow=c(1,2))\nkde_diggle &lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.diggle)\nkde_ppl&lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.ppl)\nplot(kde_diggle)\nplot(kde_ppl)\n\n\n\n\n\n\n\n\n\n6.2.2 Computing KDE by using adaptive bandwidth\n\nkde_armed_clash_myn_adaptive &lt;- adaptive.density(armed_clash_myn_ppp.km, \n                                                 method=\"kernel\")\nplot(kde_armed_clash_myn_adaptive)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "title": "Take-Home Exercise 1",
    "section": "6.3 Fixed Bandwith for Quarterly KDE Analysis",
    "text": "6.3 Fixed Bandwith for Quarterly KDE Analysis\n\nKey Considerations for KDE Comparison Across Quarters:\n\nConsistency: For the KDEs to be comparable across different quarters, you need to use the same sigma for all quarters. This ensures that the degree of smoothing is consistent across the time periods, allowing you to make fair comparisons of density patterns over time.\nScale of Patterns: The chosen sigma should be large enough to reveal the relevant spatial patterns without introducing too much noise (from a very small sigma) or losing too much detail (from a very large sigma).\n\n\n\n\n\n\n\n\n\n\nInitial Sigma Value (0.07)\n\nMean Distance (1.6)\n\n\n\n\n\nAdvantages\nDisadvantages\nAdvantages\nDisadvantages\n\n\nCaptures local detail: This smaller sigma will emphasize fine-grained, local patterns, showing small clusters of events that may otherwise be smoothed over with a larger sigma.\nToo small for larger trends: A sigma of 0.18 may result in overfitting, where the KDE highlights every small cluster or isolated event.\nGood balance of local and global patterns: A sigma of 1.6 km (based on average nearest neighbor distance) strikes a balance between capturing local clusters and revealing broader spatial trends. It smooths out small noise while still showing meaningful clusters.\nLess local detail: While the 1.6 km sigma is a good balance, it may not capture very small-scale, localized patterns that might be relevant in specific analyses.\n\n\nGood for high-detail analysis: If your goal is to observe very specific spatial variations within each quarter, this smaller sigma might be more suitable.\nDifficult for comparisons: A very small sigma might highlight differences in individual points rather than overall trends, making it harder to compare the general distributions across quarters.\nBetter for comparisons: Since this sigma is derived from the overall spacing of points in your dataset, it reflects a more general spatial structure. This makes it more suitable for comparing KDE patterns across different quarters, as it ensures that the bandwidth is appropriate for both sparse and dense data, without overemphasizing small differences.\n\n\n\n\nContent adapted from Luc Anselin Spatial Econometrics.\nBased on this analysis, I am more inclined to go with the mean distance calculated for a Fixed Bandwidth, which we will use to compare Battles (Armed clash) across different quarters.\nSimple visualizations through graphs can help us get a better sense of the temporal aspect of when these armed clashes occurred. Since we are dealing with time:\n\narmed_clash_long &lt;- armed_clash_sf %&gt;%\n  arrange(desc(FATALITIES)) %&gt;% \n  pivot_longer(cols = c(FATALITIES, event_count), \n               names_to = \"measure\",             \n               values_to = \"value\")\n\n\nggplot(armed_clash_long, aes(x = value, \n                             y = factor(quarter, levels = sort(unique(quarter))))) + \n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"black\") +  \n  geom_text(data = armed_clash_long %&gt;%\n              group_by(quarter, measure) %&gt;% \n              filter(value == max(value)),  \n            aes(label = round(value, 1)),  \n            position = position_dodge(width = 0.9), \n            vjust = 0.5,  \n            hjust = 4.0,  \n            size = 3,    \n            color = \"white\") + \n  facet_wrap(~measure, scales = \"free_x\") + \n  labs(title = \"Total Fatalities and Event Count by Event Type per Quarter\", \n       x = \"Value\", \n       y = \"Quarter\") + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nquarters &lt;- unique(marks(armed_clash_myn_ppp))\n\npar(mfrow = c(2,2))\n\nfor (q in quarters){\n  quarter_ppp &lt;- armed_clash_myn_ppp[marks(armed_clash_myn_ppp)==q]\n  plot(quarter_ppp, main=paste(\"Spatial Distribution for\", q), cex = 0.5)\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object",
    "text": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object\n\nq1_2021_ppp &lt;- q1_2021_jitter[states3_owin]\nq2_2021_ppp &lt;- q2_2021_jitter[states3_owin]\nq3_2021_ppp &lt;- q3_2021_jitter[states3_owin]\nq4_2021_ppp &lt;- q4_2021_jitter[states3_owin]\n\n# For 2022\nq1_2022_ppp &lt;- q1_2022_jitter[states3_owin]\nq2_2022_ppp &lt;- q2_2022_jitter[states3_owin]\nq3_2022_ppp &lt;- q3_2022_jitter[states3_owin]\nq4_2022_ppp &lt;- q4_2022_jitter[states3_owin]\n\n# For 2023\nq1_2023_ppp &lt;- q1_2023_jitter[states3_owin]\nq2_2023_ppp &lt;- q2_2023_jitter[states3_owin]\nq3_2023_ppp &lt;- q3_2023_jitter[states3_owin]\nq4_2023_ppp &lt;- q4_2023_jitter[states3_owin]\n\n# For 2024\nq1_2024_ppp &lt;- q1_2024_jitter[states3_owin]\nq2_2024_ppp &lt;- q2_2024_jitter[states3_owin]"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#rescale.ppp",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#rescale.ppp",
    "title": "Take-Home Exercise 1",
    "section": "7.2 Rescale.ppp()",
    "text": "7.2 Rescale.ppp()\n\n# For 2021\nq1_2021_ppp.km = rescale.ppp(q1_2021_ppp, 1000, \"km\")\nq2_2021_ppp.km = rescale.ppp(q2_2021_ppp, 1000, \"km\")\nq3_2021_ppp.km = rescale.ppp(q3_2021_ppp, 1000, \"km\")\nq4_2021_ppp.km = rescale.ppp(q4_2021_ppp, 1000, \"km\")\n\n# For 2022\nq1_2022_ppp.km = rescale.ppp(q1_2022_ppp, 1000, \"km\")\nq2_2022_ppp.km = rescale.ppp(q2_2022_ppp, 1000, \"km\")\nq3_2022_ppp.km = rescale.ppp(q3_2022_ppp, 1000, \"km\")\nq4_2022_ppp.km = rescale.ppp(q4_2022_ppp, 1000, \"km\")\n\n# For 2023\nq1_2023_ppp.km = rescale.ppp(q1_2023_ppp, 1000, \"km\")\nq2_2023_ppp.km = rescale.ppp(q2_2023_ppp, 1000, \"km\")\nq3_2023_ppp.km = rescale.ppp(q3_2023_ppp, 1000, \"km\")\nq4_2023_ppp.km = rescale.ppp(q4_2023_ppp, 1000, \"km\")\n\n# For 2024\nq1_2024_ppp.km = rescale.ppp(q1_2024_ppp, 1000, \"km\")\nq2_2024_ppp.km = rescale.ppp(q2_2024_ppp, 1000, \"km\")\n\nIn the code chunk below, we will compute the KDE of each quarter of each year. bw.diggle method is used to derive the bandwidth of each KDE:\n\npar(mfrow = c(4, 4), mar = c(2, 2, 2, 2)) \n\n# 2021 plots\nplot(density(q1_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2021\")\n\nplot(density(q2_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2021\")\n\n\nplot(density(q3_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2021\")\n\nplot(density(q4_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2021\")\n\n\n# 2022 plots\nplot(density(q1_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2022\")\n\nplot(density(q2_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2022\")\n\n\nplot(density(q3_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2022\")\n\nplot(density(q4_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2022\")\n\n# 2023 plots\nplot(density(q1_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2023\")\n\nplot(density(q2_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2023\")\n\n\nplot(density(q3_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2023\")\n\nplot(density(q4_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2023\")\n\n# 2024 plots\nplot(density(q1_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2024\")\n\nplot(density(q2_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2024\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Take-Home Exercise 1",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(armed_clash_myn_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  armed_clash_myn_ppp.km\nR = 0.26742, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nInterpretation:\n\nThe R-value (0.37315) suggests that the points (armed clashes) are clustered—events tend to occur near each other.\nThe p-value (extremely low) provides very strong evidence against the null hypothesis of randomness. Thus, we conclude that the distribution of armed clashes is not random but instead shows a statistically significant clustered pattern.\n\n\n8.1.1 Clark and Evans Test: Q2 2021\n\nclarkevans.test(q2_2021_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2021_ppp.km\nR = 0.39442, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.2 Clark and Evans Test: Q2 2022\n\nclarkevans.test(q2_2022_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2022_ppp.km\nR = 0.41705, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.3 Clark and Evans Test: Q2 2023\n\nclarkevans.test(q2_2023_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2023_ppp.km\nR = 0.42746, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.4 Clark and Evans Test: Q2 2024\n\nclarkevans.test(q2_2024_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2024_ppp.km\nR = 0.34215, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nReasons to account for the observed pattern:\nBased on the R-value, where lower R values indicate strong clustering, it follows the reasons below:\n\nEscalation of Conflict in the hotspot Area: From 2021 onwards, the area of study has recently experience a military coup in February 2021, which was concentrated as the Tatmadaw (military) cracked down on urban areas and strategic areas. These mentioned states were areas where civilian resistance was particularly strong.\nImplication of Dispersion: This observation is further evidence by the quarterly summation of the deaths by state, where for the same quarters observed below: Q4 2021 - Q2 2022, there was a stark increase in the total_fatalities and event_count, marking the amplification of armed clash battles in the region, accounting for the strong clustering patterns observed from Q2 2021 which showed the strongest clustering out of the 4 quarters assessed and eventual distribution of the conflict towards other areas.\n\n\nquarterly_summary %&gt;% \n  arrange(desc(total_fatalities))\n\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   quarter total_fatalities event_count                                 geometry\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                         &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022             2494         504 ((-11051.37 2410853), (-10908.92 256130…\n 2 Q1 2022             1759         410 ((-13816.45 2549666), (-12383.46 255035…\n 3 Q4 2021             1674         340 ((-12383.46 2550351), (-10581.74 255763…\n 4 Q3 2022             1649         414 ((-14448.48 2310133), (-12383.46 255035…\n 5 Q4 2023             1502         432 ((-13753.92 2572123), (-10781.63 257609…\n 6 Q1 2023             1335         429 ((-9542.333 2376489), (-8200.325 237117…\n 7 Q2 2023             1291         372 ((-10160.54 2446554), (-8954.966 256734…\n 8 Q4 2022             1264         377 ((-10226.14 2411015), (-8954.966 256734…\n 9 Q3 2023              998         428 ((-10171.84 2571422), (-10106 2331539),…\n10 Q3 2021              759         179 ((-13645.89 2571086), (-9197.246 255207…\n11 Q1 2024              757         292 ((-16397.05 2576482), (-13753.92 257212…\n12 Q2 2024              726         279 ((-11281.63 2583340), (-10452.13 257881…\n13 Q2 2021              522         130 ((-13808.2 2533298), (-10226.14 2411015…\n14 Q1 2021               20           8 ((-10581.74 2557635), (-9197.246 255207…\n\n\n\nquarterly_summary_by_state &lt;- armed_clash_sf %&gt;%\n  group_by(quarter, admin1) %&gt;%  # Group by quarter\n  summarise(\n    total_fatalities = sum(FATALITIES, na.rm = TRUE), \n    event_count = n()                               \n  ) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\n`summarise()` has grouped output by 'quarter'. You can override using the\n`.groups` argument.\n\nprint(quarterly_summary_by_state)\n\nSimple feature collection with 42 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 42 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q2 2022 Magway               726         134 ((-11051.37 2410853), (-10745.5…\n10 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n# ℹ 32 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-to-owin-objects",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-to-owin-objects",
    "title": "Take-Home Exercise 1",
    "section": "9.2 Converting sf to owin objects",
    "text": "9.2 Converting sf to owin objects\n\nsagaing_owin = as.owin(sagaing)\nmagway_owin = as.owin(magway)\nmandalay_owin = as.owin(mandalay)\n\n\npar(mfrow=c(1,3))\nplot(sagaing_owin)\nplot(magway_owin)\nplot(mandalay_owin)\n\n\n\n\n\n\n\n\n\n9.2.1 Combining armed clash points and the study area\nBy using the code chunk below, we are able to extract armed clashes that is within the specific region to do our analysis later on.\n\narmed_clash_sng_ppp = armed_clash_jitter[sagaing_owin]\narmed_clash_mgy_ppp = armed_clash_jitter[magway_owin]\narmed_clash_mnd_ppp = armed_clash_jitter[mandalay_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\narmed_clash_sng.km = rescale(armed_clash_sng_ppp, 1000, \"km\")\narmed_clash_mgy.km = rescale(armed_clash_mgy_ppp, 1000, \"km\")\narmed_clash_mnd.km = rescale(armed_clash_mnd_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these 3 study areas and the locations of the battles (armed clashes).\n\npar(mfrow=c(1,3))\nplot(armed_clash_sng.km, main=\"Sagaing\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mgy.km, main=\"Magway\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mnd.km, main=\"Mandalay\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "9.6 Analysing Spatial Point Process Using G-Function",
    "text": "9.6 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I compute the G-function estimation by using Gest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n9.6.1 Computing G-function estimation\n\nG_SNG = Gest(armed_clash_sng_ppp, correction = \"best\")\nplot(G_SNG)\n\n\n\n\n\n\n\n\n\n\n9.6.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_SNG.csr)\n\n\n\n\n\n\n\n\n\n\n9.7 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.In this section, I compute the F-function estimation by using Fest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n\n9.7.1 Computing F-function estimation\n\nF_SNG = Fest(armed_clash_sng_ppp, correction=\"best\")\nplot(F_SNG)\n\n\n\n\n\n\n\n\n\n\n9.7.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Fest, correction = \"all\", nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(F_SNG.csr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Exercise 1",
    "section": "9.8 Analysing Spatial Point Process Using K-Function",
    "text": "9.8 Analysing Spatial Point Process Using K-Function\n\n9.8.1 Computing K-function estimation\n\nK_SNG = Kest(armed_clash_sng_ppp, correction = \"Ripley\")\nplot(K_SNG, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with K-fucntion\n\nK_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Kest, nsim = 30, rank = 1, glocal=TRUE)\n\n\nplot(K_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Exercise 1",
    "section": "9.9 Analysing Spatial Point Process Using L-Function",
    "text": "9.9 Analysing Spatial Point Process Using L-Function\n\n9.9.1 Computing L-function estimation\n\nL_SNG = Lest(armed_clash_sng_ppp, correction = \"Ripley\")\nplot(L_SNG, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n ### 9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with L-fucntion\n\nL_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Lest, nsim = 30, rank = 1, glocal=TRUE)\n\n\nplot(L_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n # 10. Spatio-Temporal Point Pattern Analysis\n\nhealthcare_sng &lt;- st_intersection(poi_sf,sagaing)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\nclass(armed_clash_sagaing)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nclass(healthcare_sng)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_basemap(server=\"OpenStreetMap.HOT\") + \ntm_basemap(server=\"Esri.WorldImagery\") + \n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \n\ntm_shape(armed_clash_sagaing) + \n  tm_dots(col = \"red\", size = 0.01, alpha = 0.6, title = \"Armed Battles\") + \n\ntm_shape(healthcare_sng) + \n  tm_dots(col = \"darkgreen\", size = 0.2, alpha = 0.7, title = \"Hospitals\") + \n\ntm_layout(\n  main.title = \"Depiction of Armed Clashes in Sagaing\",  # Title text\n  main.title.position = c(\"center\", \"top\"),  \n  legend.position = c(\"right\", \"bottom\"),  \n  legend.outside = TRUE,  \n  legend.outside.position = \"bottom\"  \n) + \n\n#\ntm_view(bbox = st_bbox(sagaing)) \n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:",
    "text": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:\n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \ntm_shape(armed_clash_sagaing) + \n  tm_dots(size = 0.1, alpha = 0.5) + \ntm_facets(by=\"quarter\", \n          free.coords=FALSE,\n          drop.units = TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "title": "Take-Home Exercise 1",
    "section": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground",
    "text": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground\nAlong with the quarterly visualization of the armed clashes, we see a corresponding fixation of attacks on the Southern point of the Sagaing, near the border of two other states in conflict (Madway and Mandalay). According to the article by Think Global Health:\n\nAttacks on Health Care in Myanmar, 2021 – 2023\nMyanmar’s health system is under attack countrywide, with the greatest number of attacks taking place in the Sagaing, Mandalay, and Yangon regions.\nAccording to Insecurity Insight, a nonprofit group collecting data on conflicts worldwide, nearly 1,200 attacks on health-care workers and facilities have taken place in the three years since the coup. Doctors, aid workers, and other medical personnel have been detained and arrested, targeted for allegedly taking care of protestors or participating in the civil disobedience movement (CDM).  \n\n\nquarterly_summary_sagaing &lt;- quarterly_summary_by_state %&gt;% \n  filter(admin1 == \"Sagaing\")\nquarterly_summary_sagaing  \n\nSimple feature collection with 14 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n * &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n10 Q3 2021 Sagaing              521         130 ((-13645.89 2571086), (-9197.24…\n11 Q1 2024 Sagaing              451         190 ((-16397.05 2576482), (-13753.9…\n12 Q2 2021 Sagaing              387          90 ((-13808.2 2533298), (-9514.18 …\n13 Q2 2024 Sagaing              348         133 ((-11281.63 2583340), (-10452.1…\n14 Q1 2021 Sagaing               13           4 ((-10581.74 2557635), (-9197.24…\n\n\nCoincidentally (or not), the quarters with the higest number of recorded fatalities fall between Q4 2021 - Q3 2022, where we will focus the computation of STKDE\n\narmed_clash_sagaing\n\nSimple feature collection with 2903 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10 Q1 2022 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Day of Year",
    "text": "10.2 Computing STKDE by Day of Year\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;% \n  filter(admin1 == \"Sagaing\") %&gt;% \n  filter(quarter %in% c(\"Q4 2021\", \"Q1 2022\", \"Q2 2022\", \"Q3 2022\")) %&gt;% \n  mutate(dayYear = yday(event_date)) %&gt;% \n  mutate(monthNum = month(event_date)) %&gt;% \n  mutate(monthFac = month(event_date,\n                          label=TRUE,\n                          abbr=FALSE))\narmed_clash_year_sf\n\nSimple feature collection with 1119 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2863190\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,119 × 11\n   quarter event_type sub_event_type admin1           geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;         &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-02-01\n 2 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-03-24\n 3 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-15\n 4 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-23\n 5 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-03-18\n 6 Q1 2022 Battles    Armed clash    Sagai…    (95831 2496973) 2022-01-11\n 7 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-01-24\n 8 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-02-04\n 9 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-01-12\n10 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-02-05\n# ℹ 1,109 more rows\n# ℹ 5 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, dayYear &lt;dbl&gt;,\n#   monthNum &lt;dbl&gt;, monthFac &lt;ord&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\narmed_clash_yday_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(dayYear) %&gt;% \n  as.ppp()\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_yday_owin &lt;- armed_clash_yday_ppp[sagaing_owin]\nsummary(sagaing_yday_owin)\n\nMarked planar point pattern:  1119 points\nAverage intensity 1.192011e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    91.0   172.0   176.3   260.5   365.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_yday_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp(sagaing_yday_owin)\n\nInitialising...Done.\nOptimising...\nh = 26068.43 \b; lambda = 29.14375 \nh = 28675.27 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 2635.987 \nh = 26720.14 \b; lambda = 1332.565 \nh = 27371.85 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 1332.565 \nh = 26394.29 \b; lambda = 680.8545 \nh = 26557.21 \b; lambda = 354.9991 \nh = 26638.68 \b; lambda = 192.0715 \nh = 26679.41 \b; lambda = 110.6076 \nh = 26699.78 \b; lambda = 69.87568 \nDone.\n\n\n          h      lambda \n26699.77626    69.87568 \n\n\n\nkde_yday &lt;- spattemp.density(sagaing_yday_owin,\n                             h=26699.77626,\n                             lambda=69.87568)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 26699.78 (spatial)\n  lambda = 69.8757 (temporal)\n\nNo. of observations\n  1119 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 365]\n\nEvaluation\n  128 x 128 x 365 trivariate lattice\n  Density range: [1.553021e-30, 1.912896e-13]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:365\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#saving-intermediate-datasets",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#saving-intermediate-datasets",
    "title": "Take-Home Exercise 1",
    "section": "10.3 Saving Intermediate Datasets:",
    "text": "10.3 Saving Intermediate Datasets:\n\nwrite_rds(healthcare_sng, \"data/rds/healthcare_sng.rds\")\nwrite_rds(quarterly_summary, \"data/rds/quarterly_summary.rds\")\nwrite_rds(quarterly_summary_by_state, \"data/rds/quarterly_summary_by_state.rds\")\nwrite_rds(state3_sf, \"data/rds/state3_sf.rds\")\nwrite_rds(event_density_data, \"data/rds/event_density_data.rds\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#key-findings",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#key-findings",
    "title": "Take-Home Exercise 1",
    "section": "Key Findings:",
    "text": "Key Findings:\n\nClustering of Armed Clashes:\n\nWithin Q4 2021 to Q2 2022, with R-values indicating a highly clustered distribution of conflict events. This clustering is particularly evident in Sagaing, Mandalay, and Magway, where much of the conflict was concentrated.\nThe clustering can be attributed to the ongoing civil resistance following the military coup in Myanmar in 2021, with Sagaing experiencing heavily intense conflicts. This has prompted me to research further, finding that: \n\nThe area is prone to natural disasters, being located at the ‘Sagaing fault’ and is already a natural hotspot for refugee / displaced individuals due to the socio-economic plight it has faced, as part of the ‘Dry Zone’ \nMilitary Conscription drives has ‘provoked reverse migration, pushing young men who fled Myanmar’s war-torn Dry Zone to give up their livellihoods and risk their lives to return home’ \n\n\nKernel Density Estimation:\n\nKDE analysis allowed us to visualize the intensity of conflict over time. Using fixed bandwidth (e.g., bw.ppl()), we observed that while the intensity of conflict was concentrated in certain regions, particularly in Sagaing, there was a gradual dispersion of conflict events over time into neighboring regions such as Magway and Mandalay.\nThe choice of bandwidth (sigma) and kernel function was important for interpreting both local and broader trends in armed clashes. The Gaussian kernel was effective in showing overall trends, while smaller sigmas captured finer details, especially in high-density areas. Initially, I actually went with bw.diggle instead of bw.ppl bandwidth as I thought bw.diggle() is always the best choice for detecting clusters, and bw.ppl is better for smoothing over broader areas. However, this interpretation may be overly simplistic. \n\nGoing by bw.diggle, I obtained a really small sigma value which might have been a sign of overfitting. Furthermore, because of the plotting and the movement of the conflict over time, we ought to expect multiple clsuter, which implied bw.ppl was a better fit. \n\n\nSpatio-temporal KDE:\n\nThe STKDE provided a nuanced view of how conflict events evolved quarter by quarter, confirming that some periods saw a stark increase in fatalities, such as Q4 2021 through Q2 2022.\nThe temporal analysis highlighted the cyclical nature of the conflict, with periods of intense violence followed by temporary dispersions or shifts in conflict zones.\n\n2nd-Order Spatial Point Pattern Analysis:\n\nThe use of G-, F-, K-, and L-functions provided further confirmation of the non-random distribution of armed clashes. These functions indicated significant spatial interaction among the conflict points, suggesting that the locations of armed clashes were influenced by proximity to other events, reflecting the complex nature of the conflict. 2nd Point Pattern Analysis allowed me to research further on the conflicting factors that affected (random) spatial distribution of armed conflict, and found the unfortunate but deliberate choice to target civilian institutions like hospitals.\n\nHealthcare as a Battleground:\n\nBy overlaying points of interest (POI) such as hospitals and healthcare facilities onto the map, we observed that many clashes occurred near key civilian infrastructure. This aligns with findings that healthcare has become a battleground in Myanmar, particularly in Sagaing and surrounding regions. Attacks on healthcare facilities have not only disrupted medical services but also contributed to the broader humanitarian crisis in the region."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "import geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\nQuestion: If the spatial pattern of a selected development indicator (GDP per capita) of Hunan Province, PRC is randomly geographically distribute. If the answer is no, then we investigate for\n\nSigns of spatial clustering. If there are signs, we ask:\nWhere are these Clusters located?\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#objectives",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#objectives",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#the-analytical-question",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#the-analytical-question",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "1.2 The analytical question",
    "text": "1.2 The analytical question\nQuestion: If the spatial pattern of a selected development indicator (GDP per capita) of Hunan Province, PRC is randomly geographically distribute. If the answer is no, then we investigate for\n\nSigns of spatial clustering. If there are signs, we ask:\nWhere are these Clusters located?\n\n\n1.2.1 The Study Area and the Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n1.2.2 Setting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-shapefile-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-shapefile-into-r-environment",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.1 Import shapefile into R environment",
    "text": "2.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-csv-file-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-csv-file-into-r-environment",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.2 Import csv file into R environment",
    "text": "2.2 Import csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ncolnames(hunan2012)\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\n\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\""
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#performing-relational-join",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#performing-relational-join",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.3 Performing Relational Join",
    "text": "2.3 Performing Relational Join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, hunan2012)\n\nJoining with `by = join_by(County)`\n\n\n\ncolnames(hunan)\n\n [1] \"NAME_2\"      \"ID_3\"        \"NAME_3\"      \"ENGTYPE_3\"   \"Shape_Leng\" \n [6] \"Shape_Area\"  \"County\"      \"City\"        \"avg_wage\"    \"deposite\"   \n[11] \"FAI\"         \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"      \n[16] \"GIO\"         \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"        \n[21] \"EmpR\"        \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"  \n[26] \"Household_R\" \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"      \n[31] \"Agri\"        \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n[36] \"geometry\"   \n\n\n\nhunan &lt;- hunan %&gt;% \n    select(1:3, 7, 15, 16, 31, 32, 33)\n\n\ncolnames(hunan)\n\n [1] \"NAME_2\"   \"ID_3\"     \"NAME_3\"   \"County\"   \"GDPPC\"    \"GIO\"     \n [7] \"Agri\"     \"Service\"  \"Disp_Inc\" \"geometry\""
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualizing-regional-development-indicator",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualizing-regional-development-indicator",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.4 Visualizing Regional Development Indicator",
    "text": "2.4 Visualizing Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) + \n  tm_fill(\"GDPPC\", \n          n = 5,\n          style = \"equal\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) + \n  tm_fill(\"GDPPC\", \n          n = 5, \n          style=\"quantile\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Equal quantile classfication\")\n\ntmap_arrange(equal, quantile,\n             asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "3.1 Computing Contiguity Spatial Weights",
    "text": "3.1 Computing Contiguity Spatial Weights\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nweight_matrix_queen &lt;- poly2nb(hunan, queen=TRUE)\nsummary(weight_matrix_queen)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\ncentroids &lt;- st_centroid(st_geometry(hunan))\ncoords &lt;- st_coordinates(centroids)\n\nnb_lines &lt;- nb2lines(weight_matrix_queen, coords = coords, as_sf = TRUE)\n\ntm_shape(hunan) + \n  tm_borders(\"grey\") + \n  tm_shape(nb_lines) + \n  tm_lines(col = \"blue\", lwd = 2) + \n  tm_layout(title = \"Queen Contiguity Neighbors\", frame = FALSE)\n\nWarning: Currect projection of shape nb_lines unknown. Long-lat (WGS84) is\nassumed."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "3.2 Row-standardised weights matrix",
    "text": "3.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrow_standardised_weight_matrix &lt;- nb2listw(weight_matrix_queen,\n                                           style=\"W\",\n                                           zero.policy=TRUE)\nrow_standardised_weight_matrix\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#morans-i-test",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#morans-i-test",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.1 Moran’s I test",
    "text": "4.1 Moran’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran_result &lt;- moran.test(hunan$GDPPC,\n           list=row_standardised_weight_matrix,\n           zero.policy=TRUE,\n           na.action=na.omit)\n\n\nStatistical Conclusion:\nGiven the positive Moran’s I value of 0.3007 and the extremely small p-value of 1.095×10−61.095 ^{-6}1.095×10−6, we can reject the null hypothesis of no spatial autocorrelation. This means:\n\nConclusion: There is statistically significant evidence of positive spatial autocorrelation in GDP per capita across counties in Hunan Province.\nInterpretation: Regions (counties) with similar GDP per capita tend to cluster geographically. In other words, high GDP per capita regions are near other high GDP per capita regions, and similarly for low GDP per capita regions."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-morans-i",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-morans-i",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Computing Monte Carlo Moran’s I",
    "text": "4.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nb_permutation = moran.mc(hunan$GDPPC,\n                        listw = row_standardised_weight_matrix,\n                        nsim = 999, \n                        zero.policy = TRUE, \n                        na.action = na.omit)\n\nb_permutation\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: row_standardised_weight_matrix  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nThe use of set.seed(1234) in your code is important for ensuring reproducibility of the results, especially when performing random simulations, such as a permutation test in Moran’s I analysis. If you omit set.seed(), every time you run moran.mc() (or any function involving randomness), you may get slightly different results because the random number generator will start from a different point each time. This can make it difficult to reproduce results exactly."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-morans-i",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-morans-i",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.3 Visualising Monte Carlo Moran’s I",
    "text": "4.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(b_permutation$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(b_permutation$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(b_permutation$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(b_permutation$res,\n     freq=TRUE,\n     breaks=20,\n     xlab=\"Simulated Moran's I\")\nabline(v=0, col=\"red\")\n\n\n\n\n\n\n\n\n\nStatistical Observation from the Histogram\nThe histogram represents the distribution of Moran’s I statistics that were generated through a Monte Carlo permutation test. Here’s what we can observe from the plot:\n\nSimulated Moran’s I Distribution:\n\nThe majority of the simulated Moran’s I values fall near zero, indicating that in the absence of spatial autocorrelation (under random permutations), the expected Moran’s I is close to zero. This makes sense because a Moran’s I value close to zero typically indicates no spatial autocorrelation (random distribution of the data).\n\nRed Line (Observed Moran’s I):\n\nThe red vertical line represents the observed Moran’s I statistic from the actual data (before the random permutations). If this value is far from zero, it suggests evidence of spatial autocorrelation.\nIn this case, the observed Moran’s I is positive and relatively large compared to the values in the simulated distribution, which suggests significant positive spatial autocorrelation in the data.\n\nSince the observed Moran’s I is far from the distribution’s center (near zero) and falls outside the simulated distribution, it is statistically unlikely that the observed spatial autocorrelation is due to random chance. This implies significant positive spatial autocorrelation in the data (i.e., similar values are spatially clustered together).\n\n\n\nPlotting with ggplot2:\n\nsimulated_values &lt;- b_permutation$res  # Replace with actual data\n\ndf &lt;- data.frame(simulated_moransI = simulated_values)\nobserved_moransI &lt;- b_permutation$observed  # Extract the single observed Moran's I\n\nggplot(df, aes(x = simulated_moransI)) +\n  geom_histogram(binwidth = 0.02, fill = \"grey\", color = \"black\") +\n  geom_vline(xintercept = observed_moransI,  # Use only the observed Moran's I value\n             color = \"red\", linetype = \"solid\", size = 1.5) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gearys-c-test",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gearys-c-test",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.1 Geary’s C test",
    "text": "5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=row_standardised_weight_matrix)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: row_standardised_weight_matrix   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nStatistical Interpretation:\nConclusion:\n\nSince Geary’s C is less than 1 and the p-value is very small, we reject the null hypothesis of random spatial distribution.\nConclusion: There is statistically significant evidence of positive spatial autocorrelation in GDP per capita across counties in Hunan Province. This means that neighboring regions tend to have similar GDP per capita values, with little local variation between them.\nThe clustering of similar values suggests that the GDP per capita is not randomly distributed but forms spatial clusters, with high GDP regions close to other high GDP regions, and similarly for low GDP regions."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-gearys-c",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-gearys-c",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.2 Computing Monte Carlo Geary’s C",
    "text": "5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nb_permutation&lt;-geary.mc(hunan$GDPPC,\n                        listw=row_standardised_weight_matrix,\n                        nsim=999)\nb_permutation\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: row_standardised_weight_matrix  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nStatistical Interpretation:\n\nObserved Geary’s C statistic:\n\nThe observed Geary’s C value is 0.690720.690720.69072, which is less than 1 (the expected value under spatial randomness). This indicates positive spatial autocorrelation — neighboring regions tend to have similar GDP per capita values.\n\nMonte Carlo Simulations:\n\nThe Monte Carlo test was performed by generating 999 random permutations of the data to simulate Geary’s C under the null hypothesis (spatial randomness).\nThe observed rank = 1 means that the observed Geary’s C is lower than all the values generated from the random permutations. This suggests that the observed spatial clustering is stronger than what would be expected by random chance.\n\np-value:\n\nThe p-value of 0.001 is very small, indicating that the likelihood of obtaining an observed Geary’s C value this extreme under the null hypothesis of spatial randomness is extremely low (1 in 1000).\nThis very small p-value provides strong evidence to reject the null hypothesis of no spatial autocorrelation.\n\n\n\n\nConclusion:\n\nConclusion: The Monte Carlo simulation confirms that the observed Geary’s C statistic is statistically significant and provides strong evidence of positive spatial autocorrelation in GDP per capita across Hunan Province.\nThis result indicates that neighboring regions tend to have similar GDP per capita values, and this clustering pattern is unlikely to have occurred by chance.\nThe observed Geary’s C value being ranked 1st out of 1000 simulations further reinforces the conclusion that there is a strong and statistically significant clustering of similar GDP values in space."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-gearys-c",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-gearys-c",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.3 Visualising Monte Carlo Geary’s C",
    "text": "5.3 Visualising Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(b_permutation$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(b_permutation$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(b_permutation$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(b_permutation$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"blue\") \n\n\n\n\n\n\n\n\n\nStatistical Interpretation:\n\nConclusion: The Monte Carlo simulation confirms that the observed Geary’s C statistic is statistically significant and provides strong evidence of positive spatial autocorrelation in GDP per capita across Hunan Province.\nThis result indicates that neighboring regions tend to have similar GDP per capita values, and this clustering pattern is unlikely to have occurred by chance.\nThe observed Geary’s C value being ranked 1st out of 1000 simulations further reinforces the conclusion that there is a strong and statistically significant clustering of similar GDP values in space."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-morans-i-correlogram",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-morans-i-correlogram",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "6.1 Compute Moran’s I Correlogram",
    "text": "6.1 Compute Moran’s I Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\n\nmoran_i_corr &lt;- sp.correlogram(weight_matrix_queen,\n                               hunan$GDPPC, \n                               order=6,\n                               method=\"I\",\n                               style=\"W\")\nplot(moran_i_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(moran_i_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nStatistical Observation: General Patterns\n\nLags 1-3: At closer spatial lags, there is significant positive spatial autocorrelation, indicating clustering of similar GDP per capita values in neighboring regions.\nLag 4: By the fourth lag, the spatial autocorrelation weakens and becomes insignificant, suggesting a loss of spatial dependence at this distance.\nLags 5-6: At further distances, significant negative spatial autocorrelation emerges, indicating that regions far apart from one another tend to have dissimilar GDP per capita values (high GDP regions tend to be surrounded by low GDP regions, and vice versa).\n\nThe spatial correlogram for Moran’s I shows that GDP per capita in Hunan Province exhibits positive spatial autocorrelation at shorter distances (neighboring regions), while negative spatial autocorrelation is observed at larger distances. This suggests that GDP per capita is clustered in space at close range but becomes dissimilar as the distance between regions increases."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-gearys-c-correlogram",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-gearys-c-correlogram",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "6.2 Compute Geary’s C Correlogram",
    "text": "6.2 Compute Geary’s C Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\ngeary_c_corr &lt;- sp.correlogram(weight_matrix_queen,\n                               hunan$GDPPC,\n                               order=6, \n                               method=\"C\",\n                               style=\"W\")\n\nplot(geary_c_corr)\n\n\n\n\n\n\n\n\n\nprint(geary_c_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nSummary of Spatial Patterns:\n\nLags 1 and 2: Show significant positive spatial autocorrelation, meaning neighboring regions are similar in terms of GDP per capita.\nLags 3 and 4: Show no significant spatial autocorrelation, indicating that the similarity of GDP values between regions fades as the distance increases.\nLag 5: Shows significant negative spatial autocorrelation, meaning that regions farther apart tend to have dissimilar GDP per capita values.\nLag 6: The negative autocorrelation weakens and becomes insignificant."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html",
    "title": "Chapter 10: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data.\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package.\n\n\n\n\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#objectives",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#objectives",
    "title": "Chapter 10: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data.\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#analysis-question",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#analysis-question",
    "title": "Chapter 10: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-local-morans-i",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-local-morans-i",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "1.1 Mapping the Local Moran’s I",
    "text": "1.1 Mapping the Local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\ncolnames(local_moran_i)\n\n[1] \"Ii\"             \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"          \n[5] \"Pr(z != E(Ii))\"\n\n\n\nhunan.local_moran_i &lt;- cbind(hunan,local_moran_i) %&gt;%\n  rename(Pr.Ii = `Pr.z....E.Ii..`)\n\n\n1.1.1 Mapping the Local Moran’s I Values\n\ntm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n1.1.2 Mapping the Local Moran’s p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n1.1.3 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocal_moran_i.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col=\"Ii\",\n          style=\"pretty\",\n          title=\"local moran statistics\") + \n  tm_borders(alpha = 0.3)\n\npvalue.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col = \"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(local_moran_i.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-lisa-cluster-map",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-lisa-cluster-map",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.0 Creating LISA Cluster Map",
    "text": "2.0 Creating LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n2.1 Plotting Moran Scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, row_standardised_weight_matrix,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n2.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, row_standardised_weight_matrix,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n2.3 Preparing LISA map classes\nSteps to prepare a LISA cluster map\n\nInitalize quadrant into vector\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\nCenter the local Moran’s around the mean\nSet a statistical significance for the local Moran\nThe next four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\nLastly, places non-significant Moran in the category 0.\n\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(local_moran_i))\nhunan$lag_GDPPC &lt;- lag.listw(row_standardised_weight_matrix, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- local_moran_i[,1]   \nsignif &lt;- 0.05      \n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[local_moran_i[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#plotting-lisa-map",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#plotting-lisa-map",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "3.0 Plotting LISA Map",
    "text": "3.0 Plotting LISA Map\n\nhunan.local_moran_i$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.local_moran_i$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"quadrant\", \n          style = \"pretty\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\nlocal_moran_i.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col=\"Ii\",\n          style=\"pretty\",\n          title=\"local moran statistics\") + \n  tm_borders(alpha = 0.3)\n\npvalue.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col = \"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(local_moran_i.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#getis-and-ords-g-statistics",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#getis-and-ords-g-statistics",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.1 Getis and Ord’s G-Statistics",
    "text": "4.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#deriving-distance-based-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#deriving-distance-based-weight-matrix",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Deriving distance-based weight matrix",
    "text": "4.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n4.2.1 Deriving the centroid\nObtain longtitude & latitude\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n4.2.2 Determine the cut-off distance\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n4.2.3 Computing fixed distance weight matrix\n\nweight_matrix_d62 &lt;- dnearneigh(coords, 0,62, longlat=TRUE)\nweight_matrix_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(weight_matrix_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Computing adaptive distance weight matrix",
    "text": "4.2 Computing adaptive distance weight matrix\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-fixed-distance",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-fixed-distance",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.1 Gi Statistics using fixed distance",
    "text": "5.1 Gi Statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.2 Mapping Gi values with fixed distance weights",
    "text": "5.2 Mapping Gi values with fixed distance weights\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-adaptive-distance",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-adaptive-distance",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.3 Gi statistics using adaptive distance",
    "text": "5.3 Gi statistics using adaptive distance\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.4 Mapping Gi values with adaptive distance weights",
    "text": "5.4 Mapping Gi values with adaptive distance weights\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Quarter",
    "text": "10.2 Computing STKDE by Quarter\nCreating: Q1 2021 - Q2 2024 using the interval() function\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;\n\n\n\nnrow(armed_clash_sf)\n\n[1] 4594\n\n\n\nreference_date &lt;- min(armed_clash_sf$event_date, na.rm = TRUE)\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;%\n  mutate(quarter = quarter(event_date)) %&gt;%  \n  mutate(year = year(event_date)) %&gt;% \n  mutate(quarterInterval = (year - 2021) * 4 + quarter) %&gt;%   \n  filter(admin1 == \"Sagaing\")\n\n\narmed_clash_year_sf\n\nSimple feature collection with 2903 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 10\n   quarter event_type sub_event_type admin1            geometry event_date\n *   &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1       1 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2       1 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3       1 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4       1 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5       1 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6       1 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7       1 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8       1 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9       1 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10       1 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 4 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, year &lt;dbl&gt;,\n#   quarterInterval &lt;dbl&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\nsummary(armed_clash_year_sf$quarterInterval)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   8.107  11.000  14.000 \n\n\n\narmed_clash_quarter_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(quarterInterval) \n\n\narmed_clash_quarter_ppp &lt;- as.ppp(armed_clash_quarter_ppp)\narmed_clash_quarter_ppp\n\nMarked planar point pattern: 2903 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-16397.05, 252995.48] x [2393568.1, 2987342.4] units\n\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_quarter_owin &lt;- armed_clash_quarter_ppp[sagaing_owin]\nsummary(sagaing_quarter_owin)\n\nMarked planar point pattern:  2903 points\nAverage intensity 3.09241e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   8.107  11.000  14.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_quarter_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp_result &lt;- BOOT.spattemp(sagaing_quarter_owin)\n\nInitialising...Done.\nOptimising...\nh = 22600.7 \b; lambda = 0.765522 \nh = 24860.77 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 2260.835 \nh = 23165.71 \b; lambda = 1130.8 \nh = 23730.73 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 1130.8 \nh = 22883.21 \b; lambda = 565.7829 \nh = 23165.71 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 565.7829 \nh = 22741.95 \b; lambda = 283.2742 \nh = 22883.21 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 283.2742 \nh = 22671.32 \b; lambda = 142.0199 \nh = 22741.95 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 142.0199 \nh = 22636.01 \b; lambda = 71.3927 \nh = 22653.67 \b; lambda = 36.07911 \nh = 22662.5 \b; lambda = 18.42232 \nh = 22666.91 \b; lambda = 9.593919 \nh = 22669.12 \b; lambda = 5.179721 \nh = 22670.22 \b; lambda = 2.972621 \nh = 22670.77 \b; lambda = 1.869072 \nh = 22671.05 \b; lambda = 1.317297 \nh = 22671.6 \b; lambda = 0.2137472 \nh = 22671.19 \b; lambda = 1.041409 \nh = 22671.46 \b; lambda = 0.4896346 \nh = 22671.26 \b; lambda = 0.9034657 \nh = 22671.39 \b; lambda = 0.6275783 \nh = 22671.36 \b; lambda = 0.6965502 \nh = 22671.29 \b; lambda = 0.8344939 \nh = 22671.34 \b; lambda = 0.7310361 \nh = 22530.09 \b; lambda = 0.7310361 \nh = 22424.15 \b; lambda = 0.7137931 \nh = 22353.51 \b; lambda = 0.7482791 \nh = 22194.59 \b; lambda = 0.7569005 \nh = 22018.05 \b; lambda = 0.7051716 \nh = 21726.73 \b; lambda = 0.6749965 \nh = 21497.17 \b; lambda = 0.7181039 \nh = 21033.68 \b; lambda = 0.7202592 \nh = 20565.81 \b; lambda = 0.6383552 \nh = 20973.01 \b; lambda = 0.6679915 \nh = 19872.76 \b; lambda = 0.6836179 \nh = 18945.78 \b; lambda = 0.6879287 \nh = 19413.64 \b; lambda = 0.7698328 \nh = 18837.56 \b; lambda = 0.8355716 \nh = 16749.66 \b; lambda = 0.803241 \nh = 14607.65 \b; lambda = 0.8447319 \nh = 14499.43 \b; lambda = 0.9923748 \nh = 12276.25 \b; lambda = 1.144598 \nh = 8046.338 \b; lambda = 1.153758 \nh = 10744.14 \b; lambda = 1.074211 \nh = 8412.744 \b; lambda = 1.374077 \nh = 9961.47 \b; lambda = 1.241741 \nh = 8429.365 \b; lambda = 1.171355 \nh = 11314.53 \b; lambda = 1.151287 \nh = 10531.85 \b; lambda = 1.318817 \nh = 10584.93 \b; lambda = 1.257665 \nh = 9231.869 \b; lambda = 1.348119 \nh = 10793.86 \b; lambda = 1.200495 \nDone.\n\nBOOT.spattemp_result\n\n           h       lambda \n10793.863014     1.200495 \n\n\n\nkde_quarter &lt;- spattemp.density(sagaing_quarter_owin,\n                             h=BOOT.spattemp_result[1] ,\n                             lambda=BOOT.spattemp_result[2])\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_quarter)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 10793.86 (spatial)\n  lambda = 1.2005 (temporal)\n\nNo. of observations\n  2903 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [1.577878e-45, 1.108189e-11]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:14\n\nquarter_labels &lt;- c(\"Q1 2021\", \"Q2 2021\", \"Q3 2021\", \"Q4 2021\",\n                    \"Q1 2022\", \"Q2 2022\", \"Q3 2022\", \"Q4 2022\",\n                    \"Q1 2023\", \"Q2 2023\", \"Q3 2023\", \"Q4 2023\",\n                    \"Q1 2024\", \"Q2 2024\")\n\nn_cols &lt;-4 \nbatch_size &lt;- 2\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_quarter, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste(quarter_labels[i]))\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemp_gif &lt;- \"armed_clash.gif\"\n\n# Check if the GIF already exists\nif (!file.exists(temp_gif)) {\n  # If the GIF doesn't exist, create and save it\n  saveGIF({\n    for(i in tims){\n      plot(kde_quarter, i, \n           override.par=FALSE, \n           fix.range=TRUE,\n           main=paste('KDE at', quarter_labels[i]))\n    }\n  }, movie.name = temp_gif, interval = 0.01, ani.width=700, ani.height=500)\n} else {\n  # If the GIF already exists, skip the saving process\n  message(\"GIF already exists, skipping save.\")\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "By the end to this in-ckass exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package.\nGWModel"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#import-shapefile-into-r-environment",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#import-shapefile-into-r-environment",
    "title": "In-class Exercise 06",
    "section": "2.1 Import shapefile into R environment",
    "text": "2.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#import-csv-file-into-r-environment",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#import-csv-file-into-r-environment",
    "title": "In-class Exercise 06",
    "section": "2.2 Import csv file into R environment",
    "text": "2.2 Import csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ncolnames(hunan2012)\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\n\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#performing-relational-join",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#performing-relational-join",
    "title": "In-class Exercise 06",
    "section": "2.3 Performing Relational Join",
    "text": "2.3 Performing Relational Join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan_GDPPC &lt;- left_join(hunan,hunan2012) %&gt;% \n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n#hunan &lt;- hunan %&gt;% \n  #select(1:4, 7, 15)\n  #select(1:4, 7, 15, 16, 31, 32, 33)\n\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#computing-contiguity-spatial-weights",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 06",
    "section": "3.1 Computing Contiguity Spatial Weights",
    "text": "3.1 Computing Contiguity Spatial Weights\n\nwm_q &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry), \n         wt = st_weights(nb, style=\"W\"),.before = 1)\n\n*st_weights provide tree arguments :\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#computing-global-morani",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#computing-global-morani",
    "title": "In-class Exercise 06",
    "section": "Computing Global Moran’I",
    "text": "Computing Global Moran’I\n\nmoranI &lt;- global_moran(wm_q$GDPPC, \n                       wm_q$nb, \n                       wm_q$wt)\n                       \nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#performing-global-morani-test",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#performing-global-morani-test",
    "title": "In-class Exercise 06",
    "section": "Performing Global Moran’I test",
    "text": "Performing Global Moran’I test\n\nglobal_moran_test(wm_q$GDPPC, \n                  wm_q$nb, \n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\np-value : smaller than 0.05. There is enough statistical evidence, 95% confident we can reject the null hypothesis where the observed distribution does not conform to the random distribution\nPositive Moran I statistic -&gt; sign of clustering, however at 0.3. It is a relatively low clustering\nK -&gt; Average Value of K-Neighbours found"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#performing-global-morani-permutation-test",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#performing-global-morani-permutation-test",
    "title": "In-class Exercise 06",
    "section": "Performing Global Moran’I permutation test",
    "text": "Performing Global Moran’I permutation test\nIt is always good to use set.seed() before performing simulation. This is to ensure reproducible computation. You can initialize this from the start\n\nset.seed(1234)\n\n\nglobal_moran_perm(wm_q$GDPPC, \n                  wm_q$nb, \n                  wm_q$wt, \n                nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nn=99sim == 100 iterations.\nThe result will be the same.\nInterpretation of the p-value: Roughly 0.3 Moran –&gt; stable result compared to the earlier calculation"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#computing-local-morani",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#computing-local-morani",
    "title": "In-class Exercise 06",
    "section": "Computing Local Moran’I",
    "text": "Computing Local Moran’I\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim=99),\n    .before = 1) %&gt;% \n  unnest(local_moran)\n\nUnnest() to put back into 1 single tibble table ( 1 - Many ) – You want to make it to one single table, without it, it can’t be seen as a data frame\nBased on the dataframe results :\n\nii -&gt; local moran I\n\nP-VALUES\n\np_ii, p_ii_sim, p_folded_sim\n\np_ii -&gt; base method\np_ii -&gt; simulation method\np_folded_sim (pysal method) - using K4 (take out one and leave out 1)\n\nuse p_ii_sim (simulated)\n\nMEAN, MEDIAN, PYSAL\n\nLabel Low-Low, High-High & 2 other\nCompared to Hands-on 6 (you have to manually generate low-low, high-high categorization)\n\nexcessive skewness (better to use the median)\nif closer to 0 , use mean\n\nHow do you determine closeness to 0? Very few of them near to 0 -&gt; Know by plotting it out on a histogram – refer to skewness as a factor\n\nno one-row, need to check the majority of the data and go by a mean or median (stay with one based on a classification method)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-local-morans-i",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-local-morans-i",
    "title": "In-class Exercise 06",
    "section": "Visualizing local Moran’s I",
    "text": "Visualizing local Moran’s I\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) + \n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) + \n  tm_view(set.zoom.limits = c(6,8)) + \n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\", \n    main.title.size = 2)\n\nmap1\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-p-value-of-local-morans-i",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-p-value-of-local-morans-i",
    "title": "In-class Exercise 06",
    "section": "Visualizing p-value of local Moran’s I",
    "text": "Visualizing p-value of local Moran’s I\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\nmap2 &lt;- tm_shape(lisa) + \n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) + \n  tm_view(set.zoom.limits = c(6,8)) + \n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\", \n    main.title.size = 2)\n\nmap2\n\n\n\n\n\n\n\n\nNotice that the p value is all over the place, ideally you need to scale it"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-local-morans-i-and-p-value",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-local-morans-i-and-p-value",
    "title": "In-class Exercise 06",
    "section": "Visualizing local Moran’s I and p-value",
    "text": "Visualizing local Moran’s I and p-value\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntmap_arrange(map1, map2, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-lisa-map",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-lisa-map",
    "title": "In-class Exercise 06",
    "section": "Visualizing LISA Map",
    "text": "Visualizing LISA Map\n\nlisa_sig &lt;- lisa %&gt;% \n  filter(p_ii &lt; 0.05)\n\ntmap_mode(\"plot\") + \n  tm_shape(lisa) + \n  tm_polygons() + \n  tm_borders(alpha=0.5) + \n  tm_shape(lisa_sig) + \n  tm_fill('mean') + \n  tm_borders(alpha = 0.5)\n\ntmap mode set to plotting\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n*Take note: There is a p-value filter there\n\npurple - Low GDP area surrounded by high GDP area.\n\n\n\nOnly see this because the rest are not statistically significant\nArea located near the province and the city - high growth area (Tiering of the Province; Ladder development)\nGrowth spread from the capital (can explore factors accounting for this development)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#compute-local-gi-statistics",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#compute-local-gi-statistics",
    "title": "In-class Exercise 06",
    "section": "Compute local Gi* statistics",
    "text": "Compute local Gi* statistics\n\nwm_idw &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry), \n         wts = st_inverse_distance(nb, geometry, \n                                   scale=1, \n                                   alpha=1), \n         .before =1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nThe wrapper - the one without the * (will exclude away the self item)\n\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim =99),\n    .before=1) %&gt;% \n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nHCSA\n\ngi_star, p_value, label (cluster) - statistics to take note of\n\nSimilar process to Moran’I | Gi* Statistic\nLISA - Cluster & Outliers\nGi* - Hot Spot & Cold Spot"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-gi---hot-spot-cold-spot",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#visualizing-gi---hot-spot-cold-spot",
    "title": "In-class Exercise 06",
    "section": "Visualizing GI* - Hot Spot & Cold Spot",
    "text": "Visualizing GI* - Hot Spot & Cold Spot\n\ntm_shape(HCSA) + \n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) + \n  tm_view(set.zoom.limits=c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx06/InClassEx06.html#p-value",
    "href": "In-Class_Exercise/InClassEx06/InClassEx06.html#p-value",
    "title": "In-class Exercise 06",
    "section": "p-value",
    "text": "p-value\n\nHCSA_sig &lt;- HCSA %&gt;% \n  filter(p_sim &lt; 0.05) \n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(HCSA) + \n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  \ntm_shape(HCSA_sig) + \n  tm_fill(\"gi_star\") + \n  tm_borders(alpha=0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nCan replace gi_star with cluster to visualize the clusters\nBy right, you should map it back to the label\n\n\nHCSA_sig &lt;- HCSA %&gt;% \n  filter(p_sim &lt; 0.05) \n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(HCSA) + \n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  \ntm_shape(HCSA_sig) + \n  tm_fill(\"cluster\") + \n  tm_borders(alpha=0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "We will delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\nBy the end of this hands-on exercise, you will able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\n\n\n\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\n\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\n\n\n\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(BiocManager, spdep, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally, patchwork)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#objectives",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#objectives",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "We will delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\nBy the end of this hands-on exercise, you will able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#the-analytical-question",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#the-analytical-question",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "In geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#datasets-used",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#datasets-used",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "Myanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#installing-and-loading-r-packages",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "Before we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(BiocManager, spdep, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally, patchwork)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#importing-geospatial-data-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#importing-geospatial-data-into-r-environment",
    "title": "Hands-on Exercise 8",
    "section": "2.1 Importing geospatial data into R environment",
    "text": "2.1 Importing geospatial data into R environment\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\n\n2.1.1 Shan SF\nThe code chunks used are shown below:\n\nshan_sf &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"myanmar_township_boundaries\") %&gt;% \n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;% \n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex08/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n2.1.1 ICT - Census Data\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#derive-new-variables-using-dplyr-package",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#derive-new-variables-using-dplyr-package",
    "title": "Hands-on Exercise 8",
    "section": "2.2 Derive new variables using dplyr package",
    "text": "2.2 Derive new variables using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\nA fellow classmate raised the question of why it is multiplied by 1000, rather than 100, and the answer is perhaps we investigate penetration rates per 1000 households, rather than assuming the penetration rate is a percentage.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#eda-using-statistical-graphs",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#eda-using-statistical-graphs",
    "title": "Hands-on Exercise 8",
    "section": "3.1 EDA Using Statistical Graphs",
    "text": "3.1 EDA Using Statistical Graphs\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nHistogramBoxplot\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n\nWe also visualize the distribution of derived variables by using the following code chunk:\n\nradio_pr &lt;- ggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nradio_pr_bx &lt;- ggplot(data=ict_derived, \n       aes(y=`RADIO_PR`)) +\n        geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\nradio_pr + radio_pr_bx\n\n\n\n\n\n\n\n\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nWe use the the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol=3, \n          nrow=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#eda-using-choropleth-map",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#eda-using-choropleth-map",
    "title": "Hands-on Exercise 8",
    "section": "3.2 EDA using choropleth map",
    "text": "3.2 EDA using choropleth map\n\n3.2.1 Joining Geospatial and Aspatial Data\nThe code chunks below is used to perform the task of left join. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, ict_derived,\n                     by=c(\"TS_PCODE\" = \"TS_PCODE\"))\n\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\nhead(shan_sf)\n\nSimple feature collection with 6 features and 22 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.74308 xmax: 97.3376 ymax: 24.15907\nGeodetic CRS:  WGS 84\n            ST ST_PCODE     DT.x DT_PCODE.x     TS.x  TS_PCODE DT_PCODE.y\n1 Shan (North)   MMR015  Mongmit MMR015D008  Mongmit MMR015017 MMR015D003\n2 Shan (South)   MMR014 Taunggyi MMR014D001  Pindaya MMR014006 MMR014D001\n3 Shan (South)   MMR014 Taunggyi MMR014D001  Ywangan MMR014007 MMR014D001\n4 Shan (South)   MMR014 Taunggyi MMR014D001 Pinlaung MMR014009 MMR014D001\n5 Shan (North)   MMR015  Mongmit MMR015D008   Mabein MMR015018 MMR015D003\n6 Shan (South)   MMR014 Taunggyi MMR014D001    Kalaw MMR014005 MMR014D001\n      DT.y     TS.y TT_HOUSEHOLDS RADIO    TV LLPHONE MPHONE COMPUTER INTERNET\n1  Kyaukme  Mongmit         13652  3907  7565     482   3559      166      321\n2 Taunggyi  Pindaya         17544  7324  8862     348   2849      226      136\n3 Taunggyi  Ywangan         18348  8890  4781     219   2207       81      152\n4 Taunggyi Pinlaung         25504  5908 13816     728   6363      351      737\n5  Kyaukme   Mabein          8632  3880  6117     628   3389      142      165\n6 Taunggyi    Kalaw         41341 11607 25285    1739  16900     1225     1741\n  RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR INTERNET_PR\n1 286.1852 554.1313   35.30618  260.6944    12.15939   23.513038\n2 417.4647 505.1300   19.83584  162.3917    12.88190    7.751938\n3 484.5215 260.5734   11.93591  120.2856     4.41465    8.284282\n4 231.6499 541.7189   28.54454  249.4903    13.76255   28.897428\n5 449.4903 708.6423   72.75255  392.6089    16.45042   19.114921\n6 280.7624 611.6204   42.06478  408.7951    29.63160   42.113156\n                        geometry\n1 MULTIPOLYGON (((96.96001 23...\n2 MULTIPOLYGON (((96.7731 21....\n3 MULTIPOLYGON (((96.78483 21...\n4 MULTIPOLYGON (((96.49518 20...\n5 MULTIPOLYGON (((96.66306 24...\n6 MULTIPOLYGON (((96.49518 20...\n\n\n\n\n3.2.2 Preparing a choropleth map\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nradio_pr &lt;- qtm(shan_sf, \"RADIO_PR\")\nradio_pr\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS_q.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"quantile\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO_q.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"quantile\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(radio_pr, TT_HOUSEHOLDS_q.map, RADIO_q.map,\n             asp=1, ncol=2)\n\nLegend labels were too wide. The labels have been resized to 0.61, 0.56, 0.52, 0.52, 0.52. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.61, 0.61, 0.61, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\n\nTT_HOUSEHOLDS_j.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO_j.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(radio_pr, TT_HOUSEHOLDS_j.map, RADIO_j.map,\n             asp=1, ncol=2)\n\nLegend labels were too wide. The labels have been resized to 0.56, 0.52, 0.52, 0.52, 0.52. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.61, 0.61, 0.56, 0.52. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nThe difference lies in the range of classes. Furthermore, If you do proportion vs taking the numbers at face value, there is distortion because places with a higher population naturally have more cases. That is why the fix is to divide it per 1000 households, for example"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#extracting-cluster-variables",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#extracting-cluster-variables",
    "title": "Hands-on Exercise 8",
    "section": "5.1 Extracting Cluster Variables",
    "text": "5.1 Extracting Cluster Variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#data-standardization---min-max-standardization",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#data-standardization---min-max-standardization",
    "title": "Hands-on Exercise 8",
    "section": "5.2 Data Standardization -> Min-max Standardization",
    "text": "5.2 Data Standardization -&gt; Min-max Standardization\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nThe range has been standardized to 0 - 1"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#z-score-standardization",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#z-score-standardization",
    "title": "Hands-on Exercise 8",
    "section": "5.3 Z-score standardization",
    "text": "5.3 Z-score standardization\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-the-standardised-clustering-variables",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-the-standardised-clustering-variables",
    "title": "Hands-on Exercise 8",
    "section": "5.4 Visualizing the standardised clustering variables",
    "text": "5.4 Visualizing the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\n\nr1 &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns1 &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz1&lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=10, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r1, s1, z1,ncol = 3,nrow = 1)\n\n\n\n\n\n\n\nr2 &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns2 &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz2 &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r2, s2, z2, ncol = 3,nrow = 1)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#computing-proximity-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#computing-proximity-matrix",
    "title": "Hands-on Exercise 8",
    "section": "5.5 Computing Proximity Matrix",
    "text": "5.5 Computing Proximity Matrix\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#computing-hierarchal-clustering",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#computing-hierarchal-clustering",
    "title": "Hands-on Exercise 8",
    "section": "5.6 Computing Hierarchal Clustering",
    "text": "5.6 Computing Hierarchal Clustering\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe plot the tree as shown in the code chunk:\n\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#selecting-the-optimal-clustering-algorithm",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#selecting-the-optimal-clustering-algorithm",
    "title": "Hands-on Exercise 8",
    "section": "5.7 Selecting the Optimal Clustering Algorithm",
    "text": "5.7 Selecting the Optimal Clustering Algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#determining-optimal-clusters",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#determining-optimal-clusters",
    "title": "Hands-on Exercise 8",
    "section": "5.8 Determining Optimal Clusters",
    "text": "5.8 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n5.8.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(1234)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.677830 0.2707006 0.03692273\n [2,] 8.130029 8.346462 0.2164322 0.04088387\n [3,] 7.992265 8.200253 0.2079877 0.03762167\n [4,] 7.862224 8.079170 0.2169462 0.04018998\n [5,] 7.756461 7.977981 0.2215201 0.04229538\n [6,] 7.665594 7.890134 0.2245409 0.04501316\n [7,] 7.590919 7.812990 0.2220709 0.04364077\n [8,] 7.526680 7.739537 0.2128575 0.04477188\n [9,] 7.458024 7.670476 0.2124519 0.04623855\n[10,] 7.377412 7.603947 0.2265346 0.04762720\n\n\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#interpreting-the-dendrograms",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#interpreting-the-dendrograms",
    "title": "Hands-on Exercise 8",
    "section": "5.9 Interpreting the dendrograms",
    "text": "5.9 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#visually-driven-hierarchal-clustering-analysis",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#visually-driven-hierarchal-clustering-analysis",
    "title": "Hands-on Exercise 8",
    "section": "5.10 Visually-driven hierarchal clustering analysis",
    "text": "5.10 Visually-driven hierarchal clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n5.10.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap. The code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n5.10.2 Plotting interactive cluster heatmap using heatmaply()\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#mapping-the-clusters-formed",
    "href": "Hands-On_Exercise/Hands-on_Ex08/Hands-on_Ex08.html#mapping-the-clusters-formed",
    "title": "Hands-on Exercise 8",
    "section": "5.11 Mapping the clusters formed",
    "text": "5.11 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "",
    "text": "In this Take-Home Exercise 2, we will focus on the Drug Abuse in Thailand, specifically on the indicators available in the sourced datasets and :\n\nif the key indicators of drug abuse of Thailand are independent from space.\nIf the indicators of drug abuse is indeed spatial dependent, then, we focus our investigation on where the clusters and outliers are detected.\nLast but not least, we are also interested to investigate how the observation above evolve over time.\n\nBased on the context provided, these are the tasks this assignment aims to address:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na drug abuse indicators layer within the study area in sf polygon features.\n\nUsing the extracted data, perform global spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis by using sfdep methods.\nDescribe the spatial patterns revealed by the analysis above.\n\n\npacman::p_load(sf, spdep, sfdep, tmap, tidyverse, knitr, arrow, readxl, dplyr, patchwork, Kendall)\n\nThe code chunk below runs set.seed(), to ensure random operations in this take home exercise will produce the same results each time we run the code, helping ensure reproducibility\n\nset.seed(1234)\n\n\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\nThailand Drug Offenses [2017-2022] at Kaggle.\nThailand - Subnational Administrative Boundaries at HDX. You are required to use the province boundary data set.\n\nFor additional context, these are some interesting points to note about the Drug Abuse situation in Thailand within the last decade with its reputation as Southeast Asia’s ’Narcotics Hub, most affected by drug abuse in the Region’ (Anadolu Ajansi - Thailand’s National Paper).\n\nThis arises due to several factors, but the most commonly cited is the proximity to the largest drug production and trafficking area, a.k.a ‘Golden Triangle’. (Windle et al.) Additionally, this paper explores the modus operandi of Drug syndicates, who exploit Thailand’s porous borders and extensive transportation infrastructure to traffic drugs both within the country and internationally.\nE-commerce: The growth of online marketplaces and the use of parcel delivery systems for drug transactions have made it more difficult to control the spread of illegal drugs (Thailand Country Report UN 2023)\nWorsening Socio-Economic Conditions in recent years, especially post COVID-19, has increased the demand for cheap drugs which are becoming more and more accessible due to the growth of distributed networks within and outside of Thailand, coupled with the growth in supply due to the emergence of synthetic variants. (UN Office of Drugs and Crime)\nDespite strict regulations and a crackdown on drugs in the country, policies have been criticised to have traditionally focused on law enforcement rather than harms reduction, often to the detriment of public health. The call for compassionate care for rehabilitating drug abuse users call for further action to address underlying causes, one of which is the reduction of needle sharing in overcrowded prisons which also may lead to transmission of diseases such as HIV(UNAIDS).\nDespite efforts to suppress drug cultivation, Thailand remains a significant hub for trafficking and faces ongoing challenges in addressing the complex socio-economic and health impacts of drug abuse.\n\n\nThailand has been facing the problem of being the illicit drug markets and trafficking routes from the Golden Triangle area. A large amount of Methamphetamine tablets (Yaba), crystal methamphetamine (Ice), heroin, ketamine, and cannabis are found being imported to Thailand. Northern and Northeastern border areas remained the main drug trafficking routes from the production sites in the Golden Triangle while some were smuggled through the Western border areas.\nThose drugs were transported to be kept in the central region, particularly Bangkok, before trafficking to the southern region of Thailand\nASEAN Drug Monitoring Report 2022\n\nAs mentioned earlier, Drug Law Enforecement is a key priority in the country, where the government employs (1) Drug Interdiction and (2) Drug Syndicate Suppression.\n\n\n\nFig 1: The arrested drug cases and drug offenders in Thailand during 2018 - 2022\n\n\nThe image above (Figure 1) depicts the Arrested Drug Cases and Drug Offenders in Thailand during 2018 - 2022 . We can thus subset our analysis later on into years of 2020 and 2021.\n\n\n\n\n\n\ndrug_offenses &lt;- read_parquet(\"data/aspatial/thai_drug_offenses_2017_2022.parquet\") \n\n\n\n\n\nThailand administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries. We will use admin1 - Province Level Boundary\n\n\nthailand_sf &lt;- st_read(dsn = \"data/geospatial\", layer=\"tha_admbnda_adm1_rtsd_20220121\") %&gt;% \n  select(ADM1_EN, geometry) %&gt;% \n  st_transform(crs = 32648)\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nWe will verify the coordinate reference systems of the Thailand object to ensure the assignment of the correct CRS value. We will go with UTM Zone 48N (EPSG: 32648), as this projection covers most of Thailand and works best for national-scale projects.\n\nst_crs(thailand_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\n\nhead(thailand_sf)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -18419.13 ymin: 1493846 xmax: 63151.73 ymax: 1641727\nProjected CRS: WGS 84 / UTM zone 48N\n                   ADM1_EN                       geometry\n1                  Bangkok MULTIPOLYGON (((25835.57 15...\n2             Samut Prakan MULTIPOLYGON (((38002.87 15...\n3               Nonthaburi MULTIPOLYGON (((-3347.358 1...\n4             Pathum Thani MULTIPOLYGON (((56466.67 15...\n5 Phra Nakhon Si Ayutthaya MULTIPOLYGON (((16427.34 16...\n6                Ang Thong MULTIPOLYGON (((-2670.024 1...\n\n\n\n\nAs observed from the HDX dataset, it uses multipolygon geometries. For spatial autocorrelation this may pose a problem in that the calculation of the centroid for a MULTIPOLYGON geometry may result in a point that lies outside the area of interest, such as in the sea or another inappropriate location.\nThis happens because the centroid is calculated based on the combined geometry of all constituent polygons, which can be spread across multiple, disjoint regions. Such misplaced centroids can distort spatial relationships and affect the accuracy of spatial autocorrelation analysis, leading to misleading interpretations of the data.\nTo mitigate this issue, converting MULTIPOLYGON geometries to POLYGON or selecting a representative polygon can ensure centroids are more accurately placed within each region, improving the reliability of spatial analysis.\n\nWe use the st_cast()to break up the data into individual polygons\nCalculate the area of each individual polygon and create a new column Shape_Area_Polygon\nWe keep the polygon relating to the corresponding shape_area\nResultant dataset will have POLYGON geometries\n\n\nthailand_sf &lt;- thailand_sf %&gt;%\n  st_cast(\"POLYGON\") %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(geometry = st_union(geometry)) %&gt;%\n  ungroup()\n\nWarning in st_cast.sf(., \"POLYGON\"): repeating attributes for all\nsub-geometries for which they may not be constant\n\nthailand_sf &lt;- thailand_sf %&gt;%\n  mutate(Shape_Area_Polygon = st_area(geometry) / 1e6)\n\nhead(thailand_sf)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -18419.13 ymin: 1459180 xmax: 506444.2 ymax: 2040603\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 6 × 3\n  ADM1_EN                                            geometry Shape_Area_Polygon\n  &lt;chr&gt;                                         &lt;POLYGON [m]&gt;              [m^2]\n1 Amnat Charoen ((495707.6 1800305, 495711.8 1800298, 495716…              3260.\n2 Ang Thong     ((-2670.024 1641280, -2648.057 1641233, -264…               949.\n3 Bangkok       ((25835.57 1547090, 25877.6 1547067, 25943.0…              1579.\n4 Bueng Kan     ((331560.4 2040603, 331689.4 2040595, 331900…              3990.\n5 Buri Ram      ((278292.9 1747365, 278292.9 1747365, 278292…             10062.\n6 Chachoengsao  ((74303.68 1548625, 74443.42 1548608, 74483.…              5181.\n\n\n\n\n\n\nTo obtain only relevant data, we filter it down to ADM1_EN, T_TL, ADM1_PCODE(Total Population within the Province)\n\npopulation_sf &lt;- read_csv(\"data/aspatial/tha_admpop_adm1_2023.csv\") %&gt;% \n  select(ADM1_EN, T_TL, ADM1_PCODE)\n\nRows: 77 Columns: 60\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): ISO3, ADM0_EN, ADM0_PCODE, ADM1_EN, ADM1_PCODE\ndbl (55): year, F_TL, M_TL, T_TL, F_00_04, F_05_09, F_10_14, F_15_19, F_20_2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(population_sf)\n\n[1] \"ADM1_EN\"    \"T_TL\"       \"ADM1_PCODE\"\n\n\nWe perform a relational join for the Thailand Population Dataset and Thailand Boundary Dataset, which will aid in subsequent analysis. Because they are both from HDX, data inconsistency is less likely to occur:\n\nthailand_population_sf &lt;- thailand_sf %&gt;% \n  left_join(population_sf, by=\"ADM1_EN\")\n\n\nhead(thailand_population_sf)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -18419.13 ymin: 1459180 xmax: 506444.2 ymax: 2040603\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 6 × 5\n  ADM1_EN                          geometry Shape_Area_Polygon   T_TL ADM1_PCODE\n  &lt;chr&gt;                       &lt;POLYGON [m]&gt;              [m^2]  &lt;dbl&gt; &lt;chr&gt;     \n1 Amnat Charoen ((495707.6 1800305, 495711…              3260. 1.80e5 TH37      \n2 Ang Thong     ((-2670.024 1641280, -2648…               949. 2.01e5 TH15      \n3 Bangkok       ((25835.57 1547090, 25877.…              1579. 1.15e7 TH10      \n4 Bueng Kan     ((331560.4 2040603, 331689…              3990. 2.84e5 TH38      \n5 Buri Ram      ((278292.9 1747365, 278292…             10062. 8.88e5 TH31      \n6 Chachoengsao  ((74303.68 1548625, 74443.…              5181. 7.31e5 TH24      \n\n\n\n\n\n\n\n\nAfter inspecting the 2 dataests, we see we can potentially perform a relational join using the Province Names (in English). However we have to check and ensure the names match up to perform a 1-1 mapping, and avoid the potential erroneous loss of data.\nIn the code chunk below, we cleanse the province names for the datasets:\n\nclean_names &lt;- function(column) {\n  gsub(\"\\\\s+\", \" \", trimws(column))\n}\n\ndrug_offenses$province_en &lt;- clean_names(drug_offenses$province_en)\nthailand_population_sf$ADM1_EN &lt;- clean_names(thailand_population_sf$ADM1_EN)\n\nprov_not_in_thai_sf &lt;- setdiff(unique(drug_offenses$province_en), unique(thailand_population_sf$ADM1_EN))\nprov_not_in_offenses_sf &lt;- setdiff(unique(thailand_population_sf$ADM1_EN), unique(drug_offenses$province_en))\n\n# Create a lookup table for mismatched names\nlookup &lt;- data.frame(\n  province_en = prov_not_in_thai_sf,\n  correct_province = prov_not_in_offenses_sf\n)\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  left_join(lookup, by = \"province_en\") %&gt;%\n  mutate(province_en = coalesce(correct_province, province_en)) %&gt;%\n  select(-correct_province)\n\nlookup\n\n  province_en correct_province\n1      Loburi        Bueng Kan\n2     buogkan         Lop Buri\n\n\n\nsetdiff() function is used to perform an exact match.\nBecause it does not account for whitespace, I used the trimws() function to see if there are potential names missed out due to mismatches.\n\nThe code chunk above follows the naming convention done in the Thailand dataset, because it follows HDX dataset cleaning practices. It performs a relational join and replaces mismatched names. We keep the original if no match is found in the lookup data frame and remove the temporary replacement column at the end\n\nunique(drug_offenses$province_en)\n\n [1] \"Bangkok\"                  \"Chai Nat\"                \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Bueng Kan\"               \n [7] \"Samut Prakan\"             \"Saraburi\"                \n [9] \"Sing Buri\"                \"Ang Thong\"               \n[11] \"Chanthaburi\"              \"Chachoengsao\"            \n[13] \"Chon Buri\"                \"Trat\"                    \n[15] \"Nakhon Nayok\"             \"Prachin Buri\"            \n[17] \"Rayong\"                   \"Sa Kaeo\"                 \n[19] \"Chaiyaphum\"               \"Nakhon Ratchasima\"       \n[21] \"Buri Ram\"                 \"Yasothon\"                \n[23] \"Si Sa Ket\"                \"Surin\"                   \n[25] \"Amnat Charoen\"            \"Ubon Ratchathani\"        \n[27] \"Kalasin\"                  \"Khon Kaen\"               \n[29] \"Nakhon Phanom\"            \"Lop Buri\"                \n[31] \"Maha Sarakham\"            \"Mukdahan\"                \n[33] \"Roi Et\"                   \"Loei\"                    \n[35] \"Sakon Nakhon\"             \"Nong Khai\"               \n[37] \"Nong Bua Lam Phu\"         \"Udon Thani\"              \n[39] \"Chiang Rai\"               \"Chiang Mai\"              \n[41] \"Nan\"                      \"Phayao\"                  \n[43] \"Phrae\"                    \"Mae Hong Son\"            \n[45] \"Lampang\"                  \"Lamphun\"                 \n[47] \"Kamphaeng Phet\"           \"Tak\"                     \n[49] \"Nakhon Sawan\"             \"Phichit\"                 \n[51] \"Phitsanulok\"              \"Phetchabun\"              \n[53] \"Sukhothai\"                \"Uttaradit\"               \n[55] \"Uthai Thani\"              \"Kanchanaburi\"            \n[57] \"Nakhon Pathom\"            \"Prachuap Khiri Khan\"     \n[59] \"Phetchaburi\"              \"Ratchaburi\"              \n[61] \"Samut Songkhram\"          \"Samut Sakhon\"            \n[63] \"Suphan Buri\"              \"Krabi\"                   \n[65] \"Chumphon\"                 \"Nakhon Si Thammarat\"     \n[67] \"Phangnga\"                 \"Phuket\"                  \n[69] \"Ranong\"                   \"Surat Thani\"             \n[71] \"Trang\"                    \"Narathiwat\"              \n[73] \"Pattani\"                  \"Phatthalung\"             \n[75] \"Yala\"                     \"Songkhla\"                \n[77] \"Satun\"                   \n\n\nAs we are investigating indicators of drug abuse, we can drop columns with ‘suspects_in’ for the different cases since they are more of an indicator for law enforcement, rather than the socio-cultural and health aspects that may be more relevant.\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  filter(!grepl(\"^suspects_in\", types_of_drug_offenses)) %&gt;% \n  select(-province_th)\n\n\nunique(drug_offenses$types_of_drug_offenses)\n\n[1] \"drug_use_cases\"                            \n[2] \"possession_cases\"                          \n[3] \"possession_with_intent_to_distribute_cases\"\n[4] \"trafficking_cases\"                         \n[5] \"production_cases\"                          \n[6] \"import_cases\"                              \n[7] \"export_cases\"                              \n[8] \"conspiracy_cases\"                          \n\n\nBy performing EDA on the yearly data, we first aggregate the number of cases per indicator by year:\n\nyearly_statistics &lt;- drug_offenses %&gt;% \n  group_by(fiscal_year, types_of_drug_offenses) %&gt;% \n  summarize(total_cases = sum(no_cases, na.rm=TRUE)) %&gt;% \n  pivot_wider(\n    names_from = types_of_drug_offenses, \n    values_from = total_cases\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'fiscal_year'. You can override using the\n`.groups` argument.\n\ntotal_cases_per_type &lt;- yearly_statistics %&gt;% \n  select(-fiscal_year) %&gt;% \n  summarize(across(everything(), sum, na.rm=TRUE))\n\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `across(everything(), sum, na.rm = TRUE)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\ntotal_cases_all &lt;- sum(total_cases_per_type)\n\nproportion_cases &lt;- total_cases_per_type / total_cases_all * 100 \n\nproportion_cases &lt;- proportion_cases %&gt;% \n  pivot_longer(cols = everything(), \n               names_to = \"types_of_drug_offenses\", \n               values_to = \"proportion\") %&gt;% \n  arrange(desc(proportion))\n\nproportion_cases\n\n# A tibble: 8 × 2\n  types_of_drug_offenses                     proportion\n  &lt;chr&gt;                                           &lt;dbl&gt;\n1 drug_use_cases                               47.6    \n2 possession_cases                             28.0    \n3 possession_with_intent_to_distribute_cases   17.7    \n4 trafficking_cases                             3.56   \n5 production_cases                              2.96   \n6 conspiracy_cases                              0.0478 \n7 import_cases                                  0.0447 \n8 export_cases                                  0.00437\n\n\n\n\n\n\nggplot(proportion_cases, aes(x = reorder(types_of_drug_offenses, proportion), y = proportion)) +\n  geom_col(fill = \"red\") +\n  geom_text(aes(label = round(proportion,1), hjust = -0.1)) + \n  coord_flip() +  # Flip coordinates to have horizontal bars\n  labs(\n    title = \"Proportion of Total Drug Offense (Cases Over 5 Years)2017 - 2022) \",\n    x = \"Types of Drug Offenses\",\n    y = \"Proportion (%)\"\n  ) +\n  theme_minimal() +\n  ylim(0, max(proportion_cases$proportion) + 10)\n\n\n\n\n\n\n\n\nLastly, based on yearly statistics, we aggregate data by focusing on these offense types:\n\nDrug Use Cases\nTrafficking\n\nWhile trafficking only accounts for ~3% of cases, the proximity of ‘The Golden Triangle’ make the country a location of interest in drug trafficking in SEA, on top of the rampant drug use in the region.\n\ndrug_offenses &lt;- drug_offenses %&gt;% \n  filter(types_of_drug_offenses %in% c(\"drug_use_cases\",\"trafficking_cases\")) %&gt;%\n  pivot_wider(\n    names_from = types_of_drug_offenses, \n    values_from = no_cases\n  ) %&gt;% \n  ungroup() \n\nhead(drug_offenses)\n\n# A tibble: 6 × 4\n  fiscal_year province_en              drug_use_cases trafficking_cases\n        &lt;int&gt; &lt;chr&gt;                             &lt;int&gt;             &lt;int&gt;\n1        2017 Bangkok                           11871               950\n2        2017 Chai Nat                            200               210\n3        2017 Nonthaburi                          553               118\n4        2017 Pathum Thani                        450                83\n5        2017 Phra Nakhon Si Ayutthaya            378               164\n6        2017 Bueng Kan                           727               261\n\ncolnames(drug_offenses)\n\n[1] \"fiscal_year\"       \"province_en\"       \"drug_use_cases\"   \n[4] \"trafficking_cases\"\n\n\n\ndrug_use_cases_offenses &lt;- drug_offenses %&gt;% \n  select(1:3) %&gt;% \n  mutate(types_of_drug_offenses = \"drug_use_cases\") %&gt;% \n  pivot_wider(\n    names_from = fiscal_year, \n    values_from = drug_use_cases\n  )\n\ntrafficking_cases_offenses &lt;- drug_offenses %&gt;% \n  select(1:2, 4) %&gt;% \n  mutate(types_of_drug_offenses = \"trafficking_cases\") %&gt;% \n  pivot_wider(\n    names_from = fiscal_year, \n    values_from = trafficking_cases\n  )\n\n\ndrug_use_cases_offenses\n\n# A tibble: 77 × 8\n   province_en  types_of_drug_offenses `2017` `2018` `2019` `2020` `2021` `2022`\n   &lt;chr&gt;        &lt;chr&gt;                   &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n 1 Bangkok      drug_use_cases          11871  16480  15067   9724   9625   2755\n 2 Chai Nat     drug_use_cases            200    422    957    822    763    617\n 3 Nonthaburi   drug_use_cases            553   1661   1719    937   3202    809\n 4 Pathum Thani drug_use_cases            450   1823   2994   1192   1747   1599\n 5 Phra Nakhon… drug_use_cases            378   1123   2470   1745   1766   1298\n 6 Bueng Kan    drug_use_cases            727   1850   2262   1487   1925    985\n 7 Samut Prakan drug_use_cases            820   3015   4602   1816   2515   1953\n 8 Saraburi     drug_use_cases             69    628    843    744   1106    839\n 9 Sing Buri    drug_use_cases            127    402    582    309    683    493\n10 Ang Thong    drug_use_cases            208    660    657    423    755    784\n# ℹ 67 more rows\n\n\n\ntrafficking_cases_offenses\n\n# A tibble: 77 × 8\n   province_en  types_of_drug_offenses `2017` `2018` `2019` `2020` `2021` `2022`\n   &lt;chr&gt;        &lt;chr&gt;                   &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n 1 Bangkok      trafficking_cases         950    623    428    352    250    233\n 2 Chai Nat     trafficking_cases         210    151    101    117     97    142\n 3 Nonthaburi   trafficking_cases         118    113     72     80     60     31\n 4 Pathum Thani trafficking_cases          83     68     23     69    106     80\n 5 Phra Nakhon… trafficking_cases         164    164    124    167    112     72\n 6 Bueng Kan    trafficking_cases         261    234    151    174    142    106\n 7 Samut Prakan trafficking_cases         201    112     76    136    159    199\n 8 Saraburi     trafficking_cases          58     45     36     50     69     35\n 9 Sing Buri    trafficking_cases          41     44     33     48     40     26\n10 Ang Thong    trafficking_cases          51     61     56     46     51     75\n# ℹ 67 more rows\n\n\n\nthailand_population_sf\n\nSimple feature collection with 77 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -313055.3 ymin: 621843.5 xmax: 568269.6 ymax: 2271054\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 77 × 5\n   ADM1_EN                         geometry Shape_Area_Polygon   T_TL ADM1_PCODE\n * &lt;chr&gt;                     &lt;GEOMETRY [m]&gt;              [m^2]  &lt;dbl&gt; &lt;chr&gt;     \n 1 Amnat Charoen POLYGON ((495707.6 180030…              3260. 1.80e5 TH37      \n 2 Ang Thong     POLYGON ((-2670.024 16412…               949. 2.01e5 TH15      \n 3 Bangkok       POLYGON ((25835.57 154709…              1579. 1.15e7 TH10      \n 4 Bueng Kan     POLYGON ((331560.4 204060…              3990. 2.84e5 TH38      \n 5 Buri Ram      POLYGON ((278292.9 174736…             10062. 8.88e5 TH31      \n 6 Chachoengsao  POLYGON ((74303.68 154862…              5181. 7.31e5 TH24      \n 7 Chai Nat      POLYGON ((-24181.19 17098…              2502. 2.10e5 TH18      \n 8 Chaiyaphum    POLYGON ((133164.1 185269…             12642. 6.94e5 TH36      \n 9 Chanthaburi   MULTIPOLYGON (((201062.9 …              6414. 4.20e5 TH22      \n10 Chiang Mai    POLYGON ((-72871.25 22361…             22400. 1.79e6 TH50      \n# ℹ 67 more rows\n\n\n\n\n\n\nWe check for duplicates before joining:\n\nduplicated_rows &lt;- drug_offenses[duplicated(drug_offenses), ]\nduplicated_rows\n\n# A tibble: 0 × 4\n# ℹ 4 variables: fiscal_year &lt;int&gt;, province_en &lt;chr&gt;, drug_use_cases &lt;int&gt;,\n#   trafficking_cases &lt;int&gt;\n\n\n\nthai_drug_use_sf &lt;- drug_use_cases_offenses %&gt;% \n  left_join(thailand_population_sf, by = c(\"province_en\" = \"ADM1_EN\")) %&gt;% \n  rename(population_count = T_TL) %&gt;% \n  st_as_sf()\n\nthai_trafficking_sf &lt;- trafficking_cases_offenses %&gt;% \n  left_join(thailand_population_sf, by = c(\"province_en\" = \"ADM1_EN\")) %&gt;% \n  rename(population_count = T_TL) %&gt;% \n  st_as_sf()\n\nWe save the cleaned dataset in rds:\n\nwrite_rds(thai_drug_use_sf, \"data/rds/thai_drug_use_sf.rds\")\nwrite_rds(thai_trafficking_sf, \"data/rds/thai_trafficking_sf.rds\")\n\n\nthai_drug_use_sf &lt;- read_rds(\"data/rds/thai_drug_use_sf.rds\") %&gt;% \n  st_transform(crs = 32648)\n\nthai_trafficking_sf &lt;- read_rds(\"data/rds/thai_trafficking_sf.rds\") %&gt;% \n  st_transform(crs = 32648)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#the-study-area-and-data",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#the-study-area-and-data",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "",
    "text": "For the purpose of this take-home exercise, two data sets shall be used, they are:\n\nThailand Drug Offenses [2017-2022] at Kaggle.\nThailand - Subnational Administrative Boundaries at HDX. You are required to use the province boundary data set.\n\nFor additional context, these are some interesting points to note about the Drug Abuse situation in Thailand within the last decade with its reputation as Southeast Asia’s ’Narcotics Hub, most affected by drug abuse in the Region’ (Anadolu Ajansi - Thailand’s National Paper).\n\nThis arises due to several factors, but the most commonly cited is the proximity to the largest drug production and trafficking area, a.k.a ‘Golden Triangle’. (Windle et al.) Additionally, this paper explores the modus operandi of Drug syndicates, who exploit Thailand’s porous borders and extensive transportation infrastructure to traffic drugs both within the country and internationally.\nE-commerce: The growth of online marketplaces and the use of parcel delivery systems for drug transactions have made it more difficult to control the spread of illegal drugs (Thailand Country Report UN 2023)\nWorsening Socio-Economic Conditions in recent years, especially post COVID-19, has increased the demand for cheap drugs which are becoming more and more accessible due to the growth of distributed networks within and outside of Thailand, coupled with the growth in supply due to the emergence of synthetic variants. (UN Office of Drugs and Crime)\nDespite strict regulations and a crackdown on drugs in the country, policies have been criticised to have traditionally focused on law enforcement rather than harms reduction, often to the detriment of public health. The call for compassionate care for rehabilitating drug abuse users call for further action to address underlying causes, one of which is the reduction of needle sharing in overcrowded prisons which also may lead to transmission of diseases such as HIV(UNAIDS).\nDespite efforts to suppress drug cultivation, Thailand remains a significant hub for trafficking and faces ongoing challenges in addressing the complex socio-economic and health impacts of drug abuse.\n\n\nThailand has been facing the problem of being the illicit drug markets and trafficking routes from the Golden Triangle area. A large amount of Methamphetamine tablets (Yaba), crystal methamphetamine (Ice), heroin, ketamine, and cannabis are found being imported to Thailand. Northern and Northeastern border areas remained the main drug trafficking routes from the production sites in the Golden Triangle while some were smuggled through the Western border areas.\nThose drugs were transported to be kept in the central region, particularly Bangkok, before trafficking to the southern region of Thailand\nASEAN Drug Monitoring Report 2022\n\nAs mentioned earlier, Drug Law Enforecement is a key priority in the country, where the government employs (1) Drug Interdiction and (2) Drug Syndicate Suppression.\n\n\n\nFig 1: The arrested drug cases and drug offenders in Thailand during 2018 - 2022\n\n\nThe image above (Figure 1) depicts the Arrested Drug Cases and Drug Offenders in Thailand during 2018 - 2022 . We can thus subset our analysis later on into years of 2020 and 2021."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#getting-the-data-into-r-environment",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#getting-the-data-into-r-environment",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "",
    "text": "drug_offenses &lt;- read_parquet(\"data/aspatial/thai_drug_offenses_2017_2022.parquet\") \n\n\n\n\n\nThailand administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries. We will use admin1 - Province Level Boundary\n\n\nthailand_sf &lt;- st_read(dsn = \"data/geospatial\", layer=\"tha_admbnda_adm1_rtsd_20220121\") %&gt;% \n  select(ADM1_EN, geometry) %&gt;% \n  st_transform(crs = 32648)\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nWe will verify the coordinate reference systems of the Thailand object to ensure the assignment of the correct CRS value. We will go with UTM Zone 48N (EPSG: 32648), as this projection covers most of Thailand and works best for national-scale projects.\n\nst_crs(thailand_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\n\nhead(thailand_sf)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -18419.13 ymin: 1493846 xmax: 63151.73 ymax: 1641727\nProjected CRS: WGS 84 / UTM zone 48N\n                   ADM1_EN                       geometry\n1                  Bangkok MULTIPOLYGON (((25835.57 15...\n2             Samut Prakan MULTIPOLYGON (((38002.87 15...\n3               Nonthaburi MULTIPOLYGON (((-3347.358 1...\n4             Pathum Thani MULTIPOLYGON (((56466.67 15...\n5 Phra Nakhon Si Ayutthaya MULTIPOLYGON (((16427.34 16...\n6                Ang Thong MULTIPOLYGON (((-2670.024 1...\n\n\n\n\nAs observed from the HDX dataset, it uses multipolygon geometries. For spatial autocorrelation this may pose a problem in that the calculation of the centroid for a MULTIPOLYGON geometry may result in a point that lies outside the area of interest, such as in the sea or another inappropriate location.\nThis happens because the centroid is calculated based on the combined geometry of all constituent polygons, which can be spread across multiple, disjoint regions. Such misplaced centroids can distort spatial relationships and affect the accuracy of spatial autocorrelation analysis, leading to misleading interpretations of the data.\nTo mitigate this issue, converting MULTIPOLYGON geometries to POLYGON or selecting a representative polygon can ensure centroids are more accurately placed within each region, improving the reliability of spatial analysis.\n\nWe use the st_cast()to break up the data into individual polygons\nCalculate the area of each individual polygon and create a new column Shape_Area_Polygon\nWe keep the polygon relating to the corresponding shape_area\nResultant dataset will have POLYGON geometries\n\n\nthailand_sf &lt;- thailand_sf %&gt;%\n  st_cast(\"POLYGON\") %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(geometry = st_union(geometry)) %&gt;%\n  ungroup()\n\nWarning in st_cast.sf(., \"POLYGON\"): repeating attributes for all\nsub-geometries for which they may not be constant\n\nthailand_sf &lt;- thailand_sf %&gt;%\n  mutate(Shape_Area_Polygon = st_area(geometry) / 1e6)\n\nhead(thailand_sf)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -18419.13 ymin: 1459180 xmax: 506444.2 ymax: 2040603\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 6 × 3\n  ADM1_EN                                            geometry Shape_Area_Polygon\n  &lt;chr&gt;                                         &lt;POLYGON [m]&gt;              [m^2]\n1 Amnat Charoen ((495707.6 1800305, 495711.8 1800298, 495716…              3260.\n2 Ang Thong     ((-2670.024 1641280, -2648.057 1641233, -264…               949.\n3 Bangkok       ((25835.57 1547090, 25877.6 1547067, 25943.0…              1579.\n4 Bueng Kan     ((331560.4 2040603, 331689.4 2040595, 331900…              3990.\n5 Buri Ram      ((278292.9 1747365, 278292.9 1747365, 278292…             10062.\n6 Chachoengsao  ((74303.68 1548625, 74443.42 1548608, 74483.…              5181.\n\n\n\n\n\n\nTo obtain only relevant data, we filter it down to ADM1_EN, T_TL, ADM1_PCODE(Total Population within the Province)\n\npopulation_sf &lt;- read_csv(\"data/aspatial/tha_admpop_adm1_2023.csv\") %&gt;% \n  select(ADM1_EN, T_TL, ADM1_PCODE)\n\nRows: 77 Columns: 60\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): ISO3, ADM0_EN, ADM0_PCODE, ADM1_EN, ADM1_PCODE\ndbl (55): year, F_TL, M_TL, T_TL, F_00_04, F_05_09, F_10_14, F_15_19, F_20_2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(population_sf)\n\n[1] \"ADM1_EN\"    \"T_TL\"       \"ADM1_PCODE\"\n\n\nWe perform a relational join for the Thailand Population Dataset and Thailand Boundary Dataset, which will aid in subsequent analysis. Because they are both from HDX, data inconsistency is less likely to occur:\n\nthailand_population_sf &lt;- thailand_sf %&gt;% \n  left_join(population_sf, by=\"ADM1_EN\")\n\n\nhead(thailand_population_sf)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -18419.13 ymin: 1459180 xmax: 506444.2 ymax: 2040603\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 6 × 5\n  ADM1_EN                          geometry Shape_Area_Polygon   T_TL ADM1_PCODE\n  &lt;chr&gt;                       &lt;POLYGON [m]&gt;              [m^2]  &lt;dbl&gt; &lt;chr&gt;     \n1 Amnat Charoen ((495707.6 1800305, 495711…              3260. 1.80e5 TH37      \n2 Ang Thong     ((-2670.024 1641280, -2648…               949. 2.01e5 TH15      \n3 Bangkok       ((25835.57 1547090, 25877.…              1579. 1.15e7 TH10      \n4 Bueng Kan     ((331560.4 2040603, 331689…              3990. 2.84e5 TH38      \n5 Buri Ram      ((278292.9 1747365, 278292…             10062. 8.88e5 TH31      \n6 Chachoengsao  ((74303.68 1548625, 74443.…              5181. 7.31e5 TH24"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#data-cleaning",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#data-cleaning",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "",
    "text": "After inspecting the 2 dataests, we see we can potentially perform a relational join using the Province Names (in English). However we have to check and ensure the names match up to perform a 1-1 mapping, and avoid the potential erroneous loss of data.\nIn the code chunk below, we cleanse the province names for the datasets:\n\nclean_names &lt;- function(column) {\n  gsub(\"\\\\s+\", \" \", trimws(column))\n}\n\ndrug_offenses$province_en &lt;- clean_names(drug_offenses$province_en)\nthailand_population_sf$ADM1_EN &lt;- clean_names(thailand_population_sf$ADM1_EN)\n\nprov_not_in_thai_sf &lt;- setdiff(unique(drug_offenses$province_en), unique(thailand_population_sf$ADM1_EN))\nprov_not_in_offenses_sf &lt;- setdiff(unique(thailand_population_sf$ADM1_EN), unique(drug_offenses$province_en))\n\n# Create a lookup table for mismatched names\nlookup &lt;- data.frame(\n  province_en = prov_not_in_thai_sf,\n  correct_province = prov_not_in_offenses_sf\n)\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  left_join(lookup, by = \"province_en\") %&gt;%\n  mutate(province_en = coalesce(correct_province, province_en)) %&gt;%\n  select(-correct_province)\n\nlookup\n\n  province_en correct_province\n1      Loburi        Bueng Kan\n2     buogkan         Lop Buri\n\n\n\nsetdiff() function is used to perform an exact match.\nBecause it does not account for whitespace, I used the trimws() function to see if there are potential names missed out due to mismatches.\n\nThe code chunk above follows the naming convention done in the Thailand dataset, because it follows HDX dataset cleaning practices. It performs a relational join and replaces mismatched names. We keep the original if no match is found in the lookup data frame and remove the temporary replacement column at the end\n\nunique(drug_offenses$province_en)\n\n [1] \"Bangkok\"                  \"Chai Nat\"                \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Bueng Kan\"               \n [7] \"Samut Prakan\"             \"Saraburi\"                \n [9] \"Sing Buri\"                \"Ang Thong\"               \n[11] \"Chanthaburi\"              \"Chachoengsao\"            \n[13] \"Chon Buri\"                \"Trat\"                    \n[15] \"Nakhon Nayok\"             \"Prachin Buri\"            \n[17] \"Rayong\"                   \"Sa Kaeo\"                 \n[19] \"Chaiyaphum\"               \"Nakhon Ratchasima\"       \n[21] \"Buri Ram\"                 \"Yasothon\"                \n[23] \"Si Sa Ket\"                \"Surin\"                   \n[25] \"Amnat Charoen\"            \"Ubon Ratchathani\"        \n[27] \"Kalasin\"                  \"Khon Kaen\"               \n[29] \"Nakhon Phanom\"            \"Lop Buri\"                \n[31] \"Maha Sarakham\"            \"Mukdahan\"                \n[33] \"Roi Et\"                   \"Loei\"                    \n[35] \"Sakon Nakhon\"             \"Nong Khai\"               \n[37] \"Nong Bua Lam Phu\"         \"Udon Thani\"              \n[39] \"Chiang Rai\"               \"Chiang Mai\"              \n[41] \"Nan\"                      \"Phayao\"                  \n[43] \"Phrae\"                    \"Mae Hong Son\"            \n[45] \"Lampang\"                  \"Lamphun\"                 \n[47] \"Kamphaeng Phet\"           \"Tak\"                     \n[49] \"Nakhon Sawan\"             \"Phichit\"                 \n[51] \"Phitsanulok\"              \"Phetchabun\"              \n[53] \"Sukhothai\"                \"Uttaradit\"               \n[55] \"Uthai Thani\"              \"Kanchanaburi\"            \n[57] \"Nakhon Pathom\"            \"Prachuap Khiri Khan\"     \n[59] \"Phetchaburi\"              \"Ratchaburi\"              \n[61] \"Samut Songkhram\"          \"Samut Sakhon\"            \n[63] \"Suphan Buri\"              \"Krabi\"                   \n[65] \"Chumphon\"                 \"Nakhon Si Thammarat\"     \n[67] \"Phangnga\"                 \"Phuket\"                  \n[69] \"Ranong\"                   \"Surat Thani\"             \n[71] \"Trang\"                    \"Narathiwat\"              \n[73] \"Pattani\"                  \"Phatthalung\"             \n[75] \"Yala\"                     \"Songkhla\"                \n[77] \"Satun\"                   \n\n\nAs we are investigating indicators of drug abuse, we can drop columns with ‘suspects_in’ for the different cases since they are more of an indicator for law enforcement, rather than the socio-cultural and health aspects that may be more relevant.\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  filter(!grepl(\"^suspects_in\", types_of_drug_offenses)) %&gt;% \n  select(-province_th)\n\n\nunique(drug_offenses$types_of_drug_offenses)\n\n[1] \"drug_use_cases\"                            \n[2] \"possession_cases\"                          \n[3] \"possession_with_intent_to_distribute_cases\"\n[4] \"trafficking_cases\"                         \n[5] \"production_cases\"                          \n[6] \"import_cases\"                              \n[7] \"export_cases\"                              \n[8] \"conspiracy_cases\"                          \n\n\nBy performing EDA on the yearly data, we first aggregate the number of cases per indicator by year:\n\nyearly_statistics &lt;- drug_offenses %&gt;% \n  group_by(fiscal_year, types_of_drug_offenses) %&gt;% \n  summarize(total_cases = sum(no_cases, na.rm=TRUE)) %&gt;% \n  pivot_wider(\n    names_from = types_of_drug_offenses, \n    values_from = total_cases\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'fiscal_year'. You can override using the\n`.groups` argument.\n\ntotal_cases_per_type &lt;- yearly_statistics %&gt;% \n  select(-fiscal_year) %&gt;% \n  summarize(across(everything(), sum, na.rm=TRUE))\n\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `across(everything(), sum, na.rm = TRUE)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\ntotal_cases_all &lt;- sum(total_cases_per_type)\n\nproportion_cases &lt;- total_cases_per_type / total_cases_all * 100 \n\nproportion_cases &lt;- proportion_cases %&gt;% \n  pivot_longer(cols = everything(), \n               names_to = \"types_of_drug_offenses\", \n               values_to = \"proportion\") %&gt;% \n  arrange(desc(proportion))\n\nproportion_cases\n\n# A tibble: 8 × 2\n  types_of_drug_offenses                     proportion\n  &lt;chr&gt;                                           &lt;dbl&gt;\n1 drug_use_cases                               47.6    \n2 possession_cases                             28.0    \n3 possession_with_intent_to_distribute_cases   17.7    \n4 trafficking_cases                             3.56   \n5 production_cases                              2.96   \n6 conspiracy_cases                              0.0478 \n7 import_cases                                  0.0447 \n8 export_cases                                  0.00437\n\n\n\n\n\n\nggplot(proportion_cases, aes(x = reorder(types_of_drug_offenses, proportion), y = proportion)) +\n  geom_col(fill = \"red\") +\n  geom_text(aes(label = round(proportion,1), hjust = -0.1)) + \n  coord_flip() +  # Flip coordinates to have horizontal bars\n  labs(\n    title = \"Proportion of Total Drug Offense (Cases Over 5 Years)2017 - 2022) \",\n    x = \"Types of Drug Offenses\",\n    y = \"Proportion (%)\"\n  ) +\n  theme_minimal() +\n  ylim(0, max(proportion_cases$proportion) + 10)\n\n\n\n\n\n\n\n\nLastly, based on yearly statistics, we aggregate data by focusing on these offense types:\n\nDrug Use Cases\nTrafficking\n\nWhile trafficking only accounts for ~3% of cases, the proximity of ‘The Golden Triangle’ make the country a location of interest in drug trafficking in SEA, on top of the rampant drug use in the region.\n\ndrug_offenses &lt;- drug_offenses %&gt;% \n  filter(types_of_drug_offenses %in% c(\"drug_use_cases\",\"trafficking_cases\")) %&gt;%\n  pivot_wider(\n    names_from = types_of_drug_offenses, \n    values_from = no_cases\n  ) %&gt;% \n  ungroup() \n\nhead(drug_offenses)\n\n# A tibble: 6 × 4\n  fiscal_year province_en              drug_use_cases trafficking_cases\n        &lt;int&gt; &lt;chr&gt;                             &lt;int&gt;             &lt;int&gt;\n1        2017 Bangkok                           11871               950\n2        2017 Chai Nat                            200               210\n3        2017 Nonthaburi                          553               118\n4        2017 Pathum Thani                        450                83\n5        2017 Phra Nakhon Si Ayutthaya            378               164\n6        2017 Bueng Kan                           727               261\n\ncolnames(drug_offenses)\n\n[1] \"fiscal_year\"       \"province_en\"       \"drug_use_cases\"   \n[4] \"trafficking_cases\"\n\n\n\ndrug_use_cases_offenses &lt;- drug_offenses %&gt;% \n  select(1:3) %&gt;% \n  mutate(types_of_drug_offenses = \"drug_use_cases\") %&gt;% \n  pivot_wider(\n    names_from = fiscal_year, \n    values_from = drug_use_cases\n  )\n\ntrafficking_cases_offenses &lt;- drug_offenses %&gt;% \n  select(1:2, 4) %&gt;% \n  mutate(types_of_drug_offenses = \"trafficking_cases\") %&gt;% \n  pivot_wider(\n    names_from = fiscal_year, \n    values_from = trafficking_cases\n  )\n\n\ndrug_use_cases_offenses\n\n# A tibble: 77 × 8\n   province_en  types_of_drug_offenses `2017` `2018` `2019` `2020` `2021` `2022`\n   &lt;chr&gt;        &lt;chr&gt;                   &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n 1 Bangkok      drug_use_cases          11871  16480  15067   9724   9625   2755\n 2 Chai Nat     drug_use_cases            200    422    957    822    763    617\n 3 Nonthaburi   drug_use_cases            553   1661   1719    937   3202    809\n 4 Pathum Thani drug_use_cases            450   1823   2994   1192   1747   1599\n 5 Phra Nakhon… drug_use_cases            378   1123   2470   1745   1766   1298\n 6 Bueng Kan    drug_use_cases            727   1850   2262   1487   1925    985\n 7 Samut Prakan drug_use_cases            820   3015   4602   1816   2515   1953\n 8 Saraburi     drug_use_cases             69    628    843    744   1106    839\n 9 Sing Buri    drug_use_cases            127    402    582    309    683    493\n10 Ang Thong    drug_use_cases            208    660    657    423    755    784\n# ℹ 67 more rows\n\n\n\ntrafficking_cases_offenses\n\n# A tibble: 77 × 8\n   province_en  types_of_drug_offenses `2017` `2018` `2019` `2020` `2021` `2022`\n   &lt;chr&gt;        &lt;chr&gt;                   &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n 1 Bangkok      trafficking_cases         950    623    428    352    250    233\n 2 Chai Nat     trafficking_cases         210    151    101    117     97    142\n 3 Nonthaburi   trafficking_cases         118    113     72     80     60     31\n 4 Pathum Thani trafficking_cases          83     68     23     69    106     80\n 5 Phra Nakhon… trafficking_cases         164    164    124    167    112     72\n 6 Bueng Kan    trafficking_cases         261    234    151    174    142    106\n 7 Samut Prakan trafficking_cases         201    112     76    136    159    199\n 8 Saraburi     trafficking_cases          58     45     36     50     69     35\n 9 Sing Buri    trafficking_cases          41     44     33     48     40     26\n10 Ang Thong    trafficking_cases          51     61     56     46     51     75\n# ℹ 67 more rows\n\n\n\nthailand_population_sf\n\nSimple feature collection with 77 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -313055.3 ymin: 621843.5 xmax: 568269.6 ymax: 2271054\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 77 × 5\n   ADM1_EN                         geometry Shape_Area_Polygon   T_TL ADM1_PCODE\n * &lt;chr&gt;                     &lt;GEOMETRY [m]&gt;              [m^2]  &lt;dbl&gt; &lt;chr&gt;     \n 1 Amnat Charoen POLYGON ((495707.6 180030…              3260. 1.80e5 TH37      \n 2 Ang Thong     POLYGON ((-2670.024 16412…               949. 2.01e5 TH15      \n 3 Bangkok       POLYGON ((25835.57 154709…              1579. 1.15e7 TH10      \n 4 Bueng Kan     POLYGON ((331560.4 204060…              3990. 2.84e5 TH38      \n 5 Buri Ram      POLYGON ((278292.9 174736…             10062. 8.88e5 TH31      \n 6 Chachoengsao  POLYGON ((74303.68 154862…              5181. 7.31e5 TH24      \n 7 Chai Nat      POLYGON ((-24181.19 17098…              2502. 2.10e5 TH18      \n 8 Chaiyaphum    POLYGON ((133164.1 185269…             12642. 6.94e5 TH36      \n 9 Chanthaburi   MULTIPOLYGON (((201062.9 …              6414. 4.20e5 TH22      \n10 Chiang Mai    POLYGON ((-72871.25 22361…             22400. 1.79e6 TH50      \n# ℹ 67 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#performing-relational-join",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#performing-relational-join",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "",
    "text": "We check for duplicates before joining:\n\nduplicated_rows &lt;- drug_offenses[duplicated(drug_offenses), ]\nduplicated_rows\n\n# A tibble: 0 × 4\n# ℹ 4 variables: fiscal_year &lt;int&gt;, province_en &lt;chr&gt;, drug_use_cases &lt;int&gt;,\n#   trafficking_cases &lt;int&gt;\n\n\n\nthai_drug_use_sf &lt;- drug_use_cases_offenses %&gt;% \n  left_join(thailand_population_sf, by = c(\"province_en\" = \"ADM1_EN\")) %&gt;% \n  rename(population_count = T_TL) %&gt;% \n  st_as_sf()\n\nthai_trafficking_sf &lt;- trafficking_cases_offenses %&gt;% \n  left_join(thailand_population_sf, by = c(\"province_en\" = \"ADM1_EN\")) %&gt;% \n  rename(population_count = T_TL) %&gt;% \n  st_as_sf()\n\nWe save the cleaned dataset in rds:\n\nwrite_rds(thai_drug_use_sf, \"data/rds/thai_drug_use_sf.rds\")\nwrite_rds(thai_trafficking_sf, \"data/rds/thai_trafficking_sf.rds\")\n\n\nthai_drug_use_sf &lt;- read_rds(\"data/rds/thai_drug_use_sf.rds\") %&gt;% \n  st_transform(crs = 32648)\n\nthai_trafficking_sf &lt;- read_rds(\"data/rds/thai_trafficking_sf.rds\") %&gt;% \n  st_transform(crs = 32648)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-queeen-contiguity-based-neighbours",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-queeen-contiguity-based-neighbours",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "3.1 Computing QUEEEN Contiguity Based Neighbours",
    "text": "3.1 Computing QUEEEN Contiguity Based Neighbours\nThe code chunk below is used to compute Queen Contiguity Weight Matrix, using the st_contiguity() function from the sfdep package.\n\ngeo &lt;- st_geometry(thai_drug_use_sf)\nwm_q &lt;- st_contiguity(geo, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n68\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n28 48 with 9 links\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe summary report shows that there are 77 regions in Thailand, The most connected areas are Khon Kaen and Nakhon Sawan, with a neighbour of 9 links each. There is 1 region with no links, which is 68 (Phuket)\n\n\nThe code chunk below lists down the neighbours of the 2 most connected regions:\n\nthai_drug_use_sf$province_en[68]\n\n[1] \"Phuket\"\n\nthai_drug_use_sf$province_en[28]\n\n[1] \"Khon Kaen\"\n\nthai_drug_use_sf$province_en[49]\n\n[1] \"Nakhon Sawan\"\n\n\nTo get the neighbour names of the most connected areas, we run the following code chunk\n\nneighbors_28 &lt;- wm_q[[28]]\nneighbors_49 &lt;- wm_q[[49]]\nneighbor_names_28 &lt;- thai_drug_use_sf$province_en[neighbors_28]\nneighbor_names_49 &lt;- thai_drug_use_sf$province_en[neighbors_49]\n\nneighbor_names_28\n\n[1] \"Chaiyaphum\"        \"Nakhon Ratchasima\" \"Buri Ram\"         \n[4] \"Kalasin\"           \"Maha Sarakham\"     \"Loei\"             \n[7] \"Nong Bua Lam Phu\"  \"Udon Thani\"        \"Phetchabun\"       \n\ncat(rep(\"-\", 50), sep = \"\", \"\\n\")\n\n--------------------------------------------------\n\nneighbor_names_49\n\n[1] \"Chai Nat\"       \"Sing Buri\"      \"Lop Buri\"       \"Kamphaeng Phet\"\n[5] \"Tak\"            \"Phichit\"        \"Phetchabun\"     \"Uthai Thani\""
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#creating-rook-contiguity-based-neighbours",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#creating-rook-contiguity-based-neighbours",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "3.2 Creating ROOK Contiguity Based Neighbours",
    "text": "3.2 Creating ROOK Contiguity Based Neighbours\n\ngeo &lt;- st_geometry(thai_drug_use_sf)\nwm_r &lt;- st_contiguity(geo, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n68\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n28 48 with 9 links\n\n\nWe can identify higher order neighbors with st_nb_lag() and the cumulative higher order neighbors with st_nb_lag_cumul().\n\nst_nb_lag(wm_q, 2)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 632 \nPercentage nonzero weights: 10.65947 \nAverage number of links: 8.207792 \n1 region with no links:\n68\n2 disjoint connected subgraphs\n\nst_nb_lag_cumul(wm_q, 2)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 984 \nPercentage nonzero weights: 16.59639 \nAverage number of links: 12.77922 \n1 region with no links:\n68\n2 disjoint connected subgraphs\n\ncat(rep(\"-\", 50), sep = \"\", \"\\n\")\n\n--------------------------------------------------\n\nst_nb_lag(wm_r, 2)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 632 \nPercentage nonzero weights: 10.65947 \nAverage number of links: 8.207792 \n1 region with no links:\n68\n2 disjoint connected subgraphs\n\nst_nb_lag_cumul(wm_r, 2)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 984 \nPercentage nonzero weights: 16.59639 \nAverage number of links: 12.77922 \n1 region with no links:\n68\n2 disjoint connected subgraphs\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe output shows two different spatial weight configurations. The first has fewer links between regions and a lower percentage of nonzero weights, while the second is more densely connected with more links and higher neighbor averages, naturally because it identifies higher order neighbours.\n#Things that could account for similarity (although theoretically Queen Contiguity should have more links) :\n#Data Precision and Geometry:\nThe geometry of the polygons might be such that no region only shares a corner. In other words, all adjacent regions share boundaries (edges), and none of the regions are connected just by touching a vertex. This can occur if the polygons are digitized in a way that makes the regions connect primarily through edges.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis can arise because when we went from mutipolygon to polygon geometries, we took the largest polygon for each province, this affects vs Rook vs Queen Contiguity in the following ways:\nCoversion of multipolygon to polygon can mean that the smaller polygons that provided vertex-only connections might have been discarded. Only shared edges remain and there are no polygons left that are just touching corners"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-contiguity-weights",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-contiguity-weights",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "3.3 Visualizing Contiguity Weights",
    "text": "3.3 Visualizing Contiguity Weights\nBefore proceeding, we will maintain the current use of m in our analysis to keep the precision in calculation, ensuring compatibility over time and standard interpretation of results. This is especially important in the longitude and latitude obtained from st_centroid (code chunk below) which are easting and northing values in meters, rather than geographic coordinates in degrees.\nThe code chunk below calculates the longitude and latitude values of the geometry column:\n\nlongitude &lt;- map_dbl(thai_drug_use_sf$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(thai_drug_use_sf$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n      longitude latitude\n[1,]  26492.164  1526801\n[2,] -34842.960  1679204\n[3,]   1827.181  1544166\n[4,]  33467.801  1559209\n[5,]  17202.482  1590593\n[6,] 363656.392  2007130\n\n\n\n3.3.1 Plotting QUEEN (BLUE) & ROOK (RED) Contiguity Based Neighbour Maps\n\npar(mfrow = c(1, 3))\n\n#Queen Contiguity\nplot(thai_drug_use_sf$geometry, border = \"lightgrey\", main = \"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = 'blue')\n\n#Rook Contiguity\nplot(thai_drug_use_sf$geometry, border = \"lightgrey\", main = \"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = 'red')\n\nplot(thai_drug_use_sf$geometry, border = \"lightgrey\", main = \"Queen & Rook Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = adjustcolor('blue', alpha.f = 0.5))\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = adjustcolor('red', alpha.f = 0.5))\n\n\n\n\n\n\n\npar(mfrow = c(1, 1))"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#determine-the-cut-off-distance",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#determine-the-cut-off-distance",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "4.1 Determine the cut-off distance",
    "text": "4.1 Determine the cut-off distance\nWe do so with the following steps:\nStep 1: Determine the Set of k Nearest Neighbors (st_knn() in sfdep). We start with k = 1 to determine the minimum distance guaranteeing connectivity for all points, mirroring the knearneigh() from spdep.\nStep 2: Convert the knn Object into a Neighbor List\nStep 3: Calculate Distances Between Neighbors(nbdists() in spdep) | st_distance() in sfdep\nStep 4: Remove the List Structure (unlist() in sfdep)\n\nknn &lt;- st_knn(coords, k = 1)\n\ndistances &lt;- sapply(seq_along(knn), function(i){\n  neighbours &lt;- knn[[i]]\n  st_distance(st_point(coords[i, ]), st_point(coords[neighbours, ]))\n})\n\nunlisted_distances &lt;- unlist(distances) \n\nsummary(unlisted_distances)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21596   52044   64315   63383   76865  111489 \n\n\nThe summary report shows the largest first nearest neighbour distance is 111.489 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour (with the exception of Phuket)."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-fixed-distance-weight-matrix",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-fixed-distance-weight-matrix",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "4.2 Computing fixed distance weight Matrix",
    "text": "4.2 Computing fixed distance weight Matrix\nWe compute the distance weight matrix using st_dnearneigh() as shown in the code chunk below\n\nwm_d112 &lt;- dnearneigh(coords, 0, 112000)\nwm_d112\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 354 \nPercentage nonzero weights: 5.970653 \nAverage number of links: 4.597403 \n2 disjoint connected subgraphs\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nInterpretation: - Average Number of Links : 4.623377 - On average, each region has approximately 4.62 neighbours within the 112km distance threshold. - 2 disjoint connected subgraphs – 2regions are not connected between regions in different groups.\n\n\n\ntable(thai_drug_use_sf$province_en, card(wm_d112))\n\n                          \n                           1 2 3 4 5 6 7 8 9 10 11 12 13 14\n  Amnat Charoen            0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Ang Thong                0 0 0 0 0 0 0 0 0  0  1  0  0  0\n  Bangkok                  0 0 0 0 0 0 0 0 0  0  0  1  0  0\n  Bueng Kan                0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Buri Ram                 0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Chachoengsao             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Chai Nat                 0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Chaiyaphum               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Chanthaburi              0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Chiang Mai               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Chiang Rai               1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Chon Buri                0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Chumphon                 1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Kalasin                  0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Kamphaeng Phet           0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Kanchanaburi             0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Khon Kaen                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Krabi                    0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Lampang                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Lamphun                  0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Loei                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Lop Buri                 0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Mae Hong Son             1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Maha Sarakham            0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Mukdahan                 0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Nakhon Nayok             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Pathom            0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Phanom            0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Ratchasima        1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Sawan             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Nakhon Si Thammarat      0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nan                      0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Narathiwat               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nong Bua Lam Phu         0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nong Khai                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Nonthaburi               0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Pathum Thani             0 0 0 0 0 0 0 0 0  0  0  0  0  1\n  Pattani                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phangnga                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phatthalung              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phayao                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Phetchabun               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phetchaburi              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phichit                  0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phitsanulok              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phra Nakhon Si Ayutthaya 0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Phrae                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phuket                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Prachin Buri             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Prachuap Khiri Khan      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ranong                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Ratchaburi               0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Rayong                   0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Roi Et                   0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Sa Kaeo                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Sakon Nakhon             0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Samut Prakan             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Samut Sakhon             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Samut Songkhram          0 0 0 0 0 0 0 1 0  0  0  0  0  0\n  Saraburi                 0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Satun                    0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Si Sa Ket                0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Sing Buri                0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Songkhla                 0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Sukhothai                0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Suphan Buri              0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Surat Thani              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Surin                    0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Tak                      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Trang                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Trat                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ubon Ratchathani         0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Udon Thani               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Uthai Thani              0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Uttaradit                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Yala                     0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Yasothon                 0 0 0 1 0 0 0 0 0  0  0  0  0  0\n\n\n\n4.2.1 Plotting Fixed Distance Weight Matrix\n\nplot(thai_drug_use_sf$geometry, border=\"lightgrey\")\nplot(wm_d112, coords, add=TRUE)\nplot(knn, coords, add=TRUE, col=\"blue\", length=0.08)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-contiguity-weights-1",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-contiguity-weights-1",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "4.3 Visualizing Contiguity Weights",
    "text": "4.3 Visualizing Contiguity Weights\nThe blue lines show the links of the 1st nearest neighbours and the black lines show the links of the neighbours within the cut-off distance of 112km.\nWe can plot it side by side to see a closer look:\n\npar(mfrow=c(1,2))\nplot(thai_drug_use_sf$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(knn, coords, add=TRUE, col=\"blue\", length=0.08)\nplot(thai_drug_use_sf$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d112, coords, add=TRUE, pch = 19, cex = 0.6)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#spatial-lag-with-row-standardized-weights",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#spatial-lag-with-row-standardized-weights",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "7.1 Spatial Lag with row-standardized weights",
    "text": "7.1 Spatial Lag with row-standardized weights\nWe compute the average neighbour Drug Use Per Capita (DUPC) for each polygon, which are spatially lagged values, after which we append the spatially lagged DUPC data onto the thai_drug_use_sf data frame.\n\ndupc_2022.lag &lt;- st_lag(thai_drug_use_sf$DUPC_2022, \n                        nb = wm_q, \n                        wt = rswm_q, \n                        allow_zero=TRUE)\nthai_drug_use_sf &lt;- cbind(thai_drug_use_sf, dupc_2022.lag)\ncolnames(thai_drug_use_sf) &lt;- gsub(\"^X\", \"\", colnames(thai_drug_use_sf))\ncolnames(thai_drug_use_sf)\n\n [1] \"province_en\"            \"types_of_drug_offenses\" \"2017\"                  \n [4] \"2018\"                   \"2019\"                   \"2020\"                  \n [7] \"2021\"                   \"2022\"                   \"Shape_Area_Polygon\"    \n[10] \"population_count\"       \"ADM1_PCODE\"             \"DUPC_2017\"             \n[13] \"DUPC_2018\"              \"DUPC_2019\"              \"DUPC_2020\"             \n[16] \"DUPC_2021\"              \"DUPC_2022\"              \"dupc_2022.lag\"         \n[19] \"geometry\"              \n\n\n\ndtpc_2022.lag &lt;- st_lag(thai_trafficking_sf$DTPC_2022, \n                        nb = wm_q, \n                        wt = rswm_q, \n                        allow_zero = TRUE)\n\nthai_trafficking_sf &lt;- cbind(thai_trafficking_sf, dtpc_2022.lag)\n\ncolnames(thai_trafficking_sf)\n\n [1] \"province_en\"            \"types_of_drug_offenses\" \"X2017\"                 \n [4] \"X2018\"                  \"X2019\"                  \"X2020\"                 \n [7] \"X2021\"                  \"X2022\"                  \"Shape_Area_Polygon\"    \n[10] \"population_count\"       \"ADM1_PCODE\"             \"DTPC_2017\"             \n[13] \"DTPC_2018\"              \"DTPC_2019\"              \"DTPC_2020\"             \n[16] \"DTPC_2021\"              \"DTPC_2022\"              \"dtpc_2022.lag\"         \n[19] \"geometry\"              \n\n\nWe plot the DUPC and the spatial Lag DUPC for comparison using the code chunk below:\n\ndupc_2022 &lt;- qtm(thai_drug_use_sf, \"DUPC_2022\", fill.palette = \"Blues\")\ndupc_2022_lag &lt;- qtm(thai_drug_use_sf, \"dupc_2022.lag\", fill.palette = \"Blues\")\n\ntmap_arrange(dupc_2022, dupc_2022_lag, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe same goes for the DTPC:\n\ndtpc_2022 &lt;- qtm(thai_trafficking_sf, \"DTPC_2022\", fill.palette = \"Purples\")\ndtpc_2022_lag &lt;- qtm(thai_trafficking_sf, \"dtpc_2022.lag\", fill.palette = \"Purples\")\n\ntmap_arrange(dtpc_2022, dtpc_2022_lag, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#space-time-cube",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#space-time-cube",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "7.2 Space Time Cube",
    "text": "7.2 Space Time Cube\nSince our data is in wide format with 1 column per year, we reshape it so each row represents unique combination of province and year\n\nthai_drug_use_long &lt;- thai_drug_use_sf %&gt;%\n  select(province_en, geometry,\n         DUPC_2017, DUPC_2018, DUPC_2019, DUPC_2020, DUPC_2021, DUPC_2022) %&gt;%\n  pivot_longer(cols = starts_with(\"DUPC_\"),\n               names_to = \"year\",\n               names_prefix = \"DUPC_\",\n               values_to = \"DUPC\") %&gt;%\n  mutate(year = as.numeric(year))\n\n# View reshaped data\nhead(thai_drug_use_long)\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -5466.696 ymin: 1496356 xmax: 60719 ymax: 1547173\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 6 × 4\n  province_en                                             geometry  year    DUPC\n  &lt;chr&gt;                                              &lt;POLYGON [m]&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Bangkok     ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…  2017 1.03e-3\n2 Bangkok     ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…  2018 1.44e-3\n3 Bangkok     ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…  2019 1.31e-3\n4 Bangkok     ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…  2020 8.47e-4\n5 Bangkok     ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…  2021 8.38e-4\n6 Bangkok     ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…  2022 2.40e-4\n\n\nNow that the data is in long format, we can create the spacetime object using the as_spacetime() function from the sfdep package.\n\ncolnames(thai_drug_use_long)\n\n[1] \"province_en\" \"geometry\"    \"year\"        \"DUPC\"       \n\n\n\nspt &lt;- as_spacetime(\n  thai_drug_use_long, \n  .loc_col = \"province_en\",  \n  .time_col = \"year\"        \n)\n\nspt\n\nspacetime ────\n\n\nContext:`data`\n\n\n77 locations `province_en`\n\n\n6 time periods `year`\n\n\n── data context ────────────────────────────────────────────────────────────────\n\n\n# A tibble: 462 × 3\n   province_en  year     DUPC\n * &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;\n 1 Bangkok      2017 0.00103 \n 2 Bangkok      2018 0.00144 \n 3 Bangkok      2019 0.00131 \n 4 Bangkok      2020 0.000847\n 5 Bangkok      2021 0.000838\n 6 Bangkok      2022 0.000240\n 7 Chai Nat     2017 0.000951\n 8 Chai Nat     2018 0.00201 \n 9 Chai Nat     2019 0.00455 \n10 Chai Nat     2020 0.00391 \n# ℹ 452 more rows\n\n\n\nis_spacetime_cube(spt)\n\n[1] TRUE\n\n\n\n7.5.2 Spacetime Contexts\nTo switch between the data and geometry contexts, we use activate() from sfdep:\n\nactivate(spt, \"data\")\n\nspacetime ────\n\n\nContext:`data`\n\n\n77 locations `province_en`\n\n\n6 time periods `year`\n\n\n── data context ────────────────────────────────────────────────────────────────\n\n\n# A tibble: 462 × 3\n   province_en  year     DUPC\n * &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;\n 1 Bangkok      2017 0.00103 \n 2 Bangkok      2018 0.00144 \n 3 Bangkok      2019 0.00131 \n 4 Bangkok      2020 0.000847\n 5 Bangkok      2021 0.000838\n 6 Bangkok      2022 0.000240\n 7 Chai Nat     2017 0.000951\n 8 Chai Nat     2018 0.00201 \n 9 Chai Nat     2019 0.00455 \n10 Chai Nat     2020 0.00391 \n# ℹ 452 more rows\n\n\n\nactivate(spt, \"geometry\")\n\nspacetime ────\n\n\nContext:`geometry`\n\n\n77 locations `province_en`\n\n\n6 time periods `year`\n\n\n── geometry context ────────────────────────────────────────────────────────────\n\n\nSimple feature collection with 77 features and 1 field\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -313055.3 ymin: 621843.5 xmax: 568269.6 ymax: 2271054\nProjected CRS: WGS 84 / UTM zone 48N\n# A tibble: 77 × 2\n   province_en                                                          geometry\n * &lt;chr&gt;                                                           &lt;POLYGON [m]&gt;\n 1 Bangkok                  ((25835.57 1547090, 25877.6 1547067, 25943.05 15470…\n 2 Chai Nat                 ((-24181.19 1709887, -24055.04 1709874, -23850.75 1…\n 3 Nonthaburi               ((-3347.358 1563866, -3349.975 1563780, -3350.358 1…\n 4 Pathum Thani             ((56466.67 1578825, 56464.46 1578591, 56470.24 1578…\n 5 Phra Nakhon Si Ayutthaya ((16427.34 1625110, 16443.28 1625108, 16467.33 1625…\n 6 Bueng Kan                ((331560.4 2040603, 331689.4 2040595, 331900.1 2040…\n 7 Samut Prakan             ((38002.87 1520530, 38009.33 1520494, 38079.34 1520…\n 8 Saraburi                 ((112824.3 1669647, 112830.8 1669647, 112857.4 1669…\n 9 Sing Buri                ((1875.759 1673463, 1947.294 1673428, 2058.61 16733…\n10 Ang Thong                ((-2670.024 1641280, -2648.057 1641233, -2641.796 1…\n# ℹ 67 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#morans-i-test",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#morans-i-test",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "8.1 Moran’s I Test",
    "text": "8.1 Moran’s I Test\nThe code chunk below performs Moran’s I statistical testing using global_moran()of sfdep, as well as global_moran_test().\n\nThe first gives us a measure of spatial autocorrelation of drug_use_cases throughout the years\nThe second function tells us if the autocorrelation is statistically significant.\n\nDUPC\n\nglobal_moran(thai_drug_use_sf$DUPC_2022, \n             nb = wm_q, \n             wt = rswm_q, \n             na_ok=TRUE)\n\nWarning in lag.listw(listw, z, zero.policy = zero.policy, NAOK = NAOK): NAs in\nlagged values\n\n\n$I\n[1] 0.3244175\n\n$K\n[1] 3.125771\n\n\nGlobal Moran’s I Result:\nMoran’s I value: 0.3244175\nPositive Spatial Autocorrelation: means regions with similar values are clustered together, indicating moderately positive spatial autocorrelation for DUPC in 2022\nK-value (K = 3.125771)\nK value of 3.125771 suggests that there is notable clustering in the data, meaning that spatial autocorrelation is present and is non-random.\nDTPC\n\nglobal_moran(thai_trafficking_sf$DTPC_2022, \n             nb = wm_q, \n             wt = rswm_q, \n             na_ok=TRUE)\n\nWarning in lag.listw(listw, z, zero.policy = zero.policy, NAOK = NAOK): NAs in\nlagged values\n\n\n$I\n[1] 0.2305723\n\n$K\n[1] 4.881418\n\n\nGlobal Moran’s I Result:\nMoran’s I value: 0.2305723\nPositive Spatial Autocorrelation: means regions with similar values are clustered together, indicating moderately positive spatial autocorrelation for DTPC in 2022\nK-value (K = 4.881418)\nK value of 4.881418 suggests that there is notable clustering in the data, meaning that spatial autocorrelation is present and is non-random.\n\nglobal_moran_test(thai_drug_use_sf$DUPC_2022, \n             nb = wm_q, \n             wt = rswm_q, \n             zero.policy=TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 4.3479, p-value = 6.871e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.320204319      -0.013333333       0.005884666 \n\n\n\nglobal_moran_test(thai_trafficking_sf$DTPC_2022, \n             nb = wm_q, \n             wt = rswm_q, \n             zero.policy=TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 3.1799, p-value = 0.0007366\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.227577876      -0.013333333       0.005739597 \n\n\n\n\n\n\n\n\nNote\n\n\n\nInterpretation: Statistical Significance of the Global Moran Test\n\np-value: Strongly significant, rejecting the null hypothesis of no spatial autocorrelation.\nExpectation (-0.013): Expected Moran’s I under null hypothesis; observed value is much higher, supporting positive spatial clustering."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-monte-carlo-morans-i",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-monte-carlo-morans-i",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "8.2 Computing Monte Carlo Moran’s I",
    "text": "8.2 Computing Monte Carlo Moran’s I\nDUPC\n\nmc_mi_g_dupc &lt;- global_moran_perm(thai_drug_use_sf$DUPC_2022, \n                               nb = wm_q, \n                               wt = rswm_q, \n                               nsim=999, \n                               zero.policy=TRUE, \n                               na.action=na.omit)\nmc_mi_g_dupc\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.3202, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nDTPC\n\nmc_mi_g_dtpc &lt;- global_moran_perm(thai_trafficking_sf$DTPC_2022, \n                               nb = wm_q, \n                               wt = rswm_q, \n                               nsim=999, \n                               zero.policy=TRUE, \n                               na.action=na.omit)\nmc_mi_g_dtpc\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.22758, observed rank = 994, p-value = 0.012\nalternative hypothesis: two.sided\n\n\nInterpretation: Moran’s I Interpretation for Drug Use Per Capita (2022):\n\np-value (&lt; 2.2e-16): Strongly significant, rejecting the null hypothesis of no spatial autocorrelation.\nExpectation (-0.013): The expected Moran’s I under the null hypothesis; the observed value (0.3202) is much higher, indicating strong positive spatial clustering for drug use per capita.\n\nMoran’s I Interpretation for Drug Trafficking Per Capita (2022):\n\np-value (0.012): Statistically significant, rejecting the null hypothesis of no spatial autocorrelation, though the effect is weaker than drug use.\nExpectation (-0.013): The expected Moran’s I under the null hypothesis; the observed value (0.22758) is moderately higher, indicating positive spatial clustering for drug trafficking per capita."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-monte-carlo-morans-i",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-monte-carlo-morans-i",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "8.3 Visualizing Monte Carlo Moran’s i",
    "text": "8.3 Visualizing Monte Carlo Moran’s i\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(mc_mi_g_dupc$res[1:999])\n\n[1] -0.01170382\n\nvar(mc_mi_g_dupc$res[1:999])\n\n[1] 0.005239131\n\n\n\nmean(mc_mi_g_dtpc$res[1:999])\n\n[1] -0.0144883\n\nvar(mc_mi_g_dtpc$res[1:999])\n\n[1] 0.006000646\n\n\n\nsummary((mc_mi_g_dupc$res[1:999]))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.25034 -0.06233 -0.01292 -0.01170  0.03716  0.22411 \n\nsummary((mc_mi_g_dtpc$res[1:999]))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.21890 -0.06582 -0.01853 -0.01449  0.03513  0.26816"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#histogram-visualization",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#histogram-visualization",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "8.4 Histogram Visualization",
    "text": "8.4 Histogram Visualization\n\nggplot(data = data.frame(x = mc_mi_g_dupc$res), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(count)), bins = 20, fill = \"grey\", color = \"black\", alpha=0.5) +\n  geom_vline(xintercept = 0, color = \"blue\", size = 2) +\n  labs(title = \"mc_mi_global_DUPC$res\",\n       x = \"Simulated Moran's I\", \n       y = \"Frequency\") +\n  theme_classic() +  \n  theme(plot.title = element_text(hjust = 0.5))  \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nggplot(data = data.frame(x = mc_mi_g_dtpc$res), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(count)), bins = 20, fill = \"grey\", color = \"black\", alpha=0.5) +\n  geom_vline(xintercept = 0, color = \"purple\", size = 2) +\n  labs(title = \"mc_mi_g_dtpc$res\",\n       x = \"Simulated Moran's I\", \n       y = \"Frequency\") +\n  theme_classic() +  \n  theme(plot.title = element_text(hjust = 0.5)) \n\n\n\n\n\n\n\n\nInterpretation: From the simulated distribution, a majority is centered around 0, which is expected under the null hypothesis of no spatial autocorrelation. The actual observed Moran’s I is plotted as the vertical blue line.\n\nIts position in the center but being slightly to the right of 0 but within the range of simulated values indicates the observed spatial autocorrelation is not significantly different from random spatial arrangement.\nThe observed Moran’s value (0.3202) coupled with the low p-value indicates weak spatial autocorrelation for Drug Use Per Capita\nThe observed Moran’s value (0.2305) coupled with the moderately low p-value indicates weak spatial autocorrelation for Drug Trafficking per Capita. However it should be noted that the variation in results can arise from a lot of different factors, mainly because the % of cases is much higher in DUPC than DTPC.\n\nWe supplement the analysis using Geary’s C test, and Local Moran’s I"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#gearys-c-test",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#gearys-c-test",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "9.1 Geary’s C Test",
    "text": "9.1 Geary’s C Test\nThe code chunk below performs Geary’s C test for spatial autocorrelation using global_c() in the sfdep package. Setting the randomization =TRUE argument refers to the method used to compute the test statistic, and helps to ensure the p-value and test statistic are based on a permutation based-method.\n##DUPC\n\nset.seed(1234)\nglobal_c(thai_drug_use_sf$DUPC_2022, \n         nb = wm_q, \n         wt = rswm_q, \n         allow_zero=TRUE)\n\n$C\n[1] 0.611319\n\n$K\n[1] 3.125771\n\nglobal_c_test(thai_drug_use_sf$DUPC_2022, \n         nb = wm_q, \n         wt = rswm_q, \n         allow_zero=TRUE, \n         randomization=TRUE)\n\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 4.8392, p-value = 6.517e-07\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.603275341       1.000000000       0.006720903 \n\n\n##DTPC\n\nset.seed(1234)\nglobal_c(thai_trafficking_sf$DTPC_2022, \n         nb = wm_q, \n         wt = rswm_q, \n         allow_zero=TRUE)\n\n$C\n[1] 0.6992419\n\n$K\n[1] 4.881418\n\nglobal_c_test(thai_trafficking_sf$DTPC_2022, \n         nb = wm_q, \n         wt = rswm_q, \n         allow_zero=TRUE, \n         randomization=TRUE)\n\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 3.5848, p-value = 0.0001687\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.69004139        1.00000000        0.00747624 \n\n\nInterpretation:\n\nGeary’s C (0.603, 0.690): Indicates positive spatial autocorrelation (clustering of similar values).\np-value: Strong evidence against randomness, confirming spatial clustering of drug use."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-monte-carlo-gearys-c",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-monte-carlo-gearys-c",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "9.2 Computing Monte Carlo Geary’s C",
    "text": "9.2 Computing Monte Carlo Geary’s C\nThe code chunk performs Geary’s C test for spatial autocorrelation using global_c_perm() from sfdep:\n\nmc_gc_g_dupc &lt;- global_c_perm(thai_drug_use_sf$DUPC_2022,\n              nb = wm_q, \n              wt = rswm_q, \n              nsim=999, \n              allow_zero = TRUE)\n\nmc_gc_g_dtpc &lt;- global_c_perm(thai_trafficking_sf$DTPC_2022,\n              nb = wm_q, \n              wt = rswm_q, \n              nsim=999, \n              allow_zero = TRUE)\n\nmc_gc_g_dupc\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.60328, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\nmc_gc_g_dtpc\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69004, observed rank = 3, p-value = 0.003\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nInterpretation:\n\nDrug use shows stronger clustering across regions compared to drug trafficking.\nBoth patterns are statistically significant, meaning these clusters are unlikely to have formed by chance, but the clustering is more pronounced for drug use."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-monte-carlo-gearys-c",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#visualizing-monte-carlo-gearys-c",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "9.3 Visualizing Monte Carlo Geary’s C",
    "text": "9.3 Visualizing Monte Carlo Geary’s C\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(mc_gc_g_dupc$res[1:999])\n\n[1] 0.9867549\n\nmean(mc_gc_g_dtpc$res[1:999])\n\n[1] 0.9878833\n\n\nVariance:\n\nvar(mc_gc_g_dupc$res[1:999])\n\n[1] 0.006741534\n\nvar(mc_gc_g_dtpc$res[1:999])\n\n[1] 0.008455766\n\n\n\nsummary((mc_gc_g_dupc$res[1:999]))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.6259  0.9308  0.9886  0.9868  1.0464  1.2153 \n\nsummary((mc_gc_g_dtpc$res[1:999]))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.6803  0.9270  0.9902  0.9879  1.0468  1.2894"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#compute-morans-i-correlogram",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#compute-morans-i-correlogram",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "10.1 Compute Moran’s I Correlogram",
    "text": "10.1 Compute Moran’s I Correlogram\nIn the code chunk below, we use sp.correlogram() of the spdep package to compute spatial correlogram lag of Drug Use Per Capita.\n\nMI_DUPC_corr &lt;- sp.correlogram(wm_q, \n                          thai_drug_use_sf$DUPC_2022, \n                          order=10, \n                          method=\"I\", \n                          style=\"W\", \n                          zero.policy=TRUE)\n\nMI_DTPC_corr &lt;- sp.correlogram(wm_q, \n                          thai_trafficking_sf$DTPC_2022, \n                          order=10, \n                          method=\"I\", \n                          style=\"W\", \n                          zero.policy=TRUE)\nplot(MI_DUPC_corr)\n\n\n\n\n\n\n\nplot(MI_DTPC_corr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow do we determine which order to stop at?\n\n\n\nThe decision to stop at a specific lag depends on when the spatial autocorrelation becomes insignificant or close to zero. Typically, we look for the point where the confidence intervals include zero or Moran’s I approaches zero, indicating little to no spatial dependence beyond that lag.\n\n\nInterpretation: Drug use Per Capita shows stronger clustering at close distances (lag 1 and 2), but spatial dependence drops off quickly, turning negative around lag 5. In contrast, drug trafficking per capita has weaker but more persistent spatial autocorrelation without signficiant negative values"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#compute-gearys-c-correlogram",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#compute-gearys-c-correlogram",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "10.2 Compute Geary’s C Correlogram",
    "text": "10.2 Compute Geary’s C Correlogram\n\nGC_DUPC_corr &lt;- sp.correlogram(wm_q, \n                          thai_drug_use_sf$DUPC_2022, \n                          order=10, \n                          method=\"C\", \n                          style=\"W\", \n                          zero.policy=TRUE)\n\nGC_DTPC_corr &lt;- sp.correlogram(wm_q, \n                          thai_trafficking_sf$DTPC_2022, \n                          order=10, \n                          method=\"C\", \n                          style=\"W\", \n                          zero.policy=TRUE)\nplot(GC_DUPC_corr)\n\n\n\n\n\n\n\nplot(GC_DTPC_corr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-local-morans-i",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-local-morans-i",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "11.1 Computing Local Moran’s I",
    "text": "11.1 Computing Local Moran’s I\nThe code chunk is used to compute local Moran’s I of DUPC & DUTC 2022 at the Province Level:\n\nFIPS &lt;- order(thai_drug_use_sf$ADM1_PCODE)\nlocalMI_DUPC &lt;- local_moran(thai_drug_use_sf$DUPC_2022, \n                       nb=wm_q, \n                       wt=rswm_q,\n                       nsim=999, \n                       zero.policy=TRUE)\n\nlocalMI_DTPC &lt;- local_moran(thai_trafficking_sf$DTPC_2022, \n                       nb=wm_q, \n                       wt=rswm_q,\n                       nsim=999, \n                       zero.policy=TRUE)\n\nhead(localMI_DUPC)\n\n           ii           eii      var_ii       z_ii        p_ii p_ii_sim\n1  1.50550332 -0.0193818626 0.328234428  2.6616140 0.007776699    0.002\n2 -0.04225522 -0.0003463326 0.003702838 -0.6887138 0.491003379    0.524\n3  1.36642227 -0.0064861031 0.473145857  1.9959242 0.045942179    0.020\n4  0.74776900 -0.0116135220 0.255491916  1.5023531 0.133005946    0.114\n5  0.44371006  0.0121028555 0.107233557  1.3180240 0.187495597    0.156\n6  0.68740683 -0.0106324594 0.065307569  2.7314805 0.006305047    0.016\n  p_folded_sim   skewness    kurtosis      mean    median     pysal\n1        0.001 -0.3959346  0.07472230   Low-Low   Low-Low   Low-Low\n2        0.262  0.3072909 -0.12528526  High-Low  High-Low  High-Low\n3        0.010 -0.4099680 -0.02144720   Low-Low   Low-Low   Low-Low\n4        0.057 -0.2086346 -0.11292650   Low-Low   Low-Low   Low-Low\n5        0.078 -0.4135419  0.04669219   Low-Low   Low-Low   Low-Low\n6        0.008  0.4335864 -0.03425615 High-High High-High High-High\n\nhead(localMI_DTPC)\n\n          ii          eii     var_ii       z_ii       p_ii p_ii_sim\n1  0.9100068 -0.017361030 0.20090036  2.0690057 0.03854556    0.002\n2 -1.4114928 -0.151372334 2.74701169 -0.7602944 0.44707860    0.502\n3  1.0785125 -0.046678052 0.34441035  1.9172907 0.05520101    0.018\n4  0.8336801 -0.014806371 0.18508496  1.9722381 0.04858243    0.014\n5  0.4513464  0.001204556 0.08056586  1.5858928 0.11276362    0.072\n6 -0.1832074 -0.042903652 0.66212569 -0.1724245 0.86310379    0.996\n  p_folded_sim   skewness    kurtosis     mean    median    pysal\n1        0.001 -0.4622152 -0.17832157  Low-Low   Low-Low  Low-Low\n2        0.251  0.5518738 -0.01314981 High-Low  High-Low High-Low\n3        0.009 -0.5254895 -0.06384844  Low-Low   Low-Low  Low-Low\n4        0.007 -0.6951569  0.87759696  Low-Low   Low-Low  Low-Low\n5        0.036 -0.4401252  0.24911046  Low-Low   Low-Low  Low-Low\n6        0.498  0.7721716  0.39993841 High-Low High-High High-Low\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe decision to stop at a specific lag depends on when the spatial autocorrelation becomes insignificant or close to zero. Typically, we look for the point where the confidence intervals include zero or Moran’s I approaches zero, indicating little to no spatial dependence beyond that lag.\n\n\nlocal_moran() function returns a matrix of values whose columns are:\n\nii: the local Moran’s I statistics\neii: the expectation of local moran statistic under the randomisation hypothesis\nvar_ii: the variance of local moran statistic under the randomisation hypothesis\nz_ii:the standard deviate of local moran statistic\np_ii: the p-value of local moran statistic\np_ii_sim: the p-value of the simulated local moran statistic*\np_folded_sim: the simulation folded [0, 0.5] range ranked p-value (based on https://github.com/pysal/esda/blob/4a63e0b5df1e754b17b5f1205b8cadcbecc5e061/esda/crand.py#L211-L213)\nskewness: For localmoran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For localmoran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates\n\n\n11.1.1 Local Moran Bivariate\n\n\n11.1.2 Mapping local Moran’s I Values The code chunks below can be used to perform the task of appending the local Moran’s I dataframe onto the Thailand SpatialPolygonDataFrame.\n\nthai_drug_use.localMI &lt;- cbind(thai_drug_use_sf, localMI_DUPC)\nthai_trafficking.localMI &lt;- cbind(thai_drug_use_sf, localMI_DTPC)\n\nDrug Use Per Capita Map\n\nlocalMI_DUPC.map &lt;- tm_shape(thai_drug_use.localMI) + \n  tm_fill(col=\"ii\", \n          style=\"pretty\", \n          palette=\"RdBu\", \n          title=\"local moran statistics\") + \n  tm_borders(alpha = 0.2)\n\npvalue_mi_dupc.map &lt;- tm_shape(thai_drug_use.localMI) + \n  tm_fill(col=\"p_ii_sim\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          style=\"pretty\", \n          palette=\"Blues\", \n          title=\"local Moran's I p-values\") + \n  tm_borders(alpha = 0.2)\n\ntmap_arrange(localMI_DUPC.map, pvalue_mi_dupc.map, asp=1, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nDrug Trafficking Per Capita Map\n\nlocalMI_DTPC.map &lt;- tm_shape(thai_trafficking.localMI) + \n  tm_fill(col=\"ii\", \n          style=\"pretty\", \n          palette=\"RdBu\", \n          title=\"local moran statistics\") + \n  tm_borders(alpha = 0.2)\n\npvalue_mi_dtpc.map &lt;- tm_shape(thai_trafficking.localMI) + \n  tm_fill(col=\"p_ii_sim\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          style=\"pretty\", \n          palette=\"Purples\", \n          title=\"local Moran's I p-values\") + \n  tm_borders(alpha = 0.2)\n\ntmap_arrange(localMI_DTPC.map, pvalue_mi_dtpc.map, asp=1, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nInterpretation:\n\nDUPC: Significant clustering of high values can be observed in the northeastern region, while some areas in the center display negative Moran’s I values, suggesting low-value clustering\nDTPC: THere is a more significant sense of clustering in the eastern region with high positive Moran’s I values. A possible factor we could account for are the borders the country share and the proximity of the region to the nefarious Golden Triangle."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-local-gearys-c",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#computing-local-gearys-c",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "11.2 Computing Local Geary’s C",
    "text": "11.2 Computing Local Geary’s C\n\nset.seed(1234)\nFIPS &lt;- order(thai_drug_use_sf$ADM1_PCODE)\nlocalGC_DUPC &lt;- local_g_perm(thai_drug_use_sf$DUPC_2022, \n                       nb=wm_q, \n                       wt=rswm_q,\n                       nsim=999, \n                       zero.policy=TRUE)\n\nlocalGC_DTPC &lt;- local_g_perm(thai_trafficking_sf$DTPC_2022, \n                       nb=wm_q, \n                       wt=rswm_q,\n                       nsim=999, \n                       zero.policy=TRUE)\n\nhead(localGC_DUPC)\n\n          gi cluster       e_gi       var_gi    std_dev     p_value p_sim\n1 -2.7177082     Low 0.01338215 1.147992e-05 -2.6510677 0.008023775 0.002\n2 -0.6969835    High 0.01317697 1.726255e-05 -0.6942438 0.487529319 0.514\n3 -2.1004715     Low 0.01317995 1.558972e-05 -2.1397319 0.032376438 0.016\n4 -1.5728513     Low 0.01319556 1.063726e-05 -1.5737590 0.115543185 0.096\n5 -1.4706901     Low 0.01315329 9.317750e-06 -1.4457334 0.148252004 0.114\n6  2.7788098    High 0.01326289 2.407313e-05  2.6897389 0.007150794 0.010\n  p_folded_sim  skewness    kurtosis\n1        0.001 0.2246970 -0.17415984\n2        0.257 0.4202330  0.13471313\n3        0.008 0.4117895  0.19278849\n4        0.048 0.2957740 -0.16143557\n5        0.057 0.2633794 -0.06548269\n6        0.005 0.3768606 -0.29632909\n\nhead(localGC_DTPC)\n\n          gi cluster       e_gi       var_gi    std_dev    p_value p_sim\n1 -2.0933155     Low 0.01344474 1.869030e-05 -2.0159881 0.04380122 0.010\n2 -0.7612953    High 0.01305085 2.595533e-05 -0.6993056 0.48436106 0.518\n3 -1.9240794     Low 0.01333755 2.620852e-05 -1.9128093 0.05577247 0.012\n4 -2.0297539     Low 0.01347712 1.704400e-05 -2.0600875 0.03939018 0.012\n5 -1.6520868     Low 0.01317359 1.543907e-05 -1.5729898 0.11572119 0.070\n6 -0.1918342    High 0.01306775 3.516653e-05 -0.1769321 0.85956174 0.978\n  p_folded_sim  skewness   kurtosis\n1        0.005 0.5374472 0.18886404\n2        0.259 0.5881933 0.23578765\n3        0.006 0.6119138 0.09389617\n4        0.006 0.4435516 0.29960386\n5        0.035 0.5952123 0.44839539\n6        0.489 0.8272322 0.98718720\n\n\nThe following code chunk summarizes the Local GC results in a table, printing coefficient matrices tidely.\n\ndupc_table &lt;- printCoefmat(data.frame(\n  localGC_DUPC[FIPS,], \n  row.names=thai_drug_use_sf$province_en[FIPS]),\n  check.names=TRUE\n)\n\n                                  gi     cluster        e_gi      var_gi\nBangkok                  -2.7177e+00  1.0000e+00  1.3382e-02  1.1480e-05\nSamut Prakan             -1.3296e+00  1.0000e+00  1.3206e-02  3.6089e-05\nNonthaburi               -2.1005e+00  1.0000e+00  1.3180e-02  1.5590e-05\nPathum Thani             -1.5729e+00  1.0000e+00  1.3196e-02  1.0637e-05\nPhra Nakhon Si Ayutthaya -1.4707e+00  1.0000e+00  1.3153e-02  9.3177e-06\nAng Thong                -3.1480e-01  2.0000e+00  1.2956e-02  1.8712e-05\nLop Buri                 -9.2769e-01  2.0000e+00  1.3060e-02  8.4442e-06\nSing Buri                -8.3131e-02  2.0000e+00  1.3305e-02  1.4496e-05\nChai Nat                 -6.9698e-01  2.0000e+00  1.3177e-02  1.7263e-05\nSaraburi                 -5.7294e-01  1.0000e+00  1.3209e-02  1.3653e-05\nChon Buri                -4.7525e-01  1.0000e+00  1.3196e-02  2.3410e-05\nRayong                   -5.4926e-01  1.0000e+00  1.3315e-02  3.4294e-05\nChanthaburi              -1.2674e+00  2.0000e+00  1.3110e-02  1.4590e-05\nTrat                      8.0067e-02  1.0000e+00  1.3875e-02  7.6223e-05\nChachoengsao             -1.6738e+00  1.0000e+00  1.3083e-02  8.8594e-06\nPrachin Buri             -1.4925e-01  1.0000e+00  1.3216e-02  1.8645e-05\nNakhon Nayok             -1.8429e+00  2.0000e+00  1.3372e-02  1.4276e-05\nSa Kaeo                  -9.5951e-01  1.0000e+00  1.2955e-02  1.3562e-05\nNakhon Ratchasima        -2.7287e-01  1.0000e+00  1.3074e-02  8.8039e-06\nBuri Ram                 -8.2115e-01  1.0000e+00  1.3054e-02  1.4051e-05\nSurin                     1.1891e+00  1.0000e+00  1.3209e-02  1.6623e-05\nSi Sa Ket                 7.1053e-01  2.0000e+00  1.3314e-02  1.7785e-05\nUbon Ratchathani          3.5008e+00  1.0000e+00  1.3196e-02  2.0956e-05\nYasothon                  2.7454e+00  2.0000e+00  1.3384e-02  1.3614e-05\nChaiyaphum               -6.1277e-01  2.0000e+00  1.3050e-02  1.8466e-05\nAmnat Charoen             1.2993e+00  2.0000e+00  1.3167e-02  2.0830e-05\nBueng Kan                 2.7788e+00  2.0000e+00  1.3263e-02  2.4073e-05\nNong Bua Lam Phu          1.7114e+00  1.0000e+00  1.3363e-02  2.4721e-05\nKhon Kaen                 1.2122e+00  1.0000e+00  1.3154e-02  7.5497e-06\nUdon Thani                2.3900e+00  2.0000e+00  1.2925e-02  1.1598e-05\nLoei                      2.7116e-01  2.0000e+00  1.3216e-02  1.0649e-05\nNong Khai                 2.1260e+00  2.0000e+00  1.3168e-02  1.6851e-05\nMaha Sarakham             8.2855e-01  2.0000e+00  1.2970e-02  1.2315e-05\nRoi Et                    2.3502e+00  2.0000e+00  1.3062e-02  1.2207e-05\nKalasin                   1.6488e+00  2.0000e+00  1.3012e-02  1.0532e-05\nSakon Nakhon              3.6998e+00  2.0000e+00  1.3344e-02  1.1640e-05\nNakhon Phanom             1.1539e+00  2.0000e+00  1.3150e-02  2.1334e-05\nMukdahan                  4.4392e+00  2.0000e+00  1.3060e-02  1.1670e-05\nChiang Mai                3.0137e-01  1.0000e+00  1.2963e-02  1.3680e-05\nLamphun                  -3.8887e-01  2.0000e+00  1.3261e-02  2.3162e-05\nLampang                   7.5909e-01  2.0000e+00  1.3151e-02  1.0461e-05\nUttaradit                -1.5237e-01  2.0000e+00  1.3122e-02  1.6922e-05\nPhrae                     1.3531e+00  2.0000e+00  1.3157e-02  1.3479e-05\nNan                       1.9497e+00  2.0000e+00  1.2953e-02  2.2349e-05\nPhayao                    1.3922e+00  2.0000e+00  1.3055e-02  1.8084e-05\nChiang Rai                1.2664e+00  1.0000e+00  1.3278e-02  2.3794e-05\nMae Hong Son             -9.2600e-01  1.0000e+00  1.3309e-02  3.6010e-05\nNakhon Sawan             -1.3080e+00  1.0000e+00  1.3270e-02  8.2221e-06\nUthai Thani              -1.2322e+00  1.0000e+00  1.3022e-02  1.3643e-05\nKamphaeng Phet           -2.4367e+00  1.0000e+00  1.3234e-02  1.3092e-05\nTak                      -9.2589e-01  1.0000e+00  1.3375e-02  7.8135e-06\nSukhothai                -6.6080e-01  1.0000e+00  1.3171e-02  1.0631e-05\nPhitsanulok              -7.1136e-01  1.0000e+00  1.3196e-02  1.1458e-05\nPhichit                  -1.9408e+00  1.0000e+00  1.3347e-02  1.6358e-05\nPhetchabun               -2.7260e-01  1.0000e+00  1.3169e-02  9.4989e-06\nRatchaburi               -1.1474e+00  2.0000e+00  1.3236e-02  1.3709e-05\nKanchanaburi             -1.0456e+00  1.0000e+00  1.3245e-02  1.3902e-05\nSuphan Buri              -4.4014e-01  1.0000e+00  1.3273e-02  1.0111e-05\nNakhon Pathom            -2.2901e+00  1.0000e+00  1.3109e-02  1.0081e-05\nSamut Sakhon             -7.6984e-01  1.0000e+00  1.3111e-02  1.6316e-05\nSamut Songkhram          -7.8564e-01  2.0000e+00  1.3357e-02  2.1819e-05\nPhetchaburi              -7.1374e-03  1.0000e+00  1.3126e-02  2.3976e-05\nPrachuap Khiri Khan      -1.9402e-03  1.0000e+00  1.3130e-02  3.2150e-05\nNakhon Si Thammarat      -5.8090e-01  2.0000e+00  1.3193e-02  1.4067e-05\nKrabi                    -1.9625e-01  1.0000e+00  1.3198e-02  1.6986e-05\nPhangnga                 -1.2866e+00  1.0000e+00  1.3222e-02  2.2448e-05\nPhuket                           NaN  1.0000e+00          NA          NA\nSurat Thani              -8.7763e-01  1.0000e+00  1.2996e-02  1.4495e-05\nRanong                   -1.1398e-01  1.0000e+00  1.2904e-02  2.2754e-05\nChumphon                 -8.2791e-01  2.0000e+00  1.3048e-02  2.1136e-05\nSongkhla                  3.2705e-01  2.0000e+00  1.3310e-02  1.3810e-05\nSatun                     4.5440e-02  2.0000e+00  1.3076e-02  2.4780e-05\nTrang                    -1.6876e-01  1.0000e+00  1.3132e-02  1.8094e-05\nPhatthalung               6.6987e-01  1.0000e+00  1.3322e-02  1.7790e-05\nPattani                  -4.8862e-01  2.0000e+00  1.3269e-02  2.2531e-05\nYala                      1.7285e-01  1.0000e+00  1.3232e-02  2.5269e-05\nNarathiwat               -2.1616e-01  1.0000e+00  1.2803e-02  3.4827e-05\n                             std_dev     p_value       p_sim p_folded_sim\nBangkok                  -2.6511e+00  8.0238e-03  2.0000e-03   1.0000e-03\nSamut Prakan             -1.2847e+00  1.9891e-01  1.4800e-01   7.4000e-02\nNonthaburi               -2.1397e+00  3.2376e-02  1.6000e-02   8.0000e-03\nPathum Thani             -1.5738e+00  1.1554e-01  9.6000e-02   4.8000e-02\nPhra Nakhon Si Ayutthaya -1.4457e+00  1.4825e-01  1.1400e-01   5.7000e-02\nAng Thong                -2.5309e-01  8.0020e-01  8.9400e-01   4.4700e-01\nLop Buri                 -8.6910e-01  3.8479e-01  3.8800e-01   1.9400e-01\nSing Buri                -1.1849e-01  9.0568e-01  9.4400e-01   4.7200e-01\nChai Nat                 -6.9424e-01  4.8753e-01  5.1400e-01   2.5700e-01\nSaraburi                 -5.7134e-01  5.6777e-01  6.1400e-01   3.0700e-01\nChon Buri                -4.7138e-01  6.3737e-01  6.9000e-01   3.4500e-01\nRayong                   -5.7603e-01  5.6459e-01  6.2200e-01   3.1100e-01\nChanthaburi              -1.1989e+00  2.3058e-01  2.1800e-01   1.0900e-01\nTrat                     -5.7688e-03  9.9540e-01  9.1000e-01   4.6000e-01\nChachoengsao             -1.5554e+00  1.1985e-01  9.4000e-02   4.7000e-02\nPrachin Buri             -1.5406e-01  8.7756e-01  9.3200e-01   4.6600e-01\nNakhon Nayok             -1.8335e+00  6.6732e-02  5.0000e-02   2.5000e-02\nSa Kaeo                  -8.8975e-01  3.7360e-01  3.6400e-01   1.8200e-01\nNakhon Ratchasima        -2.2863e-01  8.1916e-01  8.9600e-01   4.4800e-01\nBuri Ram                 -7.6900e-01  4.4189e-01  4.9200e-01   2.4600e-01\nSurin                     1.1745e+00  2.4021e-01  2.4200e-01   1.2100e-01\nSi Sa Ket                 6.5363e-01  5.1335e-01  4.9400e-01   2.4700e-01\nUbon Ratchathani          3.6261e+00  2.8772e-04  2.0000e-03   1.0000e-03\nYasothon                  2.6451e+00  8.1667e-03  1.8000e-02   9.0000e-03\nChaiyaphum               -5.6166e-01  5.7434e-01  6.7800e-01   3.3900e-01\nAmnat Charoen             1.3061e+00  1.9153e-01  1.9800e-01   9.9000e-02\nBueng Kan                 2.6897e+00  7.1508e-03  1.0000e-02   5.0000e-03\nNong Bua Lam Phu          1.5927e+00  1.1122e-01  1.3400e-01   6.7000e-02\nKhon Kaen                 1.1655e+00  2.4380e-01  2.6800e-01   1.3400e-01\nUdon Thani                2.3901e+00  1.6845e-02  3.6000e-02   1.8000e-02\nLoei                      2.5484e-01  7.9885e-01  7.6400e-01   3.8200e-01\nNong Khai                 2.1115e+00  3.4733e-02  4.4000e-02   2.2000e-02\nMaha Sarakham             9.1656e-01  3.5937e-01  3.4800e-01   1.7400e-01\nRoi Et                    2.2565e+00  2.4040e-02  3.4000e-02   1.7000e-02\nKalasin                   1.7074e+00  8.7749e-02  1.1600e-01   5.8000e-02\nSakon Nakhon              3.5404e+00  3.9952e-04  4.0000e-03   2.0000e-03\nNakhon Phanom             1.1696e+00  2.4215e-01  2.5400e-01   1.2700e-01\nMukdahan                  4.3357e+00  1.4530e-05  4.0000e-03   2.0000e-03\nChiang Mai                3.4914e-01  7.2698e-01  7.1200e-01   3.5600e-01\nLamphun                  -4.0503e-01  6.8546e-01  7.4600e-01   3.7300e-01\nLampang                   7.1732e-01  4.7318e-01  4.3000e-01   2.1500e-01\nUttaradit                -1.4380e-01  8.8566e-01  9.6200e-01   4.8100e-01\nPhrae                     1.3475e+00  1.7781e-01  2.1600e-01   1.0800e-01\nNan                       2.0136e+00  4.4050e-02  8.0000e-02   4.0000e-02\nPhayao                    1.3588e+00  1.7422e-01  2.1200e-01   1.0600e-01\nChiang Rai                1.2136e+00  2.2490e-01  2.5800e-01   1.2900e-01\nMae Hong Son             -9.2922e-01  3.5277e-01  3.7800e-01   1.8900e-01\nNakhon Sawan             -1.3139e+00  1.8887e-01  1.8400e-01   9.2000e-02\nUthai Thani              -1.1719e+00  2.4122e-01  2.5200e-01   1.2600e-01\nKamphaeng Phet           -2.4333e+00  1.4963e-02  2.0000e-03   1.0000e-03\nTak                      -9.3871e-01  3.4788e-01  3.7200e-01   1.8600e-01\nSukhothai                -6.6075e-01  5.0877e-01  5.3800e-01   2.6900e-01\nPhitsanulok              -6.9198e-01  4.8895e-01  5.1400e-01   2.5700e-01\nPhichit                  -1.9910e+00  4.6476e-02  1.4000e-02   7.0000e-03\nPhetchabun               -2.7040e-01  7.8685e-01  8.6600e-01   4.3300e-01\nRatchaburi               -1.1543e+00  2.4839e-01  2.3200e-01   1.1600e-01\nKanchanaburi             -1.0414e+00  2.9769e-01  3.0400e-01   1.5200e-01\nSuphan Buri              -4.5414e-01  6.4973e-01  6.8400e-01   3.4200e-01\nNakhon Pathom            -2.1644e+00  3.0431e-02  1.4000e-02   7.0000e-03\nSamut Sakhon             -7.4909e-01  4.5380e-01  4.7600e-01   2.3800e-01\nSamut Songkhram          -8.4655e-01  3.9725e-01  3.9800e-01   1.9900e-01\nPhetchaburi              -4.0657e-04  9.9968e-01  9.4600e-01   4.7300e-01\nPrachuap Khiri Khan       2.9803e-03  9.9762e-01  9.1000e-01   4.5500e-01\nNakhon Si Thammarat      -5.7562e-01  5.6487e-01  6.1600e-01   3.0800e-01\nKrabi                    -2.0116e-01  8.4057e-01  8.8800e-01   4.4400e-01\nPhangnga                 -1.3062e+00  1.9148e-01  1.9000e-01   9.5000e-02\nPhuket                            NA          NA          NA           NA\nSurat Thani              -7.9798e-01  4.2488e-01  4.2200e-01   2.1100e-01\nRanong                   -5.9463e-02  9.5258e-01  9.9200e-01   4.9600e-01\nChumphon                 -8.3737e-01  4.0239e-01  4.5400e-01   2.2700e-01\nSongkhla                  2.8099e-01  7.7872e-01  7.2400e-01   3.6200e-01\nSatun                     6.0231e-02  9.5197e-01  8.5400e-01   4.2700e-01\nTrang                    -1.5645e-01  8.7568e-01  9.4200e-01   4.7100e-01\nPhatthalung               6.1236e-01  5.4030e-01  5.7400e-01   2.8700e-01\nPattani                  -5.1622e-01  6.0570e-01  6.6400e-01   3.3200e-01\nYala                      1.4789e-01  8.8243e-01  8.4000e-01   4.2000e-01\nNarathiwat               -1.5400e-01  8.7761e-01  9.8600e-01   4.9300e-01\n                            skewness kurtosis\nBangkok                   2.2470e-01  -0.1742\nSamut Prakan              6.7705e-01   0.3702\nNonthaburi                4.1179e-01   0.1928\nPathum Thani              2.9577e-01  -0.1614\nPhra Nakhon Si Ayutthaya  2.6338e-01  -0.0655\nAng Thong                 3.8239e-01  -0.0327\nLop Buri                  3.1610e-01   0.2499\nSing Buri                 3.1147e-01  -0.1358\nChai Nat                  4.2023e-01   0.1347\nSaraburi                  3.3571e-01  -0.1009\nChon Buri                 4.6387e-01   0.0277\nRayong                    4.1142e-01  -0.2663\nChanthaburi               2.7927e-01  -0.2268\nTrat                      7.2854e-01  -0.0996\nChachoengsao              2.4362e-01  -0.1017\nPrachin Buri              2.9074e-01  -0.1660\nNakhon Nayok              2.1483e-01  -0.3164\nSa Kaeo                   3.7698e-01   0.0813\nNakhon Ratchasima         2.4752e-01  -0.1954\nBuri Ram                  3.7450e-01  -0.1011\nSurin                     4.4780e-01   0.2201\nSi Sa Ket                 4.9797e-01   0.1884\nUbon Ratchathani          3.3303e-01  -0.4777\nYasothon                  4.0583e-01  -0.1024\nChaiyaphum                4.1207e-01  -0.0055\nAmnat Charoen             3.8176e-01   0.0257\nBueng Kan                 3.7686e-01  -0.2963\nNong Bua Lam Phu          3.3607e-01  -0.2762\nKhon Kaen                 2.6880e-01   0.1226\nUdon Thani                3.0938e-01   0.1839\nLoei                      2.5228e-01  -0.1497\nNong Khai                 3.6805e-01   0.4019\nMaha Sarakham             3.2698e-01   0.2246\nRoi Et                    3.1235e-01  -0.1465\nKalasin                   2.6659e-01  -0.2610\nSakon Nakhon              3.0280e-01  -0.2663\nNakhon Phanom             4.8924e-01   0.2157\nMukdahan                  5.7222e-01   0.7190\nChiang Mai                2.6114e-01  -0.2857\nLamphun                   4.6104e-01  -0.1061\nLampang                   3.3634e-01  -0.0674\nUttaradit                 4.2427e-01  -0.0682\nPhrae                     4.0227e-01  -0.0381\nNan                       5.6459e-01   0.1636\nPhayao                    6.5422e-01   0.5877\nChiang Rai                4.7401e-01  -0.0824\nMae Hong Son              4.8379e-01  -0.1805\nNakhon Sawan              2.8677e-01  -0.1032\nUthai Thani               2.9563e-01  -0.0130\nKamphaeng Phet            2.7502e-01  -0.2675\nTak                       2.4793e-01  -0.1461\nSukhothai                 3.3561e-01   0.0117\nPhitsanulok               3.2285e-01  -0.0508\nPhichit                   3.6776e-01  -0.1274\nPhetchabun                2.5816e-01  -0.4429\nRatchaburi                3.3403e-01  -0.1718\nKanchanaburi              1.7693e-01  -0.1790\nSuphan Buri               2.5818e-01   0.2031\nNakhon Pathom             3.1481e-01  -0.0271\nSamut Sakhon              3.2097e-01  -0.2741\nSamut Songkhram           4.3740e-01   0.2061\nPhetchaburi               4.3481e-01  -0.0511\nPrachuap Khiri Khan       5.5455e-01   0.2795\nNakhon Si Thammarat       1.9305e-01  -0.3433\nKrabi                     3.0248e-01  -0.1897\nPhangnga                  3.3796e-01  -0.1881\nPhuket                            NA       NA\nSurat Thani               3.6786e-01   0.2708\nRanong                    3.5181e-01  -0.1121\nChumphon                  3.4788e-01  -0.2340\nSongkhla                  3.1567e-01  -0.0257\nSatun                     4.7177e-01  -0.0983\nTrang                     3.9526e-01   0.0372\nPhatthalung               2.0131e-01  -0.4055\nPattani                   4.9706e-01   0.1420\nYala                      4.0487e-01   0.0558\nNarathiwat                5.6306e-01  -0.0605\n\ndtpc_table &lt;- printCoefmat(data.frame(\n  localGC_DTPC[FIPS,], \n  row.names=thai_trafficking_sf$province_en[FIPS]),\n  check.names=TRUE\n)\n\n                                  gi     cluster        e_gi      var_gi\nBangkok                  -2.0933e+00  1.0000e+00  1.3445e-02  1.8690e-05\nSamut Prakan             -6.9556e-01  1.0000e+00  1.3077e-02  4.7562e-05\nNonthaburi               -1.9241e+00  1.0000e+00  1.3338e-02  2.6209e-05\nPathum Thani             -2.0298e+00  1.0000e+00  1.3477e-02  1.7044e-05\nPhra Nakhon Si Ayutthaya -1.6521e+00  1.0000e+00  1.3174e-02  1.5439e-05\nAng Thong                -1.1528e+00  2.0000e+00  1.3266e-02  2.8412e-05\nLop Buri                  3.9971e-01  1.0000e+00  1.3316e-02  1.3606e-05\nSing Buri                 1.3520e+00  2.0000e+00  1.3214e-02  2.2931e-05\nChai Nat                 -7.6130e-01  2.0000e+00  1.3051e-02  2.5955e-05\nSaraburi                 -1.6307e+00  1.0000e+00  1.3236e-02  1.9119e-05\nChon Buri                -8.6864e-01  1.0000e+00  1.3223e-02  3.7601e-05\nRayong                   -1.0748e+00  1.0000e+00  1.3392e-02  5.1324e-05\nChanthaburi              -1.5132e+00  1.0000e+00  1.3259e-02  2.1565e-05\nTrat                     -6.4558e-01  1.0000e+00  1.3092e-02  1.0332e-04\nChachoengsao             -2.5295e+00  2.0000e+00  1.3141e-02  1.3262e-05\nPrachin Buri             -5.4594e-01  1.0000e+00  1.3386e-02  2.7861e-05\nNakhon Nayok             -1.1647e+00  1.0000e+00  1.3203e-02  2.0363e-05\nSa Kaeo                   4.5421e-01  1.0000e+00  1.3124e-02  2.1456e-05\nNakhon Ratchasima        -6.9834e-01  2.0000e+00  1.3233e-02  1.3979e-05\nBuri Ram                  4.4890e-01  2.0000e+00  1.3462e-02  2.2661e-05\nSurin                     2.3844e+00  2.0000e+00  1.3010e-02  2.7220e-05\nSi Sa Ket                 3.4962e+00  2.0000e+00  1.3220e-02  2.5903e-05\nUbon Ratchathani          3.7595e+00  2.0000e+00  1.3052e-02  3.3676e-05\nYasothon                  2.7036e+00  2.0000e+00  1.3246e-02  2.1101e-05\nChaiyaphum               -3.5169e-01  2.0000e+00  1.3413e-02  2.7618e-05\nAmnat Charoen             1.4969e+00  2.0000e+00  1.3334e-02  3.7165e-05\nBueng Kan                -1.9183e-01  2.0000e+00  1.3068e-02  3.5167e-05\nNong Bua Lam Phu         -1.2316e+00  1.0000e+00  1.3017e-02  3.3738e-05\nKhon Kaen                 1.3164e-01  1.0000e+00  1.3217e-02  1.0695e-05\nUdon Thani               -1.1454e+00  1.0000e+00  1.2918e-02  1.7367e-05\nLoei                     -8.8266e-01  1.0000e+00  1.3399e-02  1.7285e-05\nNong Khai                 3.2112e-01  1.0000e+00  1.3079e-02  2.6560e-05\nMaha Sarakham             2.0675e+00  1.0000e+00  1.3017e-02  1.9963e-05\nRoi Et                    2.3014e+00  2.0000e+00  1.3027e-02  1.9523e-05\nKalasin                  -7.5226e-01  1.0000e+00  1.3249e-02  1.8411e-05\nSakon Nakhon             -4.1690e-01  2.0000e+00  1.3382e-02  1.7374e-05\nNakhon Phanom             8.2477e-01  1.0000e+00  1.3263e-02  3.4020e-05\nMukdahan                  1.7357e+00  1.0000e+00  1.3154e-02  1.9085e-05\nChiang Mai                9.1808e-02  2.0000e+00  1.3164e-02  2.1049e-05\nLamphun                   1.5770e-01  2.0000e+00  1.3003e-02  3.3919e-05\nLampang                  -1.9070e-01  2.0000e+00  1.2971e-02  1.5941e-05\nUttaradit                 4.7551e-01  2.0000e+00  1.2992e-02  2.5908e-05\nPhrae                     1.0256e+00  2.0000e+00  1.3103e-02  2.1474e-05\nNan                       7.4139e-01  2.0000e+00  1.3303e-02  4.0535e-05\nPhayao                    1.0053e+00  2.0000e+00  1.3181e-02  2.9543e-05\nChiang Rai                6.7084e-01  1.0000e+00  1.3193e-02  3.4609e-05\nMae Hong Son             -4.3652e-01  2.0000e+00  1.3151e-02  5.6013e-05\nNakhon Sawan              9.5458e-01  1.0000e+00  1.2939e-02  1.2367e-05\nUthai Thani               8.2539e-01  1.0000e+00  1.3200e-02  2.3789e-05\nKamphaeng Phet           -9.6145e-01  2.0000e+00  1.3172e-02  2.2297e-05\nTak                       3.2080e-01  1.0000e+00  1.3199e-02  1.2897e-05\nSukhothai                 1.0668e+00  1.0000e+00  1.3094e-02  1.8498e-05\nPhitsanulok               3.0012e-01  2.0000e+00  1.3382e-02  1.8056e-05\nPhichit                   7.7382e-01  1.0000e+00  1.3161e-02  2.6579e-05\nPhetchabun               -9.8578e-01  2.0000e+00  1.2977e-02  1.5019e-05\nRatchaburi               -6.5563e-01  1.0000e+00  1.3119e-02  2.1829e-05\nKanchanaburi             -1.2893e+00  2.0000e+00  1.2960e-02  2.1822e-05\nSuphan Buri               1.1810e+00  1.0000e+00  1.2914e-02  1.4930e-05\nNakhon Pathom            -1.9685e+00  1.0000e+00  1.3113e-02  1.5630e-05\nSamut Sakhon             -7.9386e-01  1.0000e+00  1.3066e-02  2.7258e-05\nSamut Songkhram          -7.9334e-01  2.0000e+00  1.3283e-02  3.4820e-05\nPhetchaburi               2.7426e-01  1.0000e+00  1.3282e-02  3.7984e-05\nPrachuap Khiri Khan       1.9225e-01  2.0000e+00  1.3454e-02  5.2094e-05\nNakhon Si Thammarat      -4.7229e-01  1.0000e+00  1.3186e-02  2.1861e-05\nKrabi                    -7.9687e-01  1.0000e+00  1.3134e-02  2.5478e-05\nPhangnga                 -3.6686e-01  1.0000e+00  1.2885e-02  3.4484e-05\nPhuket                           NaN  1.0000e+00          NA          NA\nSurat Thani              -4.3676e-02  1.0000e+00  1.3374e-02  2.1523e-05\nRanong                   -3.6233e-01  2.0000e+00  1.3328e-02  3.5129e-05\nChumphon                 -2.9705e-01  2.0000e+00  1.3236e-02  3.9617e-05\nSongkhla                 -5.2506e-01  1.0000e+00  1.3199e-02  2.1516e-05\nSatun                    -1.4967e-01  1.0000e+00  1.2825e-02  3.4474e-05\nTrang                    -4.5087e-01  1.0000e+00  1.3118e-02  2.4755e-05\nPhatthalung              -1.1684e+00  2.0000e+00  1.3297e-02  2.8759e-05\nPattani                  -2.0508e-01  1.0000e+00  1.2993e-02  3.5144e-05\nYala                     -5.5119e-01  2.0000e+00  1.3480e-02  3.8499e-05\nNarathiwat               -1.7735e-01  2.0000e+00  1.2982e-02  5.0874e-05\n                             std_dev     p_value       p_sim p_folded_sim\nBangkok                  -2.0160e+00  4.3801e-02  1.0000e-02   5.0000e-03\nSamut Prakan             -7.1622e-01  4.7386e-01  4.8400e-01   2.4200e-01\nNonthaburi               -1.9128e+00  5.5772e-02  1.2000e-02   6.0000e-03\nPathum Thani             -2.0601e+00  3.9390e-02  1.2000e-02   6.0000e-03\nPhra Nakhon Si Ayutthaya -1.5730e+00  1.1572e-01  7.0000e-02   3.5000e-02\nAng Thong                -1.1251e+00  2.6055e-01  2.4800e-01   1.2400e-01\nLop Buri                  3.3017e-01  7.4127e-01  7.1200e-01   3.5600e-01\nSing Buri                 1.2687e+00  2.0456e-01  2.1000e-01   1.0500e-01\nChai Nat                 -6.9931e-01  4.8436e-01  5.1800e-01   2.5900e-01\nSaraburi                 -1.6812e+00  9.2732e-02  5.6000e-02   2.8000e-02\nChon Buri                -8.3966e-01  4.0110e-01  4.3600e-01   2.1800e-01\nRayong                   -1.1120e+00  2.6613e-01  2.4400e-01   1.2200e-01\nChanthaburi              -1.4850e+00  1.3753e-01  9.6000e-02   4.8000e-02\nTrat                     -6.4391e-01  5.1963e-01  5.7400e-01   2.7900e-01\nChachoengsao             -2.4344e+00  1.4915e-02  2.0000e-03   1.0000e-03\nPrachin Buri             -5.6329e-01  5.7323e-01  6.4800e-01   3.2400e-01\nNakhon Nayok             -1.1634e+00  2.4466e-01  2.3000e-01   1.1500e-01\nSa Kaeo                   4.4792e-01  6.5421e-01  5.9200e-01   2.9600e-01\nNakhon Ratchasima        -6.7652e-01  4.9871e-01  5.3800e-01   2.6900e-01\nBuri Ram                  3.5994e-01  7.1890e-01  6.6200e-01   3.3100e-01\nSurin                     2.3026e+00  2.1301e-02  4.8000e-02   2.4000e-02\nSi Sa Ket                 3.4045e+00  6.6276e-04  4.0000e-03   2.0000e-03\nUbon Ratchathani          3.8673e+00  1.1007e-04  6.0000e-03   3.0000e-03\nYasothon                  2.6416e+00  8.2517e-03  3.0000e-02   1.5000e-02\nChaiyaphum               -3.9126e-01  6.9560e-01  7.8000e-01   3.9000e-01\nAmnat Charoen             1.4243e+00  1.5435e-01  1.9600e-01   9.8000e-02\nBueng Kan                -1.7693e-01  8.5956e-01  9.7800e-01   4.8900e-01\nNong Bua Lam Phu         -1.2161e+00  2.2395e-01  1.6600e-01   8.3000e-02\nKhon Kaen                 1.1283e-01  9.1016e-01  8.8000e-01   4.4000e-01\nUdon Thani               -1.0632e+00  2.8770e-01  2.8000e-01   1.4000e-01\nLoei                     -9.1660e-01  3.5935e-01  3.7200e-01   1.8600e-01\nNong Khai                 3.2934e-01  7.4190e-01  6.5200e-01   3.2600e-01\nMaha Sarakham             2.0907e+00  3.6553e-02  6.2000e-02   3.1000e-02\nRoi Et                    2.1760e+00  2.9558e-02  5.4000e-02   2.7000e-02\nKalasin                  -7.3991e-01  4.5935e-01  4.9600e-01   2.4800e-01\nSakon Nakhon             -4.6636e-01  6.4096e-01  6.9400e-01   3.4700e-01\nNakhon Phanom             8.1798e-01  4.1337e-01  4.0600e-01   2.0300e-01\nMukdahan                  1.6158e+00  1.0613e-01  1.2200e-01   6.1000e-02\nChiang Mai                8.9519e-02  9.2867e-01  8.2800e-01   4.1400e-01\nLamphun                   1.8756e-01  8.5122e-01  7.6400e-01   3.8200e-01\nLampang                  -1.3428e-01  8.9318e-01  9.9400e-01   4.9700e-01\nUttaradit                 5.1113e-01  6.0926e-01  5.4400e-01   2.7200e-01\nPhrae                     1.0175e+00  3.0894e-01  3.1000e-01   1.5500e-01\nNan                       6.7068e-01  5.0242e-01  4.6600e-01   2.3300e-01\nPhayao                    9.4057e-01  3.4692e-01  3.3000e-01   1.6500e-01\nChiang Rai                6.6918e-01  5.0338e-01  4.4000e-01   2.2000e-01\nMae Hong Son             -4.2576e-01  6.7028e-01  7.9800e-01   3.9900e-01\nNakhon Sawan              1.0080e+00  3.1344e-01  3.0600e-01   1.5300e-01\nUthai Thani               7.5186e-01  4.5214e-01  4.1600e-01   2.0800e-01\nKamphaeng Phet           -9.2818e-01  3.5331e-01  3.5400e-01   1.7700e-01\nTak                       2.7808e-01  7.8095e-01  7.2800e-01   3.6400e-01\nSukhothai                 1.0269e+00  3.0445e-01  3.2000e-01   1.6000e-01\nPhitsanulok               2.3777e-01  8.1206e-01  7.7400e-01   3.8700e-01\nPhichit                   7.5926e-01  4.4770e-01  4.2800e-01   2.1400e-01\nPhetchabun               -9.1748e-01  3.5889e-01  3.6200e-01   1.8100e-01\nRatchaburi               -6.2652e-01  5.3097e-01  5.7600e-01   2.8800e-01\nKanchanaburi             -1.2088e+00  2.2676e-01  2.0200e-01   1.0100e-01\nSuphan Buri               1.2080e+00  2.2705e-01  2.3200e-01   1.1600e-01\nNakhon Pathom            -1.8473e+00  6.4701e-02  3.2000e-02   1.6000e-02\nSamut Sakhon             -7.4130e-01  4.5851e-01  4.8200e-01   2.4100e-01\nSamut Songkhram          -8.2172e-01  4.1124e-01  4.3600e-01   2.1800e-01\nPhetchaburi               2.4379e-01  8.0739e-01  7.1800e-01   3.5900e-01\nPrachuap Khiri Khan       1.5395e-01  8.7765e-01  7.2000e-01   3.6000e-01\nNakhon Si Thammarat      -4.6175e-01  6.4426e-01  6.9600e-01   3.4800e-01\nKrabi                    -8.0062e-01  4.2335e-01  4.3000e-01   2.1500e-01\nPhangnga                 -3.2351e-01  7.4631e-01  8.4400e-01   4.2200e-01\nPhuket                            NA          NA          NA           NA\nSurat Thani              -8.8636e-02  9.2937e-01  9.9000e-01   4.9500e-01\nRanong                   -3.9189e-01  6.9514e-01  7.9200e-01   3.9600e-01\nChumphon                 -2.9304e-01  7.6949e-01  8.8600e-01   4.4300e-01\nSongkhla                 -5.1781e-01  6.0459e-01  6.7800e-01   3.3900e-01\nSatun                    -9.1519e-02  9.2708e-01  9.1600e-01   4.5800e-01\nTrang                    -4.5283e-01  6.5067e-01  7.1600e-01   3.5800e-01\nPhatthalung              -1.1419e+00  2.5349e-01  2.2800e-01   1.1400e-01\nPattani                  -1.7626e-01  8.6009e-01  9.9800e-01   4.9900e-01\nYala                     -5.7986e-01  5.6201e-01  6.4200e-01   3.2100e-01\nNarathiwat               -1.5730e-01  8.7500e-01  9.3400e-01   4.6700e-01\n                            skewness kurtosis\nBangkok                   5.3745e-01   0.1889\nSamut Prakan              9.5057e-01   1.1711\nNonthaburi                6.1191e-01   0.0939\nPathum Thani              4.4355e-01   0.2996\nPhra Nakhon Si Ayutthaya  5.9521e-01   0.4484\nAng Thong                 6.0495e-01   0.2960\nLop Buri                  3.6841e-01  -0.1790\nSing Buri                 6.0087e-01   0.4694\nChai Nat                  5.8819e-01   0.2358\nSaraburi                  5.8289e-01   0.5779\nChon Buri                 8.0454e-01   0.9139\nRayong                    8.6343e-01   0.7078\nChanthaburi               6.3127e-01   0.6673\nTrat                      1.3912e+00   1.9957\nChachoengsao              3.7528e-01  -0.1090\nPrachin Buri              6.6647e-01   0.4498\nNakhon Nayok              5.0353e-01   0.0136\nSa Kaeo                   6.4956e-01   0.4696\nNakhon Ratchasima         4.8440e-01   0.0471\nBuri Ram                  6.0424e-01   0.4520\nSurin                     8.0352e-01   0.7435\nSi Sa Ket                 5.9759e-01   0.1081\nUbon Ratchathani          7.6611e-01   0.6763\nYasothon                  6.4968e-01   0.6090\nChaiyaphum                6.0844e-01   0.2091\nAmnat Charoen             6.4498e-01   0.0796\nBueng Kan                 8.2723e-01   0.9872\nNong Bua Lam Phu          7.7344e-01   0.7332\nKhon Kaen                 4.3738e-01   0.1821\nUdon Thani                5.3662e-01   0.2065\nLoei                      5.7167e-01   0.2712\nNong Khai                 6.8760e-01   0.3482\nMaha Sarakham             5.3655e-01   0.1407\nRoi Et                    5.9134e-01   0.1632\nKalasin                   4.8305e-01   0.0396\nSakon Nakhon              6.3291e-01   0.4616\nNakhon Phanom             7.4329e-01   0.6167\nMukdahan                  5.8462e-01   0.2849\nChiang Mai                6.0324e-01   0.4857\nLamphun                   6.9670e-01   0.5529\nLampang                   5.9472e-01   0.3876\nUttaradit                 8.0707e-01   0.8803\nPhrae                     6.4371e-01   0.4799\nNan                       8.2289e-01   0.6801\nPhayao                    7.6984e-01   0.6890\nChiang Rai                7.3220e-01   0.5643\nMae Hong Son              9.5651e-01   0.9389\nNakhon Sawan              3.8934e-01   0.1574\nUthai Thani               7.1836e-01   0.5004\nKamphaeng Phet            6.2017e-01   0.2520\nTak                       3.7956e-01  -0.1851\nSukhothai                 5.3343e-01   0.1705\nPhitsanulok               4.8690e-01   0.0009\nPhichit                   6.2818e-01   0.1588\nPhetchabun                5.9926e-01   0.5993\nRatchaburi                6.2887e-01   0.4926\nKanchanaburi              5.0867e-01  -0.1180\nSuphan Buri               5.4702e-01   0.4485\nNakhon Pathom             4.3576e-01   0.0242\nSamut Sakhon              8.7980e-01   1.2757\nSamut Songkhram           7.4206e-01   0.4423\nPhetchaburi               8.4950e-01   0.9052\nPrachuap Khiri Khan       8.2914e-01   0.2907\nNakhon Si Thammarat       6.6985e-01   0.7287\nKrabi                     6.5712e-01   0.2844\nPhangnga                  8.2832e-01   0.7164\nPhuket                            NA       NA\nSurat Thani               4.6766e-01   0.0445\nRanong                    7.7494e-01   0.7528\nChumphon                  7.5197e-01   0.3351\nSongkhla                  6.4480e-01   0.2712\nSatun                     9.1505e-01   0.8425\nTrang                     6.3956e-01   0.4113\nPhatthalung               6.5982e-01   0.4492\nPattani                   7.8788e-01   0.4239\nYala                      7.1408e-01   0.5651\nNarathiwat                9.5338e-01   0.9406\n\ndupc_table\n\n                                   gi cluster       e_gi       var_gi\nBangkok                  -2.717708178     Low 0.01338215 1.147992e-05\nSamut Prakan             -1.329605540     Low 0.01320551 3.608884e-05\nNonthaburi               -2.100471520     Low 0.01317995 1.558972e-05\nPathum Thani             -1.572851342     Low 0.01319556 1.063726e-05\nPhra Nakhon Si Ayutthaya -1.470690118     Low 0.01315329 9.317750e-06\nAng Thong                -0.314796428    High 0.01295629 1.871175e-05\nLop Buri                 -0.927690375    High 0.01306035 8.444157e-06\nSing Buri                -0.083130644    High 0.01330500 1.449569e-05\nChai Nat                 -0.696983510    High 0.01317697 1.726255e-05\nSaraburi                 -0.572944929     Low 0.01320888 1.365293e-05\nChon Buri                -0.475245710     Low 0.01319577 2.340967e-05\nRayong                   -0.549258013     Low 0.01331456 3.429443e-05\nChanthaburi              -1.267395041    High 0.01311044 1.458990e-05\nTrat                      0.080066892     Low 0.01387510 7.622264e-05\nChachoengsao             -1.673813968     Low 0.01308307 8.859400e-06\nPrachin Buri             -0.149252266     Low 0.01321562 1.864535e-05\nNakhon Nayok             -1.842892898    High 0.01337154 1.427551e-05\nSa Kaeo                  -0.959512249     Low 0.01295475 1.356189e-05\nNakhon Ratchasima        -0.272874127     Low 0.01307394 8.803897e-06\nBuri Ram                 -0.821153511     Low 0.01305397 1.405064e-05\nSurin                     1.189149377     Low 0.01320950 1.662307e-05\nSi Sa Ket                 0.710533059    High 0.01331377 1.778526e-05\nUbon Ratchathani          3.500815998     Low 0.01319612 2.095641e-05\nYasothon                  2.745447045    High 0.01338394 1.361431e-05\nChaiyaphum               -0.612767706    High 0.01305024 1.846620e-05\nAmnat Charoen             1.299269178    High 0.01316749 2.082946e-05\nBueng Kan                 2.778809835    High 0.01326289 2.407313e-05\nNong Bua Lam Phu          1.711358158     Low 0.01336270 2.472115e-05\nKhon Kaen                 1.212163122     Low 0.01315392 7.549672e-06\nUdon Thani                2.390005483    High 0.01292531 1.159823e-05\nLoei                      0.271161323    High 0.01321583 1.064932e-05\nNong Khai                 2.126025173    High 0.01316781 1.685144e-05\nMaha Sarakham             0.828546968    High 0.01297007 1.231452e-05\nRoi Et                    2.350209632    High 0.01306236 1.220751e-05\nKalasin                   1.648815428    High 0.01301233 1.053178e-05\nSakon Nakhon              3.699768092    High 0.01334396 1.164034e-05\nNakhon Phanom             1.153882872    High 0.01315045 2.133435e-05\nMukdahan                  4.439239241    High 0.01305973 1.166955e-05\nChiang Mai                0.301365008     Low 0.01296328 1.368006e-05\nLamphun                  -0.388874957    High 0.01326070 2.316158e-05\nLampang                   0.759085159    High 0.01315114 1.046081e-05\nUttaradit                -0.152374777    High 0.01312201 1.692206e-05\nPhrae                     1.353087849    High 0.01315670 1.347888e-05\nNan                       1.949677932    High 0.01295333 2.234891e-05\nPhayao                    1.392239119    High 0.01305465 1.808403e-05\nChiang Rai                1.266351447     Low 0.01327791 2.379392e-05\nMae Hong Son             -0.925996126     Low 0.01330850 3.601046e-05\nNakhon Sawan             -1.307997683     Low 0.01326984 8.222132e-06\nUthai Thani              -1.232158987     Low 0.01302155 1.364257e-05\nKamphaeng Phet           -2.436654206     Low 0.01323369 1.309166e-05\nTak                      -0.925892985     Low 0.01337505 7.813470e-06\nSukhothai                -0.660795846     Low 0.01317082 1.063134e-05\nPhitsanulok              -0.711355467     Low 0.01319633 1.145775e-05\nPhichit                  -1.940774893     Low 0.01334749 1.635808e-05\nPhetchabun               -0.272599189     Low 0.01316894 9.498894e-06\nRatchaburi               -1.147425372    High 0.01323639 1.370907e-05\nKanchanaburi             -1.045607479     Low 0.01324520 1.390229e-05\nSuphan Buri              -0.440138497     Low 0.01327274 1.011103e-05\nNakhon Pathom            -2.290091857     Low 0.01310869 1.008140e-05\nSamut Sakhon             -0.769838732     Low 0.01311143 1.631558e-05\nSamut Songkhram          -0.785642968    High 0.01335651 2.181857e-05\nPhetchaburi              -0.007137366     Low 0.01312586 2.397650e-05\nPrachuap Khiri Khan      -0.001940232     Low 0.01312964 3.214991e-05\nNakhon Si Thammarat      -0.580902346    High 0.01319324 1.406733e-05\nKrabi                    -0.196251438     Low 0.01319823 1.698586e-05\nPhangnga                 -1.286579927     Low 0.01322243 2.244832e-05\nPhuket                            NaN     Low         NA           NA\nSurat Thani              -0.877631007     Low 0.01299574 1.449524e-05\nRanong                   -0.113981979     Low 0.01290371 2.275358e-05\nChumphon                 -0.827905660    High 0.01304824 2.113597e-05\nSongkhla                  0.327050657    High 0.01330981 1.380987e-05\nSatun                     0.045440147    High 0.01307561 2.477987e-05\nTrang                    -0.168757939     Low 0.01313227 1.809406e-05\nPhatthalung               0.669866190     Low 0.01332247 1.778977e-05\nPattani                  -0.488622426    High 0.01326914 2.253086e-05\nYala                      0.172850954     Low 0.01323197 2.526861e-05\nNarathiwat               -0.216155533     Low 0.01280342 3.482704e-05\n                               std_dev      p_value p_sim p_folded_sim\nBangkok                  -2.6510677171 8.023775e-03 0.002        0.001\nSamut Prakan             -1.2846710569 1.989073e-01 0.148        0.074\nNonthaburi               -2.1397319180 3.237644e-02 0.016        0.008\nPathum Thani             -1.5737589592 1.155432e-01 0.096        0.048\nPhra Nakhon Si Ayutthaya -1.4457333591 1.482520e-01 0.114        0.057\nAng Thong                -0.2530856933 8.002020e-01 0.894        0.447\nLop Buri                 -0.8691038639 3.847903e-01 0.388        0.194\nSing Buri                -0.1184887630 9.056804e-01 0.944        0.472\nChai Nat                 -0.6942438151 4.875293e-01 0.514        0.257\nSaraburi                 -0.5713447310 5.677660e-01 0.614        0.307\nChon Buri                -0.4713845503 6.373661e-01 0.690        0.345\nRayong                   -0.5760349387 5.645916e-01 0.622        0.311\nChanthaburi              -1.1988708940 2.305782e-01 0.218        0.109\nTrat                     -0.0057688180 9.953972e-01 0.910        0.460\nChachoengsao             -1.5554177588 1.198466e-01 0.094        0.047\nPrachin Buri             -0.1540638172 8.775594e-01 0.932        0.466\nNakhon Nayok             -1.8334741787 6.673209e-02 0.050        0.025\nSa Kaeo                  -0.8897477876 3.736013e-01 0.364        0.182\nNakhon Ratchasima        -0.2286302057 8.191563e-01 0.896        0.448\nBuri Ram                 -0.7690030795 4.418915e-01 0.492        0.246\nSurin                     1.1744637877 2.402093e-01 0.242        0.121\nSi Sa Ket                 0.6536338895 5.133477e-01 0.494        0.247\nUbon Ratchathani          3.6261101953 2.877226e-04 0.002        0.001\nYasothon                  2.6450988158 8.166706e-03 0.018        0.009\nChaiyaphum               -0.5616642381 5.743448e-01 0.678        0.339\nAmnat Charoen             1.3060753149 1.915269e-01 0.198        0.099\nBueng Kan                 2.6897389374 7.150794e-03 0.010        0.005\nNong Bua Lam Phu          1.5927371142 1.112192e-01 0.134        0.067\nKhon Kaen                 1.1655482116 2.437972e-01 0.268        0.134\nUdon Thani                2.3900834461 1.684455e-02 0.036        0.018\nLoei                      0.2548372135 7.988488e-01 0.764        0.382\nNong Khai                 2.1114631689 3.473252e-02 0.044        0.022\nMaha Sarakham             0.9165634890 3.593714e-01 0.348        0.174\nRoi Et                    2.2564951043 2.403964e-02 0.034        0.017\nKalasin                   1.7073920968 8.774920e-02 0.116        0.058\nSakon Nakhon              3.5404038444 3.995152e-04 0.004        0.002\nNakhon Phanom             1.1696380662 2.421467e-01 0.254        0.127\nMukdahan                  4.3356962577 1.452995e-05 0.004        0.002\nChiang Mai                0.3491436466 7.269815e-01 0.712        0.356\nLamphun                  -0.4050277791 6.854571e-01 0.746        0.373\nLampang                   0.7173166991 4.731787e-01 0.430        0.215\nUttaradit                -0.1437957233 8.856618e-01 0.962        0.481\nPhrae                     1.3475344994 1.778082e-01 0.216        0.108\nNan                       2.0136129301 4.405019e-02 0.080        0.040\nPhayao                    1.3587747620 1.742180e-01 0.212        0.106\nChiang Rai                1.2135967117 2.249018e-01 0.258        0.129\nMae Hong Son             -0.9292208377 3.527747e-01 0.378        0.189\nNakhon Sawan             -1.3139327382 1.888688e-01 0.184        0.092\nUthai Thani              -1.1719387720 2.412216e-01 0.252        0.126\nKamphaeng Phet           -2.4332767667 1.496286e-02 0.002        0.001\nTak                      -0.9387106876 3.478793e-01 0.372        0.186\nSukhothai                -0.6607497865 5.087728e-01 0.538        0.269\nPhitsanulok              -0.6919844448 4.889471e-01 0.514        0.257\nPhichit                  -1.9910412484 4.647635e-02 0.014        0.007\nPhetchabun               -0.2703969970 7.868549e-01 0.866        0.433\nRatchaburi               -1.1542708645 2.483891e-01 0.232        0.116\nKanchanaburi             -1.0413985100 2.976906e-01 0.304        0.152\nSuphan Buri              -0.4541431192 6.497258e-01 0.684        0.342\nNakhon Pathom            -2.1644345072 3.043102e-02 0.014        0.007\nSamut Sakhon             -0.7490916787 4.538020e-01 0.476        0.238\nSamut Songkhram          -0.8465507422 3.972456e-01 0.398        0.199\nPhetchaburi              -0.0004065685 9.996756e-01 0.946        0.473\nPrachuap Khiri Khan       0.0029802899 9.976221e-01 0.910        0.455\nNakhon Si Thammarat      -0.5756175268 5.648737e-01 0.616        0.308\nKrabi                    -0.2011644926 8.405700e-01 0.888        0.444\nPhangnga                 -1.3062101742 1.914811e-01 0.190        0.095\nPhuket                              NA           NA    NA           NA\nSurat Thani              -0.7979808494 4.248816e-01 0.422        0.211\nRanong                   -0.0594634536 9.525830e-01 0.992        0.496\nChumphon                 -0.8373655628 4.023871e-01 0.454        0.227\nSongkhla                  0.2809909359 7.787174e-01 0.724        0.362\nSatun                     0.0602309075 9.519717e-01 0.854        0.427\nTrang                    -0.1564455615 8.756818e-01 0.942        0.471\nPhatthalung               0.6123568851 5.403017e-01 0.574        0.287\nPattani                  -0.5162224355 6.056991e-01 0.664        0.332\nYala                      0.1478946057 8.824259e-01 0.840        0.420\nNarathiwat               -0.1539964501 8.776125e-01 0.986        0.493\n                          skewness     kurtosis\nBangkok                  0.2246970 -0.174159844\nSamut Prakan             0.6770473  0.370242897\nNonthaburi               0.4117895  0.192788494\nPathum Thani             0.2957740 -0.161435571\nPhra Nakhon Si Ayutthaya 0.2633794 -0.065482686\nAng Thong                0.3823880 -0.032660986\nLop Buri                 0.3161044  0.249935726\nSing Buri                0.3114738 -0.135817694\nChai Nat                 0.4202330  0.134713127\nSaraburi                 0.3357133 -0.100936471\nChon Buri                0.4638709  0.027736494\nRayong                   0.4114219 -0.266273790\nChanthaburi              0.2792663 -0.226841548\nTrat                     0.7285445 -0.099574065\nChachoengsao             0.2436160 -0.101732118\nPrachin Buri             0.2907434 -0.166034660\nNakhon Nayok             0.2148294 -0.316406736\nSa Kaeo                  0.3769835  0.081275194\nNakhon Ratchasima        0.2475189 -0.195389071\nBuri Ram                 0.3745006 -0.101075857\nSurin                    0.4477957  0.220138965\nSi Sa Ket                0.4979657  0.188429888\nUbon Ratchathani         0.3330257 -0.477716785\nYasothon                 0.4058315 -0.102408114\nChaiyaphum               0.4120693 -0.005541534\nAmnat Charoen            0.3817613  0.025675449\nBueng Kan                0.3768606 -0.296329093\nNong Bua Lam Phu         0.3360689 -0.276222724\nKhon Kaen                0.2688020  0.122634166\nUdon Thani               0.3093840  0.183910554\nLoei                     0.2522778 -0.149711477\nNong Khai                0.3680472  0.401943443\nMaha Sarakham            0.3269842  0.224591303\nRoi Et                   0.3123491 -0.146504365\nKalasin                  0.2665853 -0.260969928\nSakon Nakhon             0.3028020 -0.266272828\nNakhon Phanom            0.4892365  0.215664621\nMukdahan                 0.5722186  0.719043190\nChiang Mai               0.2611429 -0.285706647\nLamphun                  0.4610392 -0.106060248\nLampang                  0.3363379 -0.067413678\nUttaradit                0.4242659 -0.068169019\nPhrae                    0.4022652 -0.038074194\nNan                      0.5645875  0.163618025\nPhayao                   0.6542161  0.587659129\nChiang Rai               0.4740089 -0.082418319\nMae Hong Son             0.4837929 -0.180545693\nNakhon Sawan             0.2867737 -0.103245545\nUthai Thani              0.2956272 -0.012970664\nKamphaeng Phet           0.2750210 -0.267477009\nTak                      0.2479347 -0.146107778\nSukhothai                0.3356108  0.011743226\nPhitsanulok              0.3228450 -0.050786377\nPhichit                  0.3677572 -0.127363490\nPhetchabun               0.2581555 -0.442875726\nRatchaburi               0.3340267 -0.171828588\nKanchanaburi             0.1769270 -0.178996842\nSuphan Buri              0.2581790  0.203051620\nNakhon Pathom            0.3148082 -0.027055089\nSamut Sakhon             0.3209690 -0.274094986\nSamut Songkhram          0.4373997  0.206078250\nPhetchaburi              0.4348063 -0.051132087\nPrachuap Khiri Khan      0.5545514  0.279495862\nNakhon Si Thammarat      0.1930495 -0.343302351\nKrabi                    0.3024838 -0.189658889\nPhangnga                 0.3379631 -0.188071101\nPhuket                          NA           NA\nSurat Thani              0.3678565  0.270762597\nRanong                   0.3518123 -0.112059607\nChumphon                 0.3478770 -0.233967272\nSongkhla                 0.3156711 -0.025665124\nSatun                    0.4717657 -0.098255301\nTrang                    0.3952619  0.037181941\nPhatthalung              0.2013092 -0.405505252\nPattani                  0.4970638  0.141966611\nYala                     0.4048655  0.055836250\nNarathiwat               0.5630588 -0.060546647\n\ndtpc_table\n\n                                  gi cluster       e_gi       var_gi\nBangkok                  -2.09331548     Low 0.01344474 1.869030e-05\nSamut Prakan             -0.69556093     Low 0.01307707 4.756161e-05\nNonthaburi               -1.92407937     Low 0.01333755 2.620852e-05\nPathum Thani             -2.02975389     Low 0.01347712 1.704400e-05\nPhra Nakhon Si Ayutthaya -1.65208683     Low 0.01317359 1.543907e-05\nAng Thong                -1.15276552    High 0.01326599 2.841210e-05\nLop Buri                  0.39971393     Low 0.01331599 1.360561e-05\nSing Buri                 1.35198306    High 0.01321413 2.293101e-05\nChai Nat                 -0.76129534    High 0.01305085 2.595533e-05\nSaraburi                 -1.63068361     Low 0.01323584 1.911859e-05\nChon Buri                -0.86864078     Low 0.01322305 3.760114e-05\nRayong                   -1.07477637     Low 0.01339216 5.132373e-05\nChanthaburi              -1.51319916     Low 0.01325920 2.156477e-05\nTrat                     -0.64558439     Low 0.01309200 1.033172e-04\nChachoengsao             -2.52951740    High 0.01314083 1.326213e-05\nPrachin Buri             -0.54593837     Low 0.01338599 2.786051e-05\nNakhon Nayok             -1.16465056     Low 0.01320313 2.036340e-05\nSa Kaeo                   0.45421191     Low 0.01312422 2.145621e-05\nNakhon Ratchasima        -0.69834123    High 0.01323318 1.397917e-05\nBuri Ram                  0.44889902    High 0.01346177 2.266088e-05\nSurin                     2.38438806    High 0.01300967 2.722014e-05\nSi Sa Ket                 3.49617348    High 0.01322047 2.590337e-05\nUbon Ratchathani          3.75945203    High 0.01305211 3.367584e-05\nYasothon                  2.70362288    High 0.01324606 2.110111e-05\nChaiyaphum               -0.35169462    High 0.01341262 2.761806e-05\nAmnat Charoen             1.49694948    High 0.01333416 3.716522e-05\nBueng Kan                -0.19183415    High 0.01306775 3.516653e-05\nNong Bua Lam Phu         -1.23155947     Low 0.01301655 3.373751e-05\nKhon Kaen                 0.13163692     Low 0.01321705 1.069531e-05\nUdon Thani               -1.14535572     Low 0.01291796 1.736701e-05\nLoei                     -0.88265690     Low 0.01339851 1.728498e-05\nNong Khai                 0.32111535     Low 0.01307891 2.655999e-05\nMaha Sarakham             2.06752466     Low 0.01301735 1.996283e-05\nRoi Et                    2.30141804    High 0.01302714 1.952307e-05\nKalasin                  -0.75226457     Low 0.01324870 1.841110e-05\nSakon Nakhon             -0.41690284    High 0.01338234 1.737353e-05\nNakhon Phanom             0.82477161     Low 0.01326263 3.402044e-05\nMukdahan                  1.73567009     Low 0.01315352 1.908513e-05\nChiang Mai                0.09180824    High 0.01316384 2.104884e-05\nLamphun                   0.15770074    High 0.01300306 3.391946e-05\nLampang                  -0.19070072    High 0.01297108 1.594100e-05\nUttaradit                 0.47550680    High 0.01299232 2.590823e-05\nPhrae                     1.02555056    High 0.01310312 2.147383e-05\nNan                       0.74139360    High 0.01330341 4.053538e-05\nPhayao                    1.00533865    High 0.01318119 2.954284e-05\nChiang Rai                0.67083531     Low 0.01319344 3.460911e-05\nMae Hong Son             -0.43652484    High 0.01315104 5.601294e-05\nNakhon Sawan              0.95458020     Low 0.01293863 1.236662e-05\nUthai Thani               0.82538825     Low 0.01320005 2.378929e-05\nKamphaeng Phet           -0.96145441    High 0.01317206 2.229745e-05\nTak                       0.32080376     Low 0.01319944 1.289702e-05\nSukhothai                 1.06675925     Low 0.01309437 1.849793e-05\nPhitsanulok               0.30011769    High 0.01338176 1.805629e-05\nPhichit                   0.77381725     Low 0.01316127 2.657872e-05\nPhetchabun               -0.98577992    High 0.01297668 1.501914e-05\nRatchaburi               -0.65563072     Low 0.01311878 2.182861e-05\nKanchanaburi             -1.28934700    High 0.01295969 2.182189e-05\nSuphan Buri               1.18099988     Low 0.01291382 1.493006e-05\nNakhon Pathom            -1.96852670     Low 0.01311320 1.562977e-05\nSamut Sakhon             -0.79385832     Low 0.01306563 2.725781e-05\nSamut Songkhram          -0.79334483    High 0.01328318 3.482025e-05\nPhetchaburi               0.27425671     Low 0.01328170 3.798415e-05\nPrachuap Khiri Khan       0.19224929    High 0.01345427 5.209440e-05\nNakhon Si Thammarat      -0.47229009     Low 0.01318621 2.186127e-05\nKrabi                    -0.79687060     Low 0.01313400 2.547820e-05\nPhangnga                 -0.36686263     Low 0.01288508 3.448353e-05\nPhuket                           NaN     Low         NA           NA\nSurat Thani              -0.04367634     Low 0.01337356 2.152343e-05\nRanong                   -0.36233172    High 0.01332769 3.512916e-05\nChumphon                 -0.29704512    High 0.01323569 3.961683e-05\nSongkhla                 -0.52505974     Low 0.01319908 2.151601e-05\nSatun                    -0.14967362     Low 0.01282508 3.447409e-05\nTrang                    -0.45087120     Low 0.01311831 2.475549e-05\nPhatthalung              -1.16843866    High 0.01329672 2.875923e-05\nPattani                  -0.20508471     Low 0.01299316 3.514421e-05\nYala                     -0.55119224    High 0.01348045 3.849898e-05\nNarathiwat               -0.17734641    High 0.01298200 5.087367e-05\n                             std_dev      p_value p_sim p_folded_sim  skewness\nBangkok                  -2.01598809 0.0438012208 0.010        0.005 0.5374472\nSamut Prakan             -0.71621763 0.4738569804 0.484        0.242 0.9505723\nNonthaburi               -1.91280933 0.0557724668 0.012        0.006 0.6119138\nPathum Thani             -2.06008747 0.0393901791 0.012        0.006 0.4435516\nPhra Nakhon Si Ayutthaya -1.57298977 0.1157211859 0.070        0.035 0.5952123\nAng Thong                -1.12509366 0.2605493492 0.248        0.124 0.6049531\nLop Buri                  0.33016840 0.7412727228 0.712        0.356 0.3684101\nSing Buri                 1.26867155 0.2045582341 0.210        0.105 0.6008660\nChai Nat                 -0.69930562 0.4843610552 0.518        0.259 0.5881933\nSaraburi                 -1.68116035 0.0927317726 0.056        0.028 0.5828882\nChon Buri                -0.83965567 0.4011014746 0.436        0.218 0.8045405\nRayong                   -1.11201553 0.2661314737 0.244        0.122 0.8634300\nChanthaburi              -1.48503906 0.1375334771 0.096        0.048 0.6312675\nTrat                     -0.64390816 0.5196349885 0.574        0.279 1.3912361\nChachoengsao             -2.43444771 0.0149145345 0.002        0.001 0.3752774\nPrachin Buri             -0.56329492 0.5732340744 0.648        0.324 0.6664709\nNakhon Nayok             -1.16340884 0.2446636662 0.230        0.115 0.5035278\nSa Kaeo                   0.44792292 0.6542088271 0.592        0.296 0.6495591\nNakhon Ratchasima        -0.67652401 0.4987080041 0.538        0.269 0.4844019\nBuri Ram                  0.35993524 0.7188955647 0.662        0.331 0.6042432\nSurin                     2.30260878 0.0213008645 0.048        0.024 0.8035168\nSi Sa Ket                 3.40454007 0.0006627558 0.004        0.002 0.5975882\nUbon Ratchathani          3.86725556 0.0001100671 0.006        0.003 0.7661069\nYasothon                  2.64159480 0.0082516710 0.030        0.015 0.6496840\nChaiyaphum               -0.39126043 0.6956047419 0.780        0.390 0.6084357\nAmnat Charoen             1.42432057 0.1543536964 0.196        0.098 0.6449846\nBueng Kan                -0.17693209 0.8595617360 0.978        0.489 0.8272322\nNong Bua Lam Phu         -1.21609637 0.2239482120 0.166        0.083 0.7734410\nKhon Kaen                 0.11283409 0.9101620919 0.880        0.440 0.4373844\nUdon Thani               -1.06318986 0.2876958600 0.280        0.140 0.5366158\nLoei                     -0.91659734 0.3593536794 0.372        0.186 0.5716723\nNong Khai                 0.32933598 0.7419017500 0.652        0.326 0.6876002\nMaha Sarakham             2.09072560 0.0365526686 0.062        0.031 0.5365520\nRoi Et                    2.17596400 0.0295579525 0.054        0.027 0.5913438\nKalasin                  -0.73991125 0.4593538471 0.496        0.248 0.4830497\nSakon Nakhon             -0.46635837 0.6409590010 0.694        0.347 0.6329065\nNakhon Phanom             0.81797549 0.4133711804 0.406        0.203 0.7432931\nMukdahan                  1.61581823 0.1061336198 0.122        0.061 0.5846195\nChiang Mai                0.08951897 0.9286694762 0.828        0.414 0.6032376\nLamphun                   0.18755830 0.8512229181 0.764        0.382 0.6966979\nLampang                  -0.13427751 0.8931831349 0.994        0.497 0.5947199\nUttaradit                 0.51112539 0.6092632608 0.544        0.272 0.8070693\nPhrae                     1.01745909 0.3089350865 0.310        0.155 0.6437129\nNan                       0.67068099 0.5024237740 0.466        0.233 0.8228920\nPhayao                    0.94057132 0.3469245868 0.330        0.165 0.7698366\nChiang Rai                0.66917588 0.5033832916 0.440        0.220 0.7321988\nMae Hong Son             -0.42576446 0.6702794890 0.798        0.399 0.9565067\nNakhon Sawan              1.00803945 0.3134355219 0.306        0.153 0.3893373\nUthai Thani               0.75185797 0.4521364735 0.416        0.208 0.7183598\nKamphaeng Phet           -0.92818277 0.3533127717 0.354        0.177 0.6201667\nTak                       0.27807662 0.7809535433 0.728        0.364 0.3795627\nSukhothai                 1.02693118 0.3044528722 0.320        0.160 0.5334264\nPhitsanulok               0.23776730 0.8120615848 0.774        0.387 0.4869028\nPhichit                   0.75925627 0.4476992717 0.428        0.214 0.6281835\nPhetchabun               -0.91747702 0.3588927270 0.362        0.181 0.5992643\nRatchaburi               -0.62651967 0.5309741401 0.576        0.288 0.6288744\nKanchanaburi             -1.20875396 0.2267573856 0.202        0.101 0.5086681\nSuphan Buri               1.20798425 0.2270533223 0.232        0.116 0.5470164\nNakhon Pathom            -1.84731679 0.0647012408 0.032        0.016 0.4357638\nSamut Sakhon             -0.74130231 0.4585101588 0.482        0.241 0.8798039\nSamut Songkhram          -0.82171886 0.4112369233 0.436        0.218 0.7420629\nPhetchaburi               0.24379400 0.8073903683 0.718        0.359 0.8495029\nPrachuap Khiri Khan       0.15394841 0.8776504138 0.720        0.360 0.8291430\nNakhon Si Thammarat      -0.46175318 0.6442583302 0.696        0.348 0.6698502\nKrabi                    -0.80062366 0.4233495479 0.430        0.215 0.6571227\nPhangnga                 -0.32351316 0.7463066443 0.844        0.422 0.8283179\nPhuket                            NA           NA    NA           NA        NA\nSurat Thani              -0.08863573 0.9293714148 0.990        0.495 0.4676632\nRanong                   -0.39188585 0.6951425606 0.792        0.396 0.7749391\nChumphon                 -0.29304120 0.7694906581 0.886        0.443 0.7519667\nSongkhla                 -0.51780992 0.6045908978 0.678        0.339 0.6448024\nSatun                    -0.09151860 0.9270805294 0.916        0.458 0.9150536\nTrang                    -0.45283257 0.6506693097 0.716        0.358 0.6395583\nPhatthalung              -1.14192377 0.2534857088 0.228        0.114 0.6598169\nPattani                  -0.17625784 0.8600913846 0.998        0.499 0.7878836\nYala                     -0.57985969 0.5620092401 0.642        0.321 0.7140838\nNarathiwat               -0.15730492 0.8750045395 0.934        0.467 0.9533839\n                              kurtosis\nBangkok                   0.1888640362\nSamut Prakan              1.1710768647\nNonthaburi                0.0938961654\nPathum Thani              0.2996038631\nPhra Nakhon Si Ayutthaya  0.4483953934\nAng Thong                 0.2960339692\nLop Buri                 -0.1790248624\nSing Buri                 0.4693585438\nChai Nat                  0.2357876486\nSaraburi                  0.5779030210\nChon Buri                 0.9139075039\nRayong                    0.7078248861\nChanthaburi               0.6673202565\nTrat                      1.9957045622\nChachoengsao             -0.1090028060\nPrachin Buri              0.4498146540\nNakhon Nayok              0.0135625823\nSa Kaeo                   0.4696106251\nNakhon Ratchasima         0.0471318661\nBuri Ram                  0.4520200040\nSurin                     0.7434712844\nSi Sa Ket                 0.1081221838\nUbon Ratchathani          0.6762672554\nYasothon                  0.6089660261\nChaiyaphum                0.2090808551\nAmnat Charoen             0.0796252102\nBueng Kan                 0.9871872030\nNong Bua Lam Phu          0.7331788479\nKhon Kaen                 0.1821048176\nUdon Thani                0.2065015998\nLoei                      0.2712128044\nNong Khai                 0.3481943120\nMaha Sarakham             0.1406975659\nRoi Et                    0.1632112338\nKalasin                   0.0396229701\nSakon Nakhon              0.4615973320\nNakhon Phanom             0.6167307217\nMukdahan                  0.2848791675\nChiang Mai                0.4857231401\nLamphun                   0.5528830554\nLampang                   0.3875631706\nUttaradit                 0.8802920427\nPhrae                     0.4798676524\nNan                       0.6801176500\nPhayao                    0.6889975837\nChiang Rai                0.5643366811\nMae Hong Son              0.9389369670\nNakhon Sawan              0.1574232520\nUthai Thani               0.5003653251\nKamphaeng Phet            0.2519605265\nTak                      -0.1851117784\nSukhothai                 0.1704966260\nPhitsanulok               0.0009086263\nPhichit                   0.1587780240\nPhetchabun                0.5992565597\nRatchaburi                0.4926335752\nKanchanaburi             -0.1179867408\nSuphan Buri               0.4485280576\nNakhon Pathom             0.0242269960\nSamut Sakhon              1.2757406258\nSamut Songkhram           0.4422973820\nPhetchaburi               0.9052305560\nPrachuap Khiri Khan       0.2906761844\nNakhon Si Thammarat       0.7287139665\nKrabi                     0.2844314665\nPhangnga                  0.7163624150\nPhuket                              NA\nSurat Thani               0.0444938112\nRanong                    0.7527830442\nChumphon                  0.3351349733\nSongkhla                  0.2711845514\nSatun                     0.8424640920\nTrang                     0.4112646375\nPhatthalung               0.4492170544\nPattani                   0.4239059131\nYala                      0.5651006550\nNarathiwat                0.9406280910\n\n\n\n11.2.2 Mapping both local Geary C’s and p-values\n\nthailand_drug_use.localGC &lt;- cbind(thai_drug_use_sf, localGC_DUPC) \nthailand_trafficking.localGC &lt;- cbind(thai_trafficking_sf, localGC_DTPC)\n\nDrug Use Per Capita\n\nlocalGC_DUPC.map &lt;- tm_shape(thailand_drug_use.localGC) + \n  tm_fill(col=\"cluster\", \n          style=\"pretty\", \n          palette=\"-RdBu\", \n          title=\"local geary c statistics\") + \n  tm_borders(alpha = 0.2)\n\npvalue_gc_dupc.map &lt;- tm_shape(thailand_drug_use.localGC) + \n  tm_fill(col=\"p_sim\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Geary's C p-values\") +\n  tm_borders(alpha = 0.2)\n\ntmap_arrange(localGC_DUPC.map, pvalue_gc_dupc.map, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nDrug Trafficking Per Capita\n\nlocalGC_DTPC.map &lt;- tm_shape(thailand_trafficking.localGC) + \n  tm_fill(col=\"cluster\", \n          style=\"pretty\", \n          palette=\"-RdBu\", \n          title=\"local geary c statistics\") + \n  tm_borders(alpha = 0.2)\n\npvalue_gc_dtpc.map &lt;- tm_shape(thailand_trafficking.localGC) + \n  tm_fill(col=\"p_sim\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Purples\", \n          title = \"local Geary's C p-values\") +\n  tm_borders(alpha = 0.2)\n\ntmap_arrange(localGC_DTPC.map, pvalue_gc_dtpc.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#plotting-moran-scatterplot",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#plotting-moran-scatterplot",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "12.1 Plotting Moran scatterplot",
    "text": "12.1 Plotting Moran scatterplot\nThe plot is split into 4 quadrants, with the top right belonging to areas having a high DUPC in 2022, surrounded by other areas that have the average level of the DUPC. These are high-high locations. Conversely, the ones in the lower-left quadrant are low-low areas.\n\nrswm_q_list &lt;- recreate_listw(wm_q, rswm_q)\nnci_dupc &lt;- moran.plot(thai_drug_use_sf$DUPC_2022,rswm_q_list\n                  ,labels=as.character(thai_drug_use_sf$province_en), \n                   xlab=\"DUPC 2022\", \n                   ylab=\"Spatially Lag DUPC 2022\", \n                   zero.policy = TRUE)\n\n\n\n\n\n\n\nnci_dupc\n\n              x           wx is_inf                   labels        dfb.1_\n1  2.399964e-04 0.0009217871  FALSE                  Bangkok -0.1863833375\n2  2.935020e-03 0.0021286098  FALSE                 Chai Nat -0.0315739020\n3  3.799533e-04 0.0009906127  FALSE               Nonthaburi -0.1745889941\n4  5.809064e-04 0.0016864560  FALSE             Pathum Thani -0.0484261173\n5  1.260897e-03 0.0018222061  FALSE Phra Nakhon Si Ayutthaya -0.0524210146\n6  3.471598e-03 0.0054580212   TRUE                Bueng Kan  0.0497764973\n7  5.767312e-04 0.0011479191  FALSE             Samut Prakan -0.1474784217\n8  1.034982e-03 0.0023162332  FALSE                 Saraburi  0.0322133994\n9  3.523694e-03 0.0026507649  FALSE                Sing Buri -0.0053384117\n10 3.896775e-03 0.0024416912  FALSE                Ang Thong  0.0030338835\n11 2.875275e-03 0.0017648489  FALSE              Chanthaburi -0.0518165160\n12 2.055842e-03 0.0017556943  FALSE             Chachoengsao -0.0696770087\n13 1.257302e-03 0.0022756699  FALSE                Chon Buri  0.0126137956\n14 1.766162e-03 0.0028752745  FALSE                     Trat  0.0582246216\n15 5.147066e-03 0.0013184671  FALSE             Nakhon Nayok  0.1747272054\n16 1.519233e-03 0.0026133314  FALSE             Prachin Buri  0.0428279109\n17 1.895893e-03 0.0020662882  FALSE                   Rayong -0.0367712507\n18 1.849046e-03 0.0020120582  FALSE                  Sa Kaeo -0.0418307348\n19 3.182506e-03 0.0021971473  FALSE               Chaiyaphum -0.0233528783\n20 1.401373e-03 0.0025825572  FALSE        Nakhon Ratchasima  0.0464941074\n21 2.208569e-03 0.0021109583  FALSE                 Buri Ram -0.0365009690\n22 5.386161e-03 0.0047296612  FALSE                 Yasothon -0.0995242956\n23 5.251536e-03 0.0032862995  FALSE                Si Sa Ket  0.0243608016\n24 1.512988e-03 0.0037477795  FALSE                    Surin  0.1916081035\n25 7.934168e-03 0.0038603347   TRUE            Amnat Charoen  0.1719861407\n26 1.978290e-03 0.0061906215   TRUE         Ubon Ratchathani  0.4239979440\n27 6.193744e-03 0.0037765749   TRUE                  Kalasin  0.0189944204\n28 2.528131e-03 0.0033893600  FALSE                Khon Kaen  0.0542491568\n29 6.990898e-03 0.0037617086   TRUE            Nakhon Phanom  0.0823736644\n30 3.190925e-03 0.0021760303  FALSE                 Lop Buri -0.0238840749\n31 3.263254e-03 0.0033422383  FALSE            Maha Sarakham  0.0139140472\n32 4.216554e-03 0.0057282839   TRUE                 Mukdahan -0.0587259085\n33 4.267759e-03 0.0043040394  FALSE                   Roi Et -0.0271467288\n34 5.958944e-03 0.0028626962  FALSE                     Loei  0.1213389589\n35 3.596974e-03 0.0052409605   TRUE             Sakon Nakhon  0.0281071013\n36 5.786192e-03 0.0044535733  FALSE                Nong Khai -0.0780362291\n37 1.840912e-03 0.0044246174  FALSE         Nong Bua Lam Phu  0.2295113309\n38 4.786778e-03 0.0043174827  FALSE               Udon Thani -0.0494105741\n39 2.485174e-03 0.0039789473  FALSE               Chiang Rai  0.1016699910\n40 2.301752e-03 0.0029570521  FALSE               Chiang Mai  0.0339812995\n41 4.807502e-03 0.0046055170  FALSE                      Nan -0.0665641056\n42 5.925334e-03 0.0038385430   TRUE                   Phayao -0.0023644481\n43 4.351739e-03 0.0037184663  FALSE                    Phrae -0.0135209983\n44 1.951164e-03 0.0016067512  FALSE             Mae Hong Son -0.0856431299\n45 3.709756e-03 0.0031876323  FALSE                  Lampang  0.0008412656\n46 5.727415e-03 0.0023077529  FALSE                  Lamphun  0.1614177664\n47 7.448482e-04 0.0009257756  FALSE           Kamphaeng Phet -0.1888984006\n48 9.117506e-04 0.0022452065  FALSE                      Tak  0.0291401749\n49 1.439855e-03 0.0019793809  FALSE             Nakhon Sawan -0.0360718866\n50 1.101007e-03 0.0011047169  FALSE                  Phichit -0.1575507454\n51 5.660040e-04 0.0022704499  FALSE              Phitsanulok  0.0597012509\n52 1.668161e-03 0.0025667673  FALSE               Phetchabun  0.0281807342\n53 6.102615e-04 0.0023039294  FALSE                Sukhothai  0.0621075233\n54 3.539478e-03 0.0025838767  FALSE                Uttaradit -0.0061640112\n55 1.759641e-03 0.0018080082  FALSE              Uthai Thani -0.0636137359\n56 1.962166e-03 0.0019453332  FALSE             Kanchanaburi -0.0503723798\n57 1.880651e-03 0.0012963249  FALSE            Nakhon Pathom -0.1202369304\n58 1.825052e-03 0.0027334493  FALSE      Prachuap Khiri Khan  0.0384843457\n59 2.392893e-03 0.0027212842  FALSE              Phetchaburi  0.0107898385\n60 3.383373e-03 0.0018495552  FALSE               Ratchaburi -0.0261377501\n61 2.955427e-03 0.0019443018  FALSE          Samut Songkhram -0.0400680916\n62 5.663898e-05 0.0021148619  FALSE             Samut Sakhon  0.0746756282\n63 1.791250e-03 0.0024598349  FALSE              Suphan Buri  0.0096454849\n64 5.015449e-04 0.0025881835  FALSE                    Krabi  0.1251571648\n65 3.074006e-03 0.0019010883  FALSE                 Chumphon -0.0380887363\n66 3.308728e-03 0.0022778979  FALSE      Nakhon Si Thammarat -0.0176691947\n67 2.184585e-03 0.0014599192  FALSE                 Phangnga -0.0958495667\n68 2.573575e-04 0.0000000000  FALSE                   Phuket -0.3811093344\n69 1.242809e-03 0.0026313313  FALSE                   Ranong  0.0646904078\n70 2.635403e-03 0.0020623347  FALSE              Surat Thani -0.0397763388\n71 2.224017e-03 0.0025871432  FALSE                    Trang  0.0054470050\n72 1.665713e-03 0.0024750430  FALSE               Narathiwat  0.0173293848\n73 3.494364e-03 0.0022314031  FALSE                  Pattani -0.0132161665\n74 2.455751e-03 0.0032970170  FALSE              Phatthalung  0.0522028750\n75 1.455722e-03 0.0029109502  FALSE                     Yala  0.0863652216\n76 3.572773e-03 0.0029594228  FALSE                 Songkhla -0.0005056237\n77 4.082549e-03 0.0027508472  FALSE                    Satun  0.0063333009\n          dfb.x       dffit     cov.r       cook.d        hat\n1   0.153245254 -0.18655151 1.0461494 1.743872e-02 0.03993574\n2  -0.008955830 -0.07372385 1.0295770 2.739265e-03 0.01318153\n3   0.140978085 -0.17501632 1.0440330 1.535681e-02 0.03698451\n4   0.037972083 -0.04873805 1.0603224 1.202619e-03 0.03304628\n5   0.035531664 -0.05492014 1.0469390 1.525769e-03 0.02233632\n6   0.128037758  0.32188218 0.8791779 4.819766e-02 0.01542818\n7   0.115717309 -0.14841243 1.0441783 1.106581e-02 0.03312452\n8  -0.023158244  0.03309556 1.0528370 5.547444e-04 0.02544648\n9  -0.017310171 -0.04114385 1.0407073 8.566238e-04 0.01578024\n10 -0.051868100 -0.09222982 1.0347755 4.285204e-03 0.01899436\n11 -0.009867142 -0.11289501 1.0143112 6.375944e-03 0.01308698\n12  0.031310235 -0.08666155 1.0289654 3.780553e-03 0.01493675\n13 -0.008558763  0.01321016 1.0505109 8.842415e-05 0.02238232\n14 -0.032206051  0.06632541 1.0378180 2.221614e-03 0.01699391\n15 -0.376333448 -0.46190165 0.9302100 1.008799e-01 0.03863048\n16 -0.026592762  0.04643227 1.0443627 1.090932e-03 0.01932620\n17  0.018772936 -0.04336613 1.0406339 9.515286e-04 0.01598199\n18  0.022026614 -0.04867996 1.0402459 1.198569e-03 0.01633045\n19 -0.020018095 -0.07789872 1.0296841 3.057327e-03 0.01390527\n20 -0.030146192  0.04953370 1.0455498 1.241418e-03 0.02062719\n21  0.013855367 -0.04838142 1.0373720 1.183588e-03 0.01414726\n22  0.199657726  0.23788285 1.0395403 2.820716e-02 0.04394084\n23 -0.050749423 -0.06143500 1.0684442 1.910346e-03 0.04088936\n24 -0.119265897  0.20752315 0.9884873 2.120002e-02 0.01939208\n25 -0.257500109 -0.27123668 1.1674323 3.703866e-02 0.13154923\n26 -0.203668070  0.51312562 0.6926899 1.087210e-01 0.01541563\n27 -0.032799216 -0.03662638 1.0987215 6.796345e-04 0.06556927\n28 -0.009767115  0.08654804 1.0252718 3.767286e-03 0.01315454\n29 -0.131007004 -0.14130067 1.1259499 1.009114e-02 0.09250550\n30 -0.021130288 -0.08084305 1.0288349 3.291395e-03 0.01393930\n31  0.016078253  0.05386765 1.0364390 1.466492e-03 0.01425716\n32  0.258722322  0.39532460 0.8832936 7.260064e-02 0.02271695\n33  0.109692186  0.16445312 1.0204455 1.349921e-02 0.02339601\n34 -0.216747047 -0.24561746 1.0632740 3.017704e-02 0.05869353\n35  0.132840571  0.29410485 0.9112794 4.094756e-02 0.01631560\n36  0.143519164  0.16470989 1.0719499 1.366015e-02 0.05394228\n37 -0.121473750  0.26649874 0.9336954 3.403093e-02 0.01639290\n38  0.124207996  0.16189056 1.0380213 1.313863e-02 0.03157157\n39 -0.021599038  0.15745087 0.9908752 1.225678e-02 0.01323609\n40 -0.011217338  0.04716487 1.0370753 1.124870e-03 0.01376566\n41  0.165478375  0.21480176 1.0221208 2.294808e-02 0.03194688\n42  0.004246304  0.00482313 1.0901541 1.178841e-05 0.05774872\n43  0.048583394  0.07077604 1.0474325 2.531664e-03 0.02455930\n44  0.042014981 -0.10273229 1.0249464 5.300555e-03 0.01559554\n45  0.009274305  0.01868710 1.0446576 1.769157e-04 0.01723120\n46 -0.300122566 -0.34607074 1.0232058 5.896539e-02 0.05238516\n47  0.144091797 -0.19111237 1.0261761 1.821895e-02 0.03009467\n48 -0.021523474  0.02971021 1.0551770 4.471227e-04 0.02733092\n49  0.023075878 -0.03863564 1.0463257 7.557025e-04 0.02018907\n50  0.111482924 -0.16266097 1.0236355 1.321980e-02 0.02449141\n51 -0.046922538  0.06006306 1.0596239 1.825580e-03 0.03332623\n52 -0.016398467  0.03140382 1.0443531 4.993973e-04 0.01785580\n53 -0.048472824  0.06255699 1.0583810 1.980013e-03 0.03250052\n54 -0.021546900 -0.05039957 1.0393738 1.284491e-03 0.01589159\n55  0.035314140 -0.07235074 1.0365536 2.641909e-03 0.01704865\n56  0.024504591 -0.06063844 1.0368594 1.857501e-03 0.01552180\n57  0.062022350 -0.14117313 1.0104612 9.935984e-03 0.01609326\n58 -0.020569276  0.04449692 1.0411401 1.001770e-03 0.01651634\n59 -0.002971854  0.01576079 1.0407187 1.258488e-04 0.01346579\n60 -0.047194572 -0.13213515 1.0109165 8.711794e-03 0.01488602\n61 -0.012759851 -0.09592020 1.0219176 4.619639e-03 0.01322097\n62 -0.062714807  0.07467903 1.0710503 2.821547e-03 0.04406106\n63 -0.005259895  0.01105562 1.0445455 6.193328e-05 0.01678676\n64 -0.099335813  0.12573022 1.0513940 7.963333e-03 0.03455944\n65 -0.021277151 -0.10695941 1.0181933 5.732800e-03 0.01352211\n66 -0.024125497 -0.07512414 1.0315661 2.845183e-03 0.01448041\n67  0.037516567 -0.12566665 1.0119845 7.886398e-03 0.01425775\n68  0.312678009 -0.38150860 0.9742546 7.039631e-02 0.03956036\n69 -0.044078018  0.06764748 1.0453212 2.312816e-03 0.02256891\n70  0.003533341 -0.06887488 1.0307209 2.392303e-03 0.01302128\n71 -0.002025119  0.00727232 1.0417737 2.679932e-05 0.01407875\n72 -0.010095898  0.01930160 1.0453305 1.887409e-04 0.01787840\n73 -0.037513191 -0.09196649 1.0285555 4.255332e-03 0.01557911\n74 -0.012186998  0.07928898 1.0280583 3.165897e-03 0.01330125\n75 -0.054933687  0.09271663 1.0363616 4.331629e-03 0.02001218\n76 -0.002091874 -0.00473675 1.0440154 1.136979e-05 0.01613361\n77 -0.038145085 -0.06163760 1.0443023 1.920681e-03 0.02104825\n\n\n\nnci_dtpc &lt;- moran.plot(thai_trafficking_sf$DTPC_2022,rswm_q_list\n                  ,labels=as.character(thai_trafficking_sf$province_en), \n                   xlab=\"DTPC 2022\", \n                   ylab=\"Spatially Lag DTPC 2022\", \n                   zero.policy = TRUE)\n\n\n\n\n\n\n\nnci_dtpc\n\n              x           wx is_inf                   labels        dfb.1_\n1  2.029734e-05 6.374865e-05  FALSE                  Bangkok -0.1597900079\n2  6.754828e-04 1.216827e-04   TRUE                 Chai Nat  0.7406555942\n3  1.455940e-05 4.780743e-05  FALSE               Nonthaburi -0.1996510394\n4  2.906348e-05 6.698086e-05  FALSE             Pathum Thani -0.1516190786\n5  6.994189e-05 9.391654e-05  FALSE Phra Nakhon Si Ayutthaya -0.0934428621\n6  3.735933e-04 1.577623e-04  FALSE                Bueng Kan  0.0484053107\n7  5.876575e-05 1.093820e-04  FALSE             Samut Prakan -0.0615835436\n8  4.317566e-05 7.919448e-05  FALSE                 Saraburi -0.1235557975\n9  1.858338e-04 2.568251e-04  FALSE                Sing Buri  0.0755382625\n10 3.727782e-04 9.542192e-05  FALSE                Ang Thong  0.1001506731\n11 8.814015e-05 8.534085e-05  FALSE              Chanthaburi -0.1082628164\n12 1.984667e-04 5.686823e-05  FALSE             Chachoengsao -0.0902283824\n13 5.793029e-05 1.085369e-04  FALSE                Chon Buri -0.0631252567\n14 3.749813e-05 8.814015e-05  FALSE                     Trat -0.1034794930\n15 5.544415e-05 1.069281e-04  FALSE             Nakhon Nayok -0.0659106191\n16 5.149942e-05 1.400378e-04  FALSE             Prachin Buri  0.0040416088\n17 3.900386e-05 7.303522e-05  FALSE                   Rayong -0.1372810302\n18 9.380525e-05 2.037642e-04  FALSE                  Sa Kaeo  0.0942224665\n19 3.054284e-04 1.498455e-04  FALSE               Chaiyaphum  0.0097879242\n20 2.124351e-04 1.422287e-04  FALSE        Nakhon Ratchasima -0.0222542868\n21 4.682797e-04 1.977618e-04   TRUE                 Buri Ram  0.0729843638\n22 4.178424e-04 3.320363e-04  FALSE                 Yasothon -0.1320107133\n23 5.631759e-04 3.952000e-04   TRUE                Si Sa Ket -0.3766578932\n24 5.612282e-04 3.237724e-04   TRUE                    Surin -0.1702340242\n25 4.172949e-04 2.880500e-04  FALSE            Amnat Charoen -0.0756966585\n26 3.683263e-04 4.661044e-04   TRUE         Ubon Ratchathani -0.2112801035\n27 1.518317e-04 1.344698e-04  FALSE                  Kalasin -0.0329166617\n28 9.110956e-05 1.821766e-04  FALSE                Khon Kaen  0.0593117392\n29 1.359616e-04 2.410058e-04  FALSE            Nakhon Phanom  0.1091598036\n30 2.908774e-05 1.957869e-04  FALSE                 Lop Buri  0.1457331960\n31 3.023086e-05 3.011705e-04   TRUE            Maha Sarakham  0.3990896254\n32 7.798118e-05 2.712961e-04  FALSE                 Mukdahan  0.2380796377\n33 2.334033e-04 3.003817e-04  FALSE                   Roi Et  0.0538465831\n34 4.634463e-05 1.289920e-04  FALSE                     Loei -0.0167569445\n35 2.714429e-04 1.513169e-04  FALSE             Sakon Nakhon -0.0044435983\n36 6.588238e-05 1.985080e-04  FALSE                Nong Khai  0.1115191289\n37 5.563861e-05 8.003506e-05  FALSE         Nong Bua Lam Phu -0.1214424475\n38 1.026510e-04 1.137083e-04  FALSE               Udon Thani -0.0595899423\n39 1.530967e-04 2.286381e-04  FALSE               Chiang Rai  0.0768268770\n40 1.966545e-04 1.805895e-04  FALSE               Chiang Mai  0.0055423648\n41 3.032708e-04 2.319156e-04  FALSE                      Nan -0.0057163520\n42 1.927518e-04 2.434398e-04  FALSE                   Phayao  0.0577390445\n43 2.208837e-04 2.366110e-04  FALSE                    Phrae  0.0321693795\n44 1.758317e-04 1.327712e-04  FALSE             Mae Hong Son -0.0341737274\n45 2.965079e-04 1.641874e-04  FALSE                  Lampang  0.0038478270\n46 2.086237e-04 1.873501e-04  FALSE                  Lamphun  0.0073532438\n47 3.467191e-04 1.156081e-04  FALSE           Kamphaeng Phet  0.0544978924\n48 6.888783e-05 1.906988e-04  FALSE                      Tak  0.0933261420\n49 1.099525e-04 2.207184e-04  FALSE             Nakhon Sawan  0.1065326012\n50 9.886596e-05 2.288355e-04  FALSE                  Phichit  0.1316610890\n51 1.919209e-04 1.915340e-04  FALSE              Phitsanulok  0.0157195389\n52 2.667496e-04 1.246728e-04  FALSE               Phetchabun -0.0100501645\n53 1.084132e-04 2.345051e-04  FALSE                Sukhothai  0.1301013183\n54 2.821112e-04 2.061222e-04  FALSE                Uttaradit  0.0001740825\n55 9.412034e-05 2.261228e-04  FALSE              Uthai Thani  0.1324131680\n56 1.794664e-04 9.741621e-05  FALSE             Kanchanaburi -0.0669761484\n57 7.192699e-05 7.801721e-05  FALSE            Nakhon Pathom -0.1239915799\n58 1.872427e-04 1.939086e-04  FALSE      Prachuap Khiri Khan  0.0195362106\n59 1.702723e-04 1.970727e-04  FALSE              Phetchaburi  0.0303427886\n60 1.553216e-04 1.360058e-04  FALSE               Ratchaburi -0.0312566472\n61 2.486537e-04 1.117678e-04  FALSE          Samut Songkhram -0.0234174689\n62 9.709539e-06 1.240499e-04  FALSE             Samut Sakhon -0.0096256252\n63 9.682431e-05 2.356501e-04  FALSE              Suphan Buri  0.1456595382\n64 1.731524e-04 1.211798e-04  FALSE                    Krabi -0.0458386850\n65 2.175450e-04 1.513057e-04  FALSE                 Chumphon -0.0160359412\n66 1.262162e-04 1.474781e-04  FALSE      Nakhon Si Thammarat -0.0123468919\n67 1.543016e-04 1.466090e-04  FALSE                 Phangnga -0.0190001889\n68 4.333511e-05 0.000000e+00  FALSE                   Phuket -0.3013871742\n69 1.993958e-04 1.463751e-04  FALSE                   Ranong -0.0208011520\n70 6.727871e-05 1.741222e-04  FALSE              Surat Thani  0.0624737772\n71 1.369228e-04 1.451952e-04  FALSE                    Trang -0.0178864836\n72 1.814314e-04 1.579606e-04  FALSE               Narathiwat -0.0106942130\n73 1.152196e-04 1.599271e-04  FALSE                  Pattani  0.0094841509\n74 2.623883e-04 9.495279e-05  FALSE              Phatthalung -0.0182247851\n75 2.007017e-04 1.314330e-04  FALSE                     Yala -0.0317967980\n76 9.764815e-05 1.447099e-04  FALSE                 Songkhla -0.0076735230\n77 1.902399e-05 1.656531e-04  FALSE                    Satun  0.0849575833\n           dfb.x        dffit     cov.r       cook.d        hat\n1   0.1196216385 -0.160083004 1.0345483 1.283968e-02 0.02940760\n2  -1.2030014982 -1.247871166 1.0528535 7.217153e-01 0.18389722\n3   0.1516903498 -0.199831541 1.0244142 1.989652e-02 0.03064560\n4   0.1107725430 -0.152228341 1.0334415 1.161518e-02 0.02760310\n5   0.0585937335 -0.096485155 1.0363387 4.689510e-03 0.02057485\n6  -0.1358855811 -0.165510916 1.0510009 1.375928e-02 0.03984383\n7   0.0405897298 -0.062869244 1.0456960 1.998291e-03 0.02226957\n8   0.0863443940 -0.124780231 1.0363255 7.825824e-03 0.02491871\n9   0.0103117329  0.135707994 1.0027400 9.160515e-03 0.01306243\n10 -0.2825549326 -0.344620343 0.9909936 5.793060e-02 0.03962347\n11  0.0613890069 -0.114858456 1.0263725 6.621620e-03 0.01818053\n12 -0.0311456116 -0.188169961 0.9712213 1.733048e-02 0.01335283\n13  0.0417490510 -0.064396939 1.0456295 2.096376e-03 0.02240312\n14  0.0736823520 -0.104218766 1.0430754 5.474025e-03 0.02596596\n15  0.0440295923 -0.067101769 1.0457233 2.275814e-03 0.02280615\n16 -0.0027413465  0.004102594 1.0518702 8.529281e-06 0.02346298\n17  0.0972775993 -0.138354866 1.0338974 9.606109e-03 0.02568393\n18 -0.0514460545  0.101078577 1.0295384 5.137712e-03 0.01752755\n19 -0.0747123571 -0.108860387 1.0397901 5.967395e-03 0.02455134\n20 -0.0147322161 -0.056684424 1.0353431 1.623282e-03 0.01392780\n21 -0.1473973702 -0.162905211 1.0962399 1.338614e-02 0.07162135\n22  0.3037167980  0.349366955 1.0238624 6.008839e-02 0.05316940\n23  0.6650822620  0.705854099 1.0508231 2.401317e-01 0.11576082\n24  0.3011798978  0.319824666 1.1359754 5.128802e-02 0.11473116\n25  0.1744743531  0.200809743 1.0638623 2.023765e-02 0.05298817\n26  0.6133120034  0.753729837 0.7517669 2.415083e-01 0.03843586\n27  0.0074584802 -0.044397430 1.0370407 9.969239e-04 0.01336417\n28 -0.0329872762  0.063281118 1.0396537 2.023277e-03 0.01783280\n29 -0.0369907159  0.134731563 1.0068692 9.043230e-03 0.01404576\n30 -0.1064648148  0.146319894 1.0351515 1.073993e-02 0.02759825\n31 -0.2905787139  0.400840427 0.9102363 7.558990e-02 0.02737072\n32 -0.1432881893  0.248427437 0.9648104 3.001390e-02 0.01946134\n33  0.0790247572  0.203568512 0.9718065 2.026912e-02 0.01529138\n34  0.0115819989 -0.016953242 1.0525225 1.456255e-04 0.02435333\n35 -0.0441647373 -0.077226547 1.0388965 3.009939e-03 0.01929871\n36 -0.0712690304  0.114628913 1.0324056 6.604455e-03 0.02117069\n37  0.0810634036 -0.123656200 1.0327539 7.680644e-03 0.02277432\n38  0.0304228583 -0.065241783 1.0374602 2.149678e-03 0.01659564\n39 -0.0166301696  0.104471306 1.0187086 5.471119e-03 0.01332465\n40  0.0017266255  0.011294650 1.0407871 6.463824e-05 0.01329778\n41  0.0476515448  0.070052946 1.0470392 2.480225e-03 0.02417096\n42  0.0140656977  0.112179951 1.0149624 6.297110e-03 0.01319445\n43  0.0296583428  0.094530836 1.0252116 4.491310e-03 0.01440496\n44 -0.0002032179 -0.055543589 1.0341620 1.558453e-03 0.01298719\n45 -0.0464788215 -0.070403517 1.0454606 2.504698e-03 0.02301986\n46  0.0041462065  0.017661924 1.0408950 1.580317e-04 0.01374446\n47 -0.1886908047 -0.242164608 1.0147360 2.904480e-02 0.03305659\n48 -0.0588159001  0.096246707 1.0366534 4.666705e-03 0.02072740\n49 -0.0509800064  0.118988560 1.0195350 7.090871e-03 0.01590697\n50 -0.0692707626  0.142828639 1.0123844 1.017546e-02 0.01698131\n51  0.0036137933  0.030242628 1.0389994 4.630595e-04 0.01317514\n52 -0.0687738299 -0.124446307 1.0241597 7.762817e-03 0.01869736\n53 -0.0631650396  0.144665721 1.0086725 1.042470e-02 0.01604610\n54  0.0144710616  0.023632680 1.0482596 2.829248e-04 0.02077760\n55 -0.0721386421  0.142142007 1.0141545 1.008405e-02 0.01749252\n56 -0.0033820184 -0.112702702 1.0141307 6.353960e-03 0.01299872\n57  0.0769998185 -0.128335971 1.0263094 8.257610e-03 0.02029168\n58  0.0030686785  0.035639540 1.0381379 6.428384e-04 0.01308401\n59 -0.0017195640  0.046932062 1.0360576 1.113676e-03 0.01300447\n60  0.0061942484 -0.043135701 1.0371293 9.411556e-04 0.01326045\n61 -0.0622495478 -0.132568556 1.0159325 8.782845e-03 0.01666051\n62  0.0074006176 -0.009629361 1.0607867 4.698701e-05 0.03172708\n63 -0.0778226646  0.157280088 1.0063663 1.230067e-02 0.01719747\n64  0.0011467363 -0.072706637 1.0295226 2.664384e-03 0.01299024\n65 -0.0130097497 -0.044433571 1.0381631 9.986621e-04 0.01420474\n66  0.0048968317 -0.014593237 1.0420621 1.078993e-04 0.01463485\n67  0.0039261401 -0.026042597 1.0396287 3.434573e-04 0.01328905\n68  0.2105035425 -0.304399874 0.9572130 4.476000e-02 0.02488994\n69 -0.0075508280 -0.043907490 1.0371552 9.750872e-04 0.01338280\n70 -0.0396702721  0.064312638 1.0437481 2.090547e-03 0.02096320\n71  0.0059518637 -0.022180661 1.0408139 2.491983e-04 0.01399469\n72 -0.0008116785 -0.018350784 1.0400343 1.705921e-04 0.01301247\n73 -0.0043032985  0.010767955 1.0431266 5.875201e-05 0.01545542\n74 -0.0945112154 -0.177012750 0.9999228 1.552321e-02 0.01816553\n75 -0.0123598550 -0.068285029 1.0316149 2.352039e-03 0.01342691\n76  0.0040747275 -0.008301090 1.0449789 3.491778e-05 0.01710956\n77 -0.0638147030  0.085093135 1.0518871 3.657644e-03 0.02967845\n\n\nInterpretation: Key provinces such as Ubon Ratchathani and Bueng Kan show high spatial lag and DUPC/DTPC values, indicating that they influence nearby regions significantly. On the other hand, provinces like Khon Kaen and Mukdahan display lower spatial lags, suggesting less regional clustering."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#plotting-moran-scatterplot-with-standardised-variable",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#plotting-moran-scatterplot-with-standardised-variable",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "12.2 Plotting Moran scatterplot with standardised variable",
    "text": "12.2 Plotting Moran scatterplot with standardised variable\nWe use scale() to center and scale the variable, DUPC. Centering is done by subtracting the mean by the corresponding columns and scaling by dividing the variable by their standard deviation\n\nthai_drug_use_sf$z_ii_DUPC &lt;- scale(thai_drug_use_sf$DUPC_2022) %&gt;% \n  as.vector\n\nthai_trafficking_sf$z_ii_DTPC &lt;- scale(thai_trafficking_sf$DTPC_2022) %&gt;% \n  as.vector\n\n\nthai_trafficking_sf\n\nSimple feature collection with 77 features and 19 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -313055.3 ymin: 621843.5 xmax: 568269.6 ymax: 2271054\nProjected CRS: WGS 84 / UTM zone 48N\nFirst 10 features:\n                province_en types_of_drug_offenses X2017 X2018 X2019 X2020\n1                   Bangkok      trafficking_cases   950   623   428   352\n2                  Chai Nat      trafficking_cases   210   151   101   117\n3                Nonthaburi      trafficking_cases   118   113    72    80\n4              Pathum Thani      trafficking_cases    83    68    23    69\n5  Phra Nakhon Si Ayutthaya      trafficking_cases   164   164   124   167\n6                 Bueng Kan      trafficking_cases   261   234   151   174\n7              Samut Prakan      trafficking_cases   201   112    76   136\n8                  Saraburi      trafficking_cases    58    45    36    50\n9                 Sing Buri      trafficking_cases    41    44    33    48\n10                Ang Thong      trafficking_cases    51    61    56    46\n   X2021 X2022 Shape_Area_Polygon population_count ADM1_PCODE    DTPC_2017\n1    250   233    1578.8549 [m^2]         11479338       TH10 8.275739e-05\n2     97   142    2502.2244 [m^2]           210220       TH18 9.989535e-04\n3     60    31     639.9493 [m^2]          2129209       TH12 5.541964e-05\n4    106    80    1524.3654 [m^2]          2752595       TH13 3.015336e-05\n5    112    72    2566.0800 [m^2]          1029426       TH14 1.593121e-04\n6    142   106    3989.9235 [m^2]           283731       TH38 9.198854e-04\n7    159   199     953.3180 [m^2]          3386326       TH11 5.935636e-05\n8     69    35    3494.9025 [m^2]           810642       TH19 7.154823e-05\n9     40    26     822.6252 [m^2]           139910       TH17 2.930455e-04\n10    51    75     949.3456 [m^2]           201192       TH15 2.534892e-04\n      DTPC_2018    DTPC_2019    DTPC_2020    DTPC_2021    DTPC_2022\n1  5.427142e-05 3.728438e-05 3.066379e-05 2.177826e-05 2.029734e-05\n2  7.182951e-04 4.804491e-04 5.565598e-04 4.614214e-04 6.754828e-04\n3  5.307135e-05 3.381537e-05 3.757264e-05 2.817948e-05 1.455940e-05\n4  2.470396e-05 8.355752e-06 2.506725e-05 3.850912e-05 2.906348e-05\n5  1.593121e-04 1.204555e-04 1.622263e-04 1.087985e-04 6.994189e-05\n6  8.247248e-04 5.321942e-04 6.132569e-04 5.004740e-04 3.735933e-04\n7  3.307419e-05 2.244320e-05 4.016152e-05 4.695354e-05 5.876575e-05\n8  5.551156e-05 4.440925e-05 6.167951e-05 8.511772e-05 4.317566e-05\n9  3.144879e-04 2.358659e-04 3.430777e-04 2.858981e-04 1.858338e-04\n10 3.031930e-04 2.783411e-04 2.286373e-04 2.534892e-04 3.727782e-04\n   dtpc_2022.lag                       geometry   z_ii_DTPC\n1   6.374865e-05 POLYGON ((25835.57 1547090,... -1.11712320\n2   1.216827e-04 POLYGON ((-24181.19 1709887...  3.60404996\n3   4.780743e-05 POLYGON ((-3347.358 1563866... -1.15846998\n4   6.698086e-05 POLYGON ((56466.67 1578825,... -1.05395561\n5   9.391654e-05 POLYGON ((16427.34 1625110,... -0.75939164\n6   1.577623e-04 POLYGON ((331560.4 2040603,...  1.42867708\n7   1.093820e-04 POLYGON ((38002.87 1520530,... -0.83992529\n8   7.919448e-05 POLYGON ((112824.3 1669647,... -0.95226531\n9   2.568251e-04 POLYGON ((1875.759 1673463,...  0.07570857\n10  9.542192e-05 POLYGON ((-2670.024 1641280...  1.42280390\n\n\nWe plot the Moran scatterplot using the code chunk below:\n\nrswm_q_list &lt;- recreate_listw(wm_q, rswm_q)\nnci_dupc_zii &lt;- moran.plot(thai_drug_use_sf$z_ii_DUPC, rswm_q_list, \n                   labels=as.character(thai_drug_use_sf$province_en), \n                   xlab=\"z-DUPC 2022\", \n                   ylab=\"Spatially Lag z-DUPC 2022\"\n                   )\n\nWarning in lag.listw(listw, x, zero.policy = zero.policy): NAs in lagged values\n\n\nWarning in moran.plot(thai_drug_use_sf$z_ii_DUPC, rswm_q_list, labels =\nas.character(thai_drug_use_sf$province_en), : no-neighbour observation(s) in\nmoran.plot() - use zero.policy=TRUE\n\n\n\n\n\n\n\n\nnci_dtpc_zii &lt;- moran.plot(thai_trafficking_sf$z_ii_DTPC, rswm_q_list, \n                   labels=as.character(thai_trafficking_sf$province_en), \n                   xlab=\"z-DTPC 2022\", \n                   ylab=\"Spatially Lag z-DTPC 2022\"\n                   )\n\nWarning in lag.listw(listw, x, zero.policy = zero.policy): NAs in lagged values\n\n\nWarning in moran.plot(thai_trafficking_sf$z_ii_DTPC, rswm_q_list, labels =\nas.character(thai_trafficking_sf$province_en), : no-neighbour observation(s) in\nmoran.plot() - use zero.policy=TRUE\n\n\n\n\n\n\n\n\nnci_dupc_zii\n\n             x           wx is_inf                   labels       dfb.1_\n1  -1.43111963 -1.038313850  FALSE                  Bangkok -0.121595258\n2   0.12158713 -0.343016975  FALSE                 Chai Nat -0.077130914\n3  -1.35048510 -0.998660800  FALSE               Nonthaburi -0.118186988\n4  -1.23470832 -0.597758756  FALSE             Pathum Thani -0.040434479\n5  -0.84293972 -0.519547944  FALSE Phra Nakhon Si Ayutthaya -0.050154568\n6   0.43073010  1.575184692   TRUE                Bueng Kan  0.299170003\n7  -1.23711378 -0.908030558  FALSE             Samut Prakan -0.106027513\n8  -0.97309784 -0.234919939  FALSE                 Saraburi  0.017541121\n9   0.46074444 -0.042183388  FALSE                Sing Buri -0.038831093\n10  0.67569096 -0.162638763  FALSE                Ang Thong -0.077131765\n11  0.08716522 -0.552593619  FALSE              Chanthaburi -0.117529456\n12 -0.38494149 -0.557867897  FALSE             Chachoengsao -0.087932374\n13 -0.84501091 -0.258290042  FALSE                Chon Buri  0.003928600\n14 -0.55183725  0.087165222  FALSE                     Trat  0.054747011\n15  1.39603124 -0.809771260  FALSE             Nakhon Nayok -0.264039118\n16 -0.69410241 -0.063750269  FALSE             Prachin Buri  0.033626449\n17 -0.47709386 -0.378922842  FALSE                   Rayong -0.045326852\n18 -0.50408459 -0.410166860  FALSE                  Sa Kaeo -0.049936379\n19  0.26417331 -0.303529933  FALSE               Chaiyaphum -0.078468754\n20 -0.76200624 -0.081480488  FALSE        Nakhon Ratchasima  0.034665230\n21 -0.29694939 -0.353186715  FALSE                 Buri Ram -0.051886201\n22  1.53378316  1.155548540  FALSE                 Yasothon  0.132128543\n23  1.45622064  0.323972473  FALSE                Si Sa Ket -0.031293208\n24 -0.69770009  0.589848805  FALSE                    Surin  0.170252667\n25  3.00178761  0.654696185   TRUE            Amnat Charoen -0.072046122\n26 -0.42962224  1.997263803   TRUE         Ubon Ratchathani  0.482458096\n27  1.99906274  0.606438928   TRUE                  Kalasin -0.010561824\n28 -0.11283757  0.383349588  FALSE                Khon Kaen  0.084854458\n29  2.45833382  0.597873913   TRUE            Nakhon Phanom -0.044092313\n30  0.26902335 -0.315696203  FALSE                 Lop Buri -0.081243904\n31  0.31069491  0.356200952  FALSE            Maha Sarakham  0.050724404\n32  0.85992763  1.730893400   TRUE                 Mukdahan  0.302316689\n33  0.88942906  0.910331500  FALSE                   Roi Et  0.124130874\n34  1.86378526  0.079918369  FALSE                     Loei -0.109120803\n35  0.50296400  1.450127682   TRUE             Sakon Nakhon  0.265543720\n36  1.76425625  0.996483725  FALSE                Nong Khai  0.084476909\n37 -0.50877057  0.979801075  FALSE         Nong Bua Lam Phu  0.240119730\n38  1.18845553  0.918076687  FALSE               Udon Thani  0.105955197\n39 -0.13758657  0.723033430  FALSE               Chiang Rai  0.156597411\n40 -0.24326321  0.134280397  FALSE               Chiang Mai  0.043207431\n41  1.20039568  1.084024295  FALSE                      Nan  0.139167511\n42  1.84442132  0.642141116   TRUE                   Phayao  0.007072803\n43  0.93781317  0.572960372  FALSE                    Phrae  0.052738183\n44 -0.44525022 -0.643679729  FALSE             Mae Hong Son -0.101686066\n45  0.56794218  0.267126512  FALSE                  Lampang  0.015902784\n46  1.73039284 -0.239805758  FALSE                  Lamphun -0.166174871\n47 -1.14025513 -1.036015920  FALSE           Kamphaeng Phet -0.139650544\n48 -1.04409624 -0.275841136  FALSE                      Tak  0.013942564\n49 -0.73983526 -0.428993487  FALSE             Nakhon Sawan -0.038275928\n50 -0.93505822 -0.932920955  FALSE                  Phichit -0.130699091\n51 -1.24329416 -0.261297447  FALSE              Phitsanulok  0.030934072\n52 -0.60829927 -0.090577613  FALSE               Phetchabun  0.022256655\n53 -1.21779572 -0.242008631  FALSE                Sukhothai  0.033184198\n54  0.46983839 -0.080720257  FALSE                Uttaradit -0.047142783\n55 -0.55559396 -0.527727848  FALSE              Uthai Thani -0.070658507\n56 -0.43891175 -0.448609693  FALSE             Kanchanaburi -0.062053694\n57 -0.48587553 -0.822528259  FALSE            Nakhon Pathom -0.136217090\n58 -0.51790819  0.005454246  FALSE      Prachuap Khiri Khan  0.035707822\n59 -0.19075326 -0.001554548  FALSE              Phetchaburi  0.012221478\n60  0.37990039 -0.503791055  FALSE               Ratchaburi -0.126778565\n61  0.13334415 -0.449203919  FALSE          Samut Songkhram -0.099439573\n62 -1.53675889 -0.350937654  FALSE             Samut Sakhon  0.032945033\n63 -0.53738312 -0.152185489  FALSE              Suphan Buri  0.004884173\n64 -1.28043149 -0.078238924  FALSE                    Krabi  0.072306367\n65  0.20166175 -0.474100868  FALSE                 Chumphon -0.108979886\n66  0.33689452 -0.257006373  FALSE      Nakhon Si Thammarat -0.073844451\n67 -0.31076737 -0.728275302  FALSE                 Phangnga -0.127873913\n69 -0.85336056 -0.053379825  FALSE                   Ranong  0.046825455\n70 -0.05103386 -0.381200628  FALSE              Surat Thani -0.073608581\n71 -0.28804899 -0.078838314  FALSE                    Trang  0.003093634\n72 -0.60970935 -0.143423501  FALSE               Narathiwat  0.011549214\n73  0.44384623 -0.283793835  FALSE                  Pattani -0.086269507\n74 -0.15453860  0.330147231  FALSE              Phatthalung  0.076898366\n75 -0.73069323  0.107719320  FALSE                     Yala  0.071506753\n76  0.48902108  0.135646247  FALSE                 Songkhla -0.005154652\n77  0.78272231  0.015477829  FALSE                    Satun -0.048448400\n           dfb.x        dffit     cov.r       cook.d        hat\n1   0.1739004415 -0.210335793 1.0428281 2.211467e-02 0.04158067\n2  -0.0080622833 -0.077716915 1.0287697 3.042654e-03 0.01330104\n3   0.1598663545 -0.197035991 1.0409102 1.941962e-02 0.03850701\n4   0.0501778567 -0.063853921 1.0608656 2.063354e-03 0.03440127\n5   0.0431030615 -0.065520633 1.0467969 2.170506e-03 0.02319687\n6   0.1259809413  0.326865244 0.8732665 4.953350e-02 0.01545351\n7   0.1318232147 -0.167629040 1.0417088 1.409035e-02 0.03448289\n8  -0.0173095297  0.024413436 1.0548787 3.019995e-04 0.02645890\n9  -0.0175531830 -0.042923957 1.0408063 9.323868e-04 0.01580014\n10 -0.0520374057 -0.093874950 1.0345408 4.438937e-03 0.01899449\n11 -0.0081695818 -0.117988603 1.0123304 6.956986e-03 0.01322128\n12  0.0357101965 -0.094294698 1.0275087 4.471733e-03 0.01536097\n13 -0.0033842398  0.005137363 1.0520078 1.337682e-05 0.02324519\n14 -0.0313265440  0.062569846 1.0397025 1.978372e-03 0.01755944\n15 -0.3787571394 -0.465878015 0.9274574 1.024628e-01 0.03880963\n16 -0.0239742810  0.040933462 1.0462349 8.482978e-04 0.02002820\n17  0.0225705476 -0.050260142 1.0405036 1.277704e-03 0.01648173\n18  0.0262060881 -0.055963580 1.0399880 1.583450e-03 0.01685348\n19 -0.0196227932 -0.081259684 1.0289684 3.325567e-03 0.01397270\n20 -0.0270345122  0.043562620 1.0475635 9.607068e-04 0.02139953\n21  0.0165056807 -0.054159086 1.0370397 1.482646e-03 0.01450514\n22  0.2090594090  0.249465783 1.0365297 3.097184e-02 0.04419726\n23 -0.0469066686 -0.056888504 1.0694161 1.638623e-03 0.04110057\n24 -0.1219875074  0.207593756 0.9908025 2.123164e-02 0.02009773\n25 -0.2311631812 -0.243474097 1.1734813 2.988829e-02 0.13348723\n26 -0.2174341654  0.525515272 0.6851366 1.133846e-01 0.01587570\n27 -0.0220464239 -0.024630083 1.1001625 3.074395e-04 0.06618882\n28 -0.0112883101  0.085405019 1.0263668 3.669952e-03 0.01339185\n29 -0.1144313066 -0.123431677 1.1291800 7.706473e-03 0.09363806\n30 -0.0207201343 -0.084239262 1.0280612 3.572283e-03 0.01400521\n31  0.0151022612  0.053208058 1.0369567 1.431117e-03 0.01431080\n32  0.2620948428  0.403919676 0.8751813 7.544266e-02 0.02272691\n33  0.1114540820  0.168419370 1.0189167 1.414750e-02 0.02340984\n34 -0.2116442462 -0.239993186 1.0653479 2.883130e-02 0.05919125\n35  0.1316085095  0.298648615 0.9063193 4.210722e-02 0.01632896\n36  0.1547013312  0.177695128 1.0704836 1.588453e-02 0.05435886\n37 -0.1271304966  0.269608334 0.9340661 3.482730e-02 0.01692003\n38  0.1285570214  0.168166233 1.0364753 1.416579e-02 0.03166039\n39 -0.0247403193  0.158104262 0.9913567 1.236014e-02 0.01348817\n40 -0.0114188043  0.044489108 1.0383214 1.001297e-03 0.01408583\n41  0.1706176226  0.222251526 1.0194909 2.453465e-02 0.03204004\n42  0.0135687865  0.015422699 1.0910060 1.205526e-04 0.05823009\n43  0.0500308763  0.073391775 1.0473382 2.722099e-03 0.02458084\n44  0.0474112583 -0.111398381 1.0229587 6.224998e-03 0.01606848\n45  0.0089505639  0.018399132 1.0450554 1.715374e-04 0.01723704\n46 -0.2982092159 -0.344185627 1.0243016 5.834394e-02 0.05277579\n47  0.1605267110 -0.210801622 1.0219664 2.210682e-02 0.03132023\n48 -0.0147236811  0.020088442 1.0572560 2.044981e-04 0.02843139\n49  0.0290148692 -0.047598604 1.0465210 1.146667e-03 0.02093807\n50  0.1241158464 -0.178559688 1.0200351 1.589442e-02 0.02545817\n51 -0.0386448971  0.049049933 1.0625668 1.218310e-03 0.03469330\n52 -0.0139807101  0.026062777 1.0458911 3.441166e-04 0.01847373\n53 -0.0406377320  0.051985297 1.0613221 1.368299e-03 0.03383185\n54 -0.0217526346 -0.052301743 1.0393744 1.383266e-03 0.01590997\n55  0.0406945047 -0.080882786 1.0356368 3.299334e-03 0.01761760\n56  0.0285407824 -0.067821513 1.0362304 2.322378e-03 0.01598949\n57  0.0690193082 -0.151560697 1.0070379 1.142960e-02 0.01660052\n58 -0.0192295381  0.040241499 1.0427422 8.197325e-04 0.01705150\n59 -0.0025850474  0.012446087 1.0415953 7.850159e-05 0.01375111\n60 -0.0467546364 -0.135978390 1.0091219 9.217580e-03 0.01492206\n61 -0.0115845061 -0.100347951 1.0205364 5.052263e-03 0.01333562\n62 -0.0504500624  0.059739979 1.0748034 1.807039e-03 0.04587355\n63 -0.0027246963  0.005548490 1.0456669 1.560336e-05 0.01733925\n64 -0.0929233581  0.116675491 1.0553640 6.865522e-03 0.03597942\n65 -0.0202881881 -0.111249627 1.0166277 6.196869e-03 0.01361055\n66 -0.0239706671 -0.078082528 1.0310167 3.072791e-03 0.01452697\n67  0.0424479221 -0.133993529 1.0091173 8.951774e-03 0.01462568\n69 -0.0407206811  0.061480722 1.0477259 1.911705e-03 0.02344117\n70  0.0051974246 -0.073706759 1.0298849 2.738346e-03 0.01322365\n71 -0.0009565384  0.003221350 1.0426101 5.259572e-06 0.01443023\n72 -0.0072708595  0.013532648 1.0466724 9.280826e-05 0.01849767\n73 -0.0374941764 -0.094731577 1.0278646 4.513494e-03 0.01560199\n74 -0.0134623260  0.077830126 1.0292542 3.051837e-03 0.01356371\n75 -0.0535613036  0.088541909 1.0388054 3.953496e-03 0.02075167\n76 -0.0024805163 -0.005763678 1.0443938 1.683706e-05 0.01614899\n77 -0.0380902614 -0.062204947 1.0445260 1.956408e-03 0.02105108\n\nnci_dtpc_zii\n\n              x           wx is_inf                   labels       dfb.1_\n1  -1.117123203 -0.804019238  FALSE                  Bangkok -0.116915833\n2   3.604049956 -0.386554504   TRUE                 Chai Nat -0.315793671\n3  -1.158469982 -0.918889435  FALSE               Nonthaburi -0.141844384\n4  -1.053955606 -0.780728382  FALSE             Pathum Thani -0.114574982\n5  -0.759391643 -0.586633703  FALSE Phra Nakhon Si Ayutthaya -0.084458672\n6   1.428677078 -0.126570299  FALSE                Bueng Kan -0.093922092\n7  -0.839925285 -0.475191551  FALSE             Samut Prakan -0.055084349\n8  -0.952265307 -0.692718781  FALSE                 Saraburi -0.099205197\n9   0.075708567  0.587262317  FALSE                Sing Buri  0.135763203\n10  1.422803900 -0.575786180  FALSE                Ang Thong -0.197443633\n11 -0.628257595 -0.648428917  FALSE              Chanthaburi -0.105053649\n12  0.166740102 -0.853598576  FALSE             Chachoengsao -0.192385413\n13 -0.845945502 -0.481281396  FALSE                Chon Buri -0.056163913\n14 -0.993176783 -0.628257595  FALSE                     Trat -0.082356220\n15 -0.863860261 -0.492874362  FALSE             Nakhon Nayok -0.057895954\n16 -0.892285451 -0.254290353  FALSE             Prachin Buri -0.002339454\n17 -0.982326696 -0.737101548  FALSE                   Rayong -0.107968836\n18 -0.587435705  0.204913030  FALSE                  Sa Kaeo  0.085177500\n19  0.937490649 -0.183617561  FALSE               Chaiyaphum -0.080410460\n20  0.267394454 -0.238502969  FALSE        Nakhon Ratchasima -0.058025318\n21  2.110973639  0.161660389   TRUE                 Buri Ram -0.066041917\n22  1.747530118  1.129223405  FALSE                 Yasothon  0.175155135\n23  2.794782479  1.584372214   TRUE                Si Sa Ket  0.239687796\n24  2.780747300  1.069675050   TRUE                    Surin  0.111717910\n25  1.743584785  0.812264053  FALSE            Amnat Charoen  0.101625687\n26  1.390723716  2.095299127   TRUE         Ubon Ratchathani  0.444171827\n27 -0.169305228 -0.294412756  FALSE                  Kalasin -0.048312742\n28 -0.606860468  0.049355864  FALSE                Khon Kaen  0.051090999\n29 -0.283663071  0.473270490  FALSE            Nakhon Phanom  0.129440487\n30 -1.053780848  0.147429576  FALSE                 Lop Buri  0.098167925\n31 -1.045543637  0.906808593   TRUE            Maha Sarakham  0.280549998\n32 -0.701461675  0.691538399  FALSE                 Mukdahan  0.204740744\n33  0.418487721  0.901124893  FALSE                   Roi Et  0.189458538\n34 -0.929430143 -0.333884950  FALSE                     Loei -0.018453492\n35  0.692596068 -0.173015222  FALSE             Sakon Nakhon -0.065279328\n36 -0.788643893  0.167037115  FALSE                Nong Khai  0.087675902\n37 -0.862459035 -0.686661718  FALSE         Nong Bua Lam Phu -0.102238461\n38 -0.523694543 -0.444017117  FALSE               Udon Thani -0.063947106\n39 -0.160189638  0.384150358  FALSE               Chiang Rai  0.102482637\n40  0.153681538  0.037919602  FALSE               Chiang Mai  0.008948550\n41  0.921943494  0.407767777  FALSE                      Nan  0.051649289\n42  0.125559175  0.490809490  FALSE                   Phayao  0.111250832\n43  0.328273740  0.441602137  FALSE                    Phrae  0.089562176\n44  0.003634899 -0.306652769  FALSE             Mae Hong Son -0.059788306\n45  0.873210362 -0.080272223  FALSE                  Lampang -0.054017464\n46  0.239929462  0.086634942  FALSE                  Lamphun  0.015309699\n47  1.235025306 -0.430327549  FALSE           Kamphaeng Phet -0.152520817\n48 -0.766987075  0.110765475  FALSE                      Tak  0.073660929\n49 -0.471080628  0.327082308  FALSE             Nakhon Sawan  0.106508353\n50 -0.550968903  0.385573230  FALSE                  Phichit  0.124317554\n51  0.119571625  0.116783422  FALSE              Phitsanulok  0.028146457\n52  0.658776618 -0.365008388  FALSE               Phetchabun -0.106426514\n53 -0.482172762  0.426427396  FALSE                Sukhothai  0.129807499\n54  0.769470415  0.221904024  FALSE                Uttaradit  0.018200326\n55 -0.585165159  0.366025542  FALSE              Uthai Thani  0.121765385\n56  0.029826253 -0.561415595  FALSE             Kanchanaburi -0.118241062\n57 -0.745087286 -0.701202057  FALSE            Nakhon Pathom -0.111360819\n58  0.085861131  0.133895075  FALSE      Prachuap Khiri Khan  0.033671742\n59 -0.036425191  0.156694587  FALSE              Phetchaburi  0.045055827\n60 -0.144157661 -0.283344661  FALSE               Ratchaburi -0.047119376\n61  0.528380290 -0.458000074  FALSE          Samut Songkhram -0.120549794\n62 -1.193417369 -0.369496965  FALSE             Samut Sakhon -0.012851178\n63 -0.565680794  0.434677798  FALSE              Suphan Buri  0.136436999\n64 -0.015671297 -0.390178434  FALSE                    Krabi -0.077447150\n65  0.304215342 -0.173095405  FALSE                 Chumphon -0.045391623\n66 -0.353886940 -0.200676966  FALSE      Nakhon Si Thammarat -0.018051014\n67 -0.151507882 -0.206939547  FALSE                 Phangnga -0.029748135\n69  0.173434787 -0.208624891  FALSE                   Ranong -0.046616253\n70 -0.778582133 -0.008683198  FALSE              Surat Thani  0.047203503\n71 -0.276736783 -0.217126823  FALSE                    Trang -0.025648874\n72  0.043986164 -0.125141185  FALSE               Narathiwat -0.021537027\n73 -0.433127217 -0.110971098  FALSE                  Pattani  0.006032421\n74  0.627349686 -0.579166692  FALSE              Phatthalung -0.153322901\n75  0.182844847 -0.316295119  FALSE                     Yala -0.071025187\n76 -0.559744304 -0.220623673  FALSE                 Songkhla -0.011967481\n77 -1.126298743 -0.069710467  FALSE                    Satun  0.052258892\n           dfb.x        dffit     cov.r       cook.d        hat\n1   0.1310119971 -0.174506721 1.0316633 1.523052e-02 0.03015340\n2  -1.1955690395 -1.240508587 1.0555512 7.136742e-01 0.18495503\n3   0.1646787811 -0.216004999 1.0203169 2.319171e-02 0.03142030\n4   0.1213053035 -0.165821592 1.0306919 1.375883e-02 0.02830582\n5   0.0649608870 -0.105909459 1.0349153 5.644981e-03 0.02109359\n6  -0.1362735163 -0.166488742 1.0509461 1.392180e-02 0.03986838\n7   0.0467408481 -0.071798187 1.0452725 2.604927e-03 0.02283584\n8   0.0951384951 -0.136595425 1.0342745 9.365672e-03 0.02555477\n9   0.0086392077  0.136157095 1.0029321 9.221434e-03 0.01321108\n10 -0.2852653768 -0.348995480 0.9884948 5.933517e-02 0.03964729\n11  0.0671851014 -0.123995261 1.0242310 7.707195e-03 0.01862633\n12 -0.0299120656 -0.195084113 0.9664366 1.858038e-02 0.01347468\n13  0.0479898410 -0.073419327 1.0451719 2.723566e-03 0.02297302\n14  0.0822872296 -0.115694501 1.0416859 6.739120e-03 0.02662844\n15  0.0504908258 -0.076345158 1.0452110 2.944396e-03 0.02338695\n16  0.0021056533 -0.003127992 1.0529080 4.959156e-06 0.02406127\n17  0.1067290082 -0.150870153 1.0314682 1.140534e-02 0.02633935\n18 -0.0510294841  0.098748748 1.0312425 4.906593e-03 0.01795177\n19 -0.0757235109 -0.111153806 1.0394251 6.220383e-03 0.02455295\n20 -0.0149288512 -0.060101519 1.0349856 1.824490e-03 0.01402311\n21 -0.1432484288 -0.158505013 1.0972954 1.267760e-02 0.07180635\n22  0.3126415721  0.360310297 1.0198685 6.378419e-02 0.05325032\n23  0.6954989977  0.738547948 1.0411338 2.616036e-01 0.11625667\n24  0.3224757160  0.342632774 1.1332380 5.877684e-02 0.11521912\n25  0.1809741172  0.208684952 1.0624336 2.184050e-02 0.05306819\n26  0.6268796716  0.772898770 0.7364697 2.513491e-01 0.03845587\n27  0.0088180603 -0.049005436 1.0367966 1.214317e-03 0.01359818\n28 -0.0315917057  0.059734833 1.0412276 1.803827e-03 0.01826722\n29 -0.0384295477  0.134570754 1.0078238 9.024648e-03 0.01432621\n30 -0.1039176647  0.142063908 1.0377190 1.013312e-02 0.02830086\n31 -0.2947180739  0.404364966 0.9105353 7.691011e-02 0.02806780\n32 -0.1457628770  0.249848015 0.9656525 3.036386e-02 0.01994717\n33  0.0777892504  0.205726779 0.9701216 2.068260e-02 0.01535297\n34  0.0172831029 -0.025125812 1.0531948 3.198692e-04 0.02497488\n35 -0.0450570969 -0.079790994 1.0386095 3.212684e-03 0.01931785\n36 -0.0699652653  0.111488625 1.0344475 6.252014e-03 0.02170645\n37  0.0890207493 -0.134726036 1.0306132 9.105199e-03 0.02335427\n38  0.0342676472 -0.072174462 1.0367624 2.629398e-03 0.01698724\n39 -0.0177694289  0.103799314 1.0196834 5.402914e-03 0.01355514\n40  0.0012733030  0.009055261 1.0413942 4.155707e-05 0.01342331\n41  0.0478117085  0.070827843 1.0472219 2.535618e-03 0.02417311\n42  0.0126719671  0.112137492 1.0154034 6.293284e-03 0.01332809\n43  0.0285686739  0.094357778 1.0255985 4.475541e-03 0.01448580\n44  0.0005341204 -0.059788705 1.0336812 1.805200e-03 0.01315894\n45 -0.0472948535 -0.072248493 1.0454481 2.637672e-03 0.02302421\n46  0.0035132356  0.015751932 1.0415091 1.257307e-04 0.01384669\n47 -0.1905587716 -0.245594447 1.0131653 2.985014e-02 0.03306284\n48 -0.0572079006  0.092703461 1.0386023 4.332338e-03 0.02125053\n49 -0.0515089209  0.117733836 1.0210086 6.945838e-03 0.01627262\n50 -0.0699832049  0.141903588 1.0139085 1.004957e-02 0.01738670\n51  0.0030359663  0.028349942 1.0397493 4.070323e-04 0.01331054\n52 -0.0697746113 -0.128002645 1.0229765 8.207995e-03 0.01872043\n53 -0.0642076428  0.144104255 1.0100159 1.034888e-02 0.01641714\n54  0.0139959732  0.023100601 1.0486788 2.703808e-04 0.02078916\n55 -0.0726751274  0.141027702 1.0157631 9.932292e-03 0.01791555\n56 -0.0020600081 -0.118294309 1.0119915 6.992124e-03 0.01316189\n57  0.0840803573 -0.138701204 1.0238555 9.631302e-03 0.02080220\n58  0.0024872381  0.033797372 1.0389351 5.782800e-04 0.01322954\n59 -0.0022172453  0.045086034 1.0369944 1.028156e-03 0.01318979\n60  0.0074131000 -0.047610437 1.0369148 1.146299e-03 0.01348481\n61 -0.0629824248 -0.136723000 1.0142288 9.333911e-03 0.01670218\n62  0.0153585655 -0.019903046 1.0617897 2.007464e-04 0.03252663\n63 -0.0787964393  0.156707133 1.0078251 1.221749e-02 0.01761041\n64  0.0021955972 -0.077456769 1.0285882 3.022255e-03 0.01316848\n65 -0.0133718004 -0.047485210 1.0380554 1.140437e-03 0.01429116\n66  0.0066239487 -0.019151063 1.0424856 1.858321e-04 0.01494591\n67  0.0048992655 -0.030090332 1.0397809 4.585005e-04 0.01351621\n69 -0.0075631528 -0.047323448 1.0369964 1.132555e-03 0.01350278\n70 -0.0371999558  0.059735737 1.0454975 1.804604e-03 0.02149307\n71  0.0074374581 -0.026617466 1.0410670 3.588569e-04 0.01427221\n72 -0.0006822524 -0.021558122 1.0403073 2.354473e-04 0.01317109\n73 -0.0026896884  0.006574408 1.0440075 2.190666e-05 0.01580291\n74 -0.0955939354 -0.181715157 0.9973387 1.633755e-02 0.01819259\n75 -0.0121986295 -0.072222064 1.0309360 2.630053e-03 0.01354430\n76  0.0068411254 -0.013710941 1.0456066 9.526880e-05 0.01751945\n77 -0.0590284667  0.078349546 1.0541799 3.103057e-03 0.03043062"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#preparing-lisa-map-classes",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#preparing-lisa-map-classes",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "12.3 Preparing LISA map classes",
    "text": "12.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map: 1. quadrant preparation 2. Derivation of the spatially lagged variable of interest (DUPC, DTPC) 3. centering the local Moran’s around the mean 4. Set a statistical significance level (0.05) 5. Define low-low, high-high, high-low and high-high categories and place non-significant Moran\nDrug Use Per Capita\n\nquadrant_dupc &lt;- vector(mode=\"numeric\",length=nrow(localMI_DUPC))\nthai_drug_use_sf$dupc_2022.lag &lt;- lag.listw(rswm_q_list, thai_drug_use_sf$DUPC_2022, zero.policy = TRUE)\nDV_DUPC &lt;- thai_drug_use_sf$DUPC_2022 - mean(thai_drug_use_sf$DUPC_2022)     \nLM_I_DUPC &lt;- localMI_DUPC[,1]   \nsignif_dupc &lt;- 0.05       \nquadrant_dupc[DV_DUPC &lt;0 & LM_I_DUPC&gt;0] &lt;- 1\nquadrant_dupc[DV_DUPC &gt;0 & LM_I_DUPC&lt;0] &lt;- 2\nquadrant_dupc[DV_DUPC &lt;0 & LM_I_DUPC&lt;0] &lt;- 3  \nquadrant_dupc[DV_DUPC &gt;0 & LM_I_DUPC&gt;0] &lt;- 4    \nquadrant_dupc[localMI_DUPC[,5]&gt;signif_dupc] &lt;- 0\n\n##Drug Trafficking Per Capita\n\nquadrant_dtpc &lt;- vector(mode=\"numeric\",length=nrow(localMI_DTPC))\nthai_trafficking_sf$dtpc_2022.lag &lt;- lag.listw(rswm_q_list, thai_trafficking_sf$DTPC_2022, zero.policy = TRUE)\nDV_DTPC &lt;- thai_trafficking_sf$DTPC_2022 - mean(thai_trafficking_sf$DTPC_2022)     \nLM_I_DTPC &lt;- localMI_DTPC[,1]   \nsignif_dtpc &lt;- 0.05       \nquadrant_dtpc[DV_DTPC &lt;0 & LM_I_DTPC&gt;0] &lt;- 1\nquadrant_dtpc[DV_DTPC &gt;0 & LM_I_DTPC&lt;0] &lt;- 2\nquadrant_dtpc[DV_DTPC &lt;0 & LM_I_DTPC&lt;0] &lt;- 3  \nquadrant_dtpc[DV_DTPC &gt;0 & LM_I_DTPC&gt;0] &lt;- 4    \nquadrant_dtpc[localMI_DTPC[,5]&gt;signif_dtpc] &lt;- 0"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#plotting-lisa-map",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#plotting-lisa-map",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "12.4 Plotting LISA map",
    "text": "12.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\nDrug Use Per Capita\n\nthai_drug_use.localMI$quadrant_dupc &lt;- quadrant_dupc\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_DUPC &lt;- tm_shape(thai_drug_use.localMI) +\n  tm_fill(col = \"quadrant_dupc\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_dupc)))+1], \n          labels = clusters[c(sort(unique(quadrant_dupc)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(dupc_2022,dupc_2022_lag, asp=1, ncol=2)\n\n\n\n\n\n\n\ntmap_arrange(LISAmap_DUPC, asp=1, ncol=1)\n\n\n\n\n\n\n\ntmap_arrange(localMI_DUPC.map, pvalue_mi_dupc.map, asp=1, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\ntmap_arrange(localGC_DUPC.map, pvalue_gc_dupc.map, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nDrug Trafficking Per Capita\n\nthai_trafficking.localMI$quadrant_dtpc &lt;- quadrant_dtpc\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_DTPC &lt;- tm_shape(thai_trafficking.localMI) +\n  tm_fill(col = \"quadrant_dtpc\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_dtpc)))+1], \n          labels = clusters[c(sort(unique(quadrant_dtpc)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(dtpc_2022,dtpc_2022_lag, asp=1, ncol=2)\n\n\n\n\n\n\n\ntmap_arrange(LISAmap_DTPC, asp=1, ncol=1)\n\n\n\n\n\n\n\ntmap_arrange(localMI_DTPC.map, pvalue_mi_dtpc.map, asp=1, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\ntmap_arrange(localGC_DTPC.map, pvalue_gc_dtpc.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#deriving-distance-based-weight-matrix",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#deriving-distance-based-weight-matrix",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "13.1 Deriving distance-based weight matrix",
    "text": "13.1 Deriving distance-based weight matrix\nFrom our earlier analysis, we have determined the cut-off distance from 112km.\n\n13.1.2 Computing Fixed distance weight matrix\n\nwm_d112\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 354 \nPercentage nonzero weights: 5.970653 \nAverage number of links: 4.597403 \n2 disjoint connected subgraphs\n\n\nNext, recreate_listw() is used to convert the nb object into spatial weights object.\n\nwmd112_lw &lt;- nb2listw(wm_d112, style=\"B\")\nsummary(wmd112_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 354 \nPercentage nonzero weights: 5.970653 \nAverage number of links: 4.597403 \n2 disjoint connected subgraphs\nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 \n 8 14 14 14  7  4  2  1  4  4  1  1  2  1 \n8 least connected regions:\n14 20 34 39 44 48 58 65 with 1 link\n1 most connected region:\n4 with 14 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 77 5929 354 708 9672"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#gi-statistics-using-fixed-distance",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#gi-statistics-using-fixed-distance",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "14.1 Gi Statistics using fixed distance",
    "text": "14.1 Gi Statistics using fixed distance\n\nFIPS &lt;- order(thai_drug_use_sf$ADM1_PCODE)\ngi_dupc.fixed &lt;- localG(thai_drug_use_sf$DUPC_2022, wmd112_lw)\ngi_dupc.fixed\n\n [1] -2.19005209 -0.49620163 -1.67404525 -2.08939920 -1.82667024  1.62404131\n [7] -2.29737759 -1.01759151 -1.72405024 -1.46528069 -1.26739504 -1.76003262\n[13] -1.78499525  0.08006689 -2.39783100 -1.10250425 -0.68082030 -0.59310296\n[19] -0.50864240 -0.30817083 -1.04529638  3.54187663 -0.78642086  0.81482655\n[25]  1.63835125  3.16936899  1.99743095  0.03607721  1.05984187  0.04847619\n[31]  1.63255668  4.59101923  3.58749551 -0.49586439  3.11971659  0.70536530\n[37]  2.39078991  1.06659769  1.84284351  1.07924221  2.02259309  0.80970595\n[43]  0.54912759 -0.24945162  1.43529927  0.26896764 -2.11778516 -1.16247104\n[49] -0.77952929 -1.94077489 -1.21526116 -1.13704834 -0.53604413 -0.88187544\n[55] -0.98152004 -0.78728984 -2.37878504 -0.19792202 -0.79191932 -1.56682329\n[61] -2.62650855 -2.30845395 -1.31240105 -0.84505212 -0.85093781 -0.89694796\n[67] -1.61904850 -1.17527559  0.09168706 -1.07695262 -0.16875794 -0.21615553\n[73] -0.48862243  0.66986619  0.17285095  0.18762131  0.04544015\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)       Z(Gi) Pr(z != E(Gi))\n [1,] 0.100632471 0.15789474 6.836411e-04 -2.19005209   2.852046e-02\n [2,] 0.081538145 0.09210526 4.535204e-04 -0.49620163   6.197522e-01\n [3,] 0.125752514 0.17105263 7.322582e-04 -1.67404525   9.412171e-02\n [4,] 0.125829098 0.18421053 7.807403e-04 -2.08939920   3.667180e-02\n [5,] 0.121037478 0.17105263 7.496921e-04 -1.82667024   6.774937e-02\n [6,] 0.045488613 0.02631579 1.393728e-04  1.62404131   1.043670e-01\n [7,] 0.075606855 0.13157895 5.935787e-04 -2.29737759   2.159724e-02\n [8,] 0.094577586 0.11842105 5.490246e-04 -1.01759151   3.088721e-01\n [9,] 0.088594429 0.13157895 6.216190e-04 -1.72405024   8.469877e-02\n[10,] 0.106705632 0.14473684 6.736567e-04 -1.46528069   1.428444e-01\n[11,] 0.042655706 0.06578947 3.331722e-04 -1.26739504   2.050141e-01\n[12,] 0.076755677 0.11842105 5.604143e-04 -1.76003262   7.840228e-02\n[13,] 0.043949346 0.07894737 3.844261e-04 -1.78499525   7.426209e-02\n[14,] 0.013824733 0.01315789 6.936407e-05  0.08006689   9.361841e-01\n[15,] 0.072024786 0.13157895 6.168607e-04 -2.39783100   1.649247e-02\n[16,] 0.057269806 0.07894737 3.865986e-04 -1.10250425   2.702425e-01\n[17,] 0.029773374 0.03947368 2.030048e-04 -0.68082030   4.959852e-01\n[18,] 0.031026569 0.03947368 2.028414e-04 -0.59310296   5.531123e-01\n[19,] 0.020314716 0.02631579 1.391979e-04 -0.50864240   6.110029e-01\n[20,] 0.010600524 0.01315789 6.886591e-05 -0.30817083   7.579523e-01\n[21,] 0.014042537 0.02631579 1.378607e-04 -1.04529638   2.958860e-01\n[22,] 0.110648713 0.05263158 2.683155e-04  3.54187663   3.972912e-04\n[23,] 0.017072673 0.02631579 1.381424e-04 -0.78642086   4.316210e-01\n[24,] 0.035825645 0.02631579 1.362127e-04  0.81482655   4.151716e-01\n[25,] 0.078532129 0.05263158 2.499217e-04  1.63835125   1.013484e-01\n[26,] 0.063463484 0.02631579 1.373783e-04  3.16936899   1.527703e-03\n[27,] 0.101844295 0.06578947 3.258241e-04  1.99743095   4.577839e-02\n[28,] 0.039990020 0.03947368 2.048323e-04  0.03607721   9.712208e-01\n[29,] 0.038536653 0.02631579 1.329602e-04  1.05984187   2.892165e-01\n[30,] 0.093138495 0.09210526 4.542957e-04  0.04847619   9.613367e-01\n[31,] 0.062908857 0.03947368 2.060629e-04  1.63255668   1.025623e-01\n[32,] 0.149723719 0.06578947 3.342413e-04  4.59101923   4.410867e-06\n[33,] 0.131370578 0.06578947 3.341756e-04  3.58749551   3.338695e-04\n[34,] 0.009033481 0.01315789 6.918288e-05 -0.49586439   6.199901e-01\n[35,] 0.104016745 0.05263158 2.712972e-04  3.11971659   1.810251e-03\n[36,] 0.049515913 0.03947368 2.026899e-04  0.70536530   4.805829e-01\n[37,] 0.091676375 0.05263158 2.667126e-04  2.39078991   1.681217e-02\n[38,] 0.054762321 0.03947368 2.054642e-04  1.06659769   2.861535e-01\n[39,] 0.028588689 0.01315789 7.011318e-05  1.84284351   6.535186e-02\n[40,] 0.054898125 0.03947368 2.042589e-04  1.07924221   2.804798e-01\n[41,] 0.050146950 0.02631579 1.388268e-04  2.02259309   4.311512e-02\n[42,] 0.035779754 0.02631579 1.366128e-04  0.80970595   4.181092e-01\n[43,] 0.061671433 0.05263158 2.710044e-04  0.54912759   5.829179e-01\n[44,] 0.011077006 0.01315789 6.958649e-05 -0.24945162   8.030115e-01\n[45,] 0.060090726 0.03947368 2.063326e-04  1.43529927   1.512018e-01\n[46,] 0.029465400 0.02631579 1.371241e-04  0.26896764   7.879546e-01\n[47,] 0.027858686 0.06578947 3.207893e-04 -2.11778516   3.419327e-02\n[48,] 0.003566685 0.01315789 6.807419e-05 -1.16247104   2.450442e-01\n[49,] 0.063632759 0.07894737 3.859642e-04 -0.77952929   4.356680e-01\n[50,] 0.021178817 0.05263158 2.626439e-04 -1.94077489   5.228559e-02\n[51,] 0.033076234 0.05263158 2.589356e-04 -1.21526116   2.242665e-01\n[52,] 0.023306195 0.03947368 2.021749e-04 -1.13704834   2.555181e-01\n[53,] 0.044000329 0.05263158 2.592664e-04 -0.53604413   5.919280e-01\n[54,] 0.026808015 0.03947368 2.062727e-04 -0.88187544   3.778442e-01\n[55,] 0.059603881 0.07894737 3.883928e-04 -0.98152004   3.263364e-01\n[56,] 0.017089298 0.02631579 1.373422e-04 -0.78728984   4.311122e-01\n[57,] 0.072748544 0.13157895 6.116363e-04 -2.37878504   1.736980e-02\n[58,] 0.011508632 0.01315789 6.943709e-05 -0.19792202   8.431061e-01\n[59,] 0.039644769 0.05263158 2.689324e-04 -0.79191932   4.284077e-01\n[60,] 0.037145968 0.06578947 3.342045e-04 -1.56682329   1.171560e-01\n[61,] 0.045897229 0.10526316 5.108776e-04 -2.62650855   8.626582e-03\n[62,] 0.065100045 0.11842105 5.335244e-04 -2.30845395   2.097390e-02\n[63,] 0.087421171 0.11842105 5.579393e-04 -1.31240105   1.893849e-01\n[64,] 0.050706524 0.06578947 3.185705e-04 -0.84505212   3.980817e-01\n[65,] 0.006013420 0.01315789 7.049283e-05 -0.85093781   3.948039e-01\n[66,] 0.037864731 0.05263158 2.710448e-04 -0.89694796   3.697467e-01\n[67,] 0.016353208 0.03947368 2.039266e-04 -1.61904850   1.054368e-01\n[68,] 0.012822280 0.02631579 1.318167e-04 -1.17527559   2.398845e-01\n[69,] 0.027382752 0.02631579 1.354198e-04  0.09168706   9.269467e-01\n[70,] 0.034945800 0.05263158 2.696840e-04 -1.07695262   2.815014e-01\n[71,] 0.049867202 0.05263158 2.683280e-04 -0.16875794   8.659870e-01\n[72,] 0.023789235 0.02631579 1.366233e-04 -0.21615553   8.288665e-01\n[73,] 0.032456413 0.03947368 2.062480e-04 -0.48862243   6.251090e-01\n[74,] 0.063621068 0.05263158 2.691404e-04  0.66986619   5.029431e-01\n[75,] 0.041926218 0.03947368 2.013197e-04  0.17285095   8.627686e-01\n[76,] 0.055721832 0.05263158 2.712837e-04  0.18762131   8.511735e-01\n[77,] 0.040126311 0.03947368 2.062770e-04  0.04544015   9.637565e-01\nattr(,\"cluster\")\n [1] Low  High Low  Low  Low  High Low  Low  High High High Low  Low  Low  High\n[16] Low  Low  Low  High Low  Low  High High Low  High Low  High Low  High High\n[31] High High High High High High Low  High Low  Low  High High High Low  High\n[46] High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  High\n[61] High Low  Low  Low  High High Low  Low  Low  Low  Low  Low  High Low  Low \n[76] High High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = thai_drug_use_sf$DUPC_2022, listw = wmd112_lw)\nattr(,\"class\")\n[1] \"localG\"\n\ngi_dtpc.fixed &lt;- localG(thai_trafficking_sf$DTPC_2022, wmd112_lw)\ngi_dtpc.fixed\n\n [1] -2.039152790 -0.695380062 -1.956161184 -2.099111773 -1.388564818\n [6] -0.042187391 -2.422575500 -1.956188328 -0.526898713 -1.439399404\n[11] -1.513199156 -2.748313607 -1.851272497 -0.645584385 -2.151759215\n[16] -1.787362731 -0.792943528 -0.807683071  0.054842067  2.115500438\n[21]  2.278124681  0.720725769  3.192683428  3.742484075  1.535342440\n[26]  3.299589241  0.505915158 -0.583401698 -0.011631355  0.777694793\n[31] -0.235187476  1.572757403  0.737356870 -0.879768702  0.250070450\n[36]  0.006694956 -1.484226424 -0.574071572  0.123472537  0.657196520\n[41]  0.342285233  0.544677960  1.072284005  0.153729379  0.444889342\n[46]  0.735789066 -1.288722984  1.229764912  1.137435123  0.773817246\n[51]  0.204857395  0.312291321  1.240428407 -0.002322834  1.635582873\n[56] -0.818697087 -1.684657655 -0.035297174 -0.370106234 -1.201893164\n[61] -2.318643626 -1.946802176  0.269781946 -1.155009739  0.177547179\n[66] -0.236096376 -1.025057116 -0.137659791 -0.334504828 -0.199117552\n[71] -0.450871204 -0.177346412 -0.205084713 -1.168438657 -0.551192239\n[76] -0.398206904 -0.149673617\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.091277828 0.15789474 0.0010672580 -2.039152790   0.0414347809\n [2,] 0.074741540 0.09210526 0.0006235068 -0.695380062   0.4868171518\n [3,] 0.105129367 0.17105263 0.0011357118 -1.956161184   0.0504461695\n [4,] 0.111191610 0.18421053 0.0012100398 -2.099111773   0.0358070489\n [5,] 0.123821126 0.17105263 0.0011569944 -1.388564818   0.1649651220\n [6,] 0.025697838 0.02631579 0.0002145574 -0.042187391   0.9663493145\n [7,] 0.057731472 0.13157895 0.0009292160 -2.422575500   0.0154109231\n [8,] 0.061566781 0.11842105 0.0008447046 -1.956188328   0.0504429729\n [9,] 0.115288018 0.13157895 0.0009559550 -0.526898713   0.5982639276\n[10,] 0.098392355 0.14473684 0.0010366533 -1.439399404   0.1500373930\n[11,] 0.031814978 0.06578947 0.0005040967 -1.513199156   0.1302290785\n[12,] 0.037134247 0.11842105 0.0008747975 -2.748313607   0.0059902683\n[13,] 0.033935742 0.07894737 0.0005911650 -1.851272497   0.0641303607\n[14,] 0.006546990 0.01315789 0.0001048614 -0.645584385   0.5185485525\n[15,] 0.066020978 0.13157895 0.0009282472 -2.151759215   0.0314163236\n[16,] 0.035533970 0.07894737 0.0005899595 -1.787362731   0.0738788812\n[17,] 0.025594849 0.03947368 0.0003063525 -0.792943528   0.4278107255\n[18,] 0.025219787 0.03947368 0.0003114478 -0.807683071   0.4192730513\n[19,] 0.027121293 0.02631579 0.0002157283  0.054842067   0.9562642865\n[20,] 0.035241429 0.01315789 0.0001089710  2.115500438   0.0343873176\n[21,] 0.059366813 0.02631579 0.0002104819  2.278124681   0.0227191502\n[22,] 0.067305252 0.05263158 0.0004145124  0.720725769   0.4710782543\n[23,] 0.071852287 0.02631579 0.0002034265  3.192683428   0.0014095739\n[24,] 0.079716994 0.02631579 0.0002036021  3.742484075   0.0001822101\n[25,] 0.083892187 0.05263158 0.0004145571  1.535342440   0.1246997345\n[26,] 0.074663463 0.02631579 0.0002146997  3.299589241   0.0009682644\n[27,] 0.077230488 0.06578947 0.0005114153  0.505915158   0.6129162106\n[28,] 0.029181547 0.03947368 0.0003112259 -0.583401698   0.5596229153\n[29,] 0.026146212 0.02631579 0.0002125567 -0.011631355   0.9907197303\n[30,] 0.112285422 0.09210526 0.0006733344  0.777694793   0.4367489625\n[31,] 0.035363458 0.03947368 0.0003054239 -0.235187476   0.8140632258\n[32,] 0.101051427 0.06578947 0.0005026773  1.572757403   0.1157750025\n[33,] 0.082550558 0.06578947 0.0005167123  0.737356870   0.4609053566\n[34,] 0.004135516 0.01315789 0.0001051732 -0.879768702   0.3789846228\n[35,] 0.057755830 0.05263158 0.0004198904  0.250070450   0.8025328676\n[36,] 0.039591372 0.03947368 0.0003090044  0.006694956   0.9946582377\n[37,] 0.022759214 0.05263158 0.0004050782 -1.484226424   0.1377488620\n[38,] 0.029331039 0.03947368 0.0003121550 -0.574071572   0.5659193697\n[39,] 0.014441476 0.01315789 0.0001080703  0.123472537   0.9017329202\n[40,] 0.051186610 0.03947368 0.0003176437  0.657196520   0.5110545627\n[41,] 0.031343328 0.02631579 0.0002157419  0.342285233   0.7321362473\n[42,] 0.034294158 0.02631579 0.0002145599  0.544677960   0.5859750262\n[43,] 0.074574883 0.05263158 0.0004187785  1.072284005   0.2835924888\n[44,] 0.014759018 0.01315789 0.0001084765  0.153729379   0.8778231191\n[45,] 0.047423260 0.03947368 0.0003192890  0.444889342   0.6563997255\n[46,] 0.037103390 0.02631579 0.0002149528  0.735789066   0.4618590766\n[47,] 0.036510490 0.06578947 0.0005161701 -1.288722984   0.1974944091\n[48,] 0.025814245 0.01315789 0.0001059187  1.229764912   0.2187851511\n[49,] 0.106802369 0.07894737 0.0005997263  1.137435123   0.2553564316\n[50,] 0.068302334 0.05263158 0.0004101125  0.773817246   0.4390388724\n[51,] 0.056817282 0.05263158 0.0004174780  0.204857395   0.8376835431\n[52,] 0.045053666 0.03947368 0.0003192609  0.312291321   0.7548191350\n[53,] 0.077781650 0.05263158 0.0004110882  1.240428407   0.2148169795\n[54,] 0.039432176 0.03947368 0.0003193250 -0.002322834   0.9981466480\n[55,] 0.118922118 0.07894737 0.0005973466  1.635582873   0.1019269172\n[56,] 0.014334399 0.02631579 0.0002141746 -0.818697087   0.4129592590\n[57,] 0.080123155 0.13157895 0.0009329218 -1.684657655   0.0920546408\n[58,] 0.012789970 0.01315789 0.0001086519 -0.035297174   0.9718427771\n[59,] 0.045081094 0.05263158 0.0004161950 -0.370106234   0.7113033375\n[60,] 0.038600733 0.06578947 0.0005117366 -1.201893164   0.2294049235\n[61,] 0.039989035 0.10526316 0.0007925270 -2.318643626   0.0204143676\n[62,] 0.062177332 0.11842105 0.0008346501 -1.946802176   0.0515584560\n[63,] 0.126324433 0.11842105 0.0008582227  0.269781946   0.7873280129\n[64,] 0.039622770 0.06578947 0.0005132474 -1.155009739   0.2480864382\n[65,] 0.015011748 0.01315789 0.0001090242  0.177547179   0.8590786107\n[66,] 0.047834843 0.05263158 0.0004127746 -0.236096376   0.8133578861\n[67,] 0.021262437 0.03947368 0.0003156336 -1.025057116   0.3053362383\n[68,] 0.024333609 0.02631579 0.0002073349 -0.137659791   0.8905092992\n[69,] 0.021414029 0.02631579 0.0002147333 -0.334504828   0.7379986484\n[70,] 0.048616841 0.05263158 0.0004065326 -0.199117552   0.8421707913\n[71,] 0.043460978 0.05263158 0.0004137048 -0.450871204   0.6520823787\n[72,] 0.023720012 0.02631579 0.0002142348 -0.177346412   0.8592362968\n[73,] 0.035844762 0.03947368 0.0003131042 -0.205084713   0.8375059398\n[74,] 0.028691393 0.05263158 0.0004198007 -1.168438657   0.2426298694\n[75,] 0.029647680 0.03947368 0.0003177955 -0.551192239   0.5815018995\n[76,] 0.044568656 0.05263158 0.0004099845 -0.398206904   0.6904776769\n[77,] 0.036863208 0.03947368 0.0003041929 -0.149673617   0.8810221244\nattr(,\"cluster\")\n [1] Low  High Low  Low  Low  High Low  Low  High High Low  High Low  Low  Low \n[16] Low  Low  Low  High High High High High High High High Low  Low  Low  Low \n[31] Low  Low  High Low  High Low  Low  Low  Low  High High High High High High\n[46] High High Low  Low  Low  High High Low  High Low  High Low  High Low  Low \n[61] High Low  Low  Low  High Low  Low  Low  High Low  Low  High Low  High High\n[76] Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = thai_trafficking_sf$DTPC_2022, listw = wmd112_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nFrom the output, several provinces are identified as significant hotspots (e.g., Z-scores significantly higher than 1.96), while others are significant coldspots (Z-scores lower than -1.96).\n-   Locations with high Z-scores like are strong hotspots, indicating areas where drug use per capita is unusually high and clustered spatially.\n\n-   Locations with low Z-scores are coldspots, suggesting areas with lower-than-expected values for drug use per capita that are also spatially clustered.\nThe code chunk below joins the Gi values to the original data frame:\n\nthai_drug_use_sf.gi &lt;- cbind(thai_drug_use_sf, as.matrix(gi_dupc.fixed)) %&gt;% \n  rename(gstat_fixed = as.matrix.gi_dupc.fixed.)\n\n\nthai_trafficking_sf.gi &lt;- cbind(thai_drug_use_sf, as.matrix(gi_dtpc.fixed)) %&gt;% \n  rename(gstat_fixed = as.matrix.gi_dtpc.fixed.)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "14.2 Mapping Gi values with fixed distance weights",
    "text": "14.2 Mapping Gi values with fixed distance weights\nUsing tmap:\nDUPC\n\ngimap_dupc&lt;-tm_shape(thai_drug_use_sf.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(dupc_2022, gimap_dupc, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nDTPC\n\ngimap_dtpc&lt;-tm_shape(thai_trafficking_sf.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(dtpc_2022, gimap_dtpc, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#emerging-hot-spot-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#emerging-hot-spot-analysis",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "14.3 Emerging Hot Spot Analysis",
    "text": "14.3 Emerging Hot Spot Analysis\nEHSA identifies trends in spatial clustering over time, combining the Gi* statistic with the Mann-Kendall trend test to detect temporal patterns in hot and cold spots.\n\n# ehsa &lt;- emerging_hotspot_analysis(x = spt, .var = \"DUPC\", k = 1, nb_col = wm_q, wt_col = rswm_q, nsim = 99, threshold = 0.05)\n\nIn this iteration, we are unable to run EHSA due to the presence of empty neighbour sets (Region 68)."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/test.html",
    "href": "Take-Home_Exercise/TakeHomeEx02/test.html",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "",
    "text": "Test 1Test 2\n\n\n\n# R filler code for Test 1\nx &lt;- rnorm(10)\nmean(x)\n\n[1] -0.4377636\n\nsummary(x)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-1.6882 -0.9259 -0.8102 -0.4378  0.3338  0.9812"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#row-standardized-weights",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#row-standardized-weights",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "Row-standardized Weights",
    "text": "Row-standardized Weights\nThis tab shows the Row-standardized weights (W) for each region.\nThe allow_zero = TRUE parameter ensures that Phuket (which has no neighbors) is included in the spatial weights matrix with a weight of zero. This allows it to remain in the analysis without artificially adding neighbors.\n\nrswm_q &lt;- st_weights(wm_q, style = \"W\", allow_zero=TRUE)\nrswm_q\n\n[[1]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[2]]\n[1] 0.25 0.25 0.25 0.25\n\n[[3]]\n[1] 0.25 0.25 0.25 0.25\n\n[[4]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[5]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[6]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[7]]\n[1] 0.5 0.5\n\n[[8]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[9]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[10]]\n[1] 0.25 0.25 0.25 0.25\n\n[[11]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[12]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[13]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[14]]\n[1] 1\n\n[[15]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[16]]\n[1] 0.25 0.25 0.25 0.25\n\n[[17]]\n[1] 0.5 0.5\n\n[[18]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[19]]\n[1] 0.25 0.25 0.25 0.25\n\n[[20]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[21]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[22]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[23]]\n[1] 0.25 0.25 0.25 0.25\n\n[[24]]\n[1] 0.25 0.25 0.25 0.25\n\n[[25]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[26]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[27]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[28]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[29]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[30]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[31]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[32]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[33]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[34]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[35]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[36]]\n[1] 0.25 0.25 0.25 0.25\n\n[[37]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[38]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[39]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[40]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[41]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[42]]\n[1] 0.25 0.25 0.25 0.25\n\n[[43]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[44]]\n[1] 0.5 0.5\n\n[[45]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[46]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[47]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[48]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[49]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[50]]\n[1] 0.25 0.25 0.25 0.25\n\n[[51]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[52]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[53]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[54]]\n[1] 0.25 0.25 0.25 0.25\n\n[[55]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[56]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[57]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[58]]\n[1] 0.5 0.5\n\n[[59]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[60]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[61]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[62]]\n[1] 0.25 0.25 0.25 0.25\n\n[[63]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[64]]\n[1] 0.25 0.25 0.25 0.25\n\n[[65]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[66]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[67]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[68]]\nNULL\n\n[[69]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[70]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[71]]\n[1] 0.25 0.25 0.25 0.25\n\n[[72]]\n[1] 0.5 0.5\n\n[[73]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[74]]\n[1] 0.25 0.25 0.25 0.25\n\n[[75]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[76]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[77]]\n[1] 0.3333333 0.3333333 0.3333333\n\nattr(,\"mode\")\n[1] \"binary\"\nattr(,\"W\")\n[1] TRUE\nattr(,\"comp\")\nattr(,\"comp\")$d\n [1] 6 4 4 6 7 3 2 5 5 4 5 8 3 1 5 4 2 5 4 8 5 5 4 4 3 3 6 9 3 8 5 6 6 6 6 4 3 6\n[39] 3 5 3 4 5 2 7 3 5 9 8 4 6 7 6 4 5 5 7 2 3 5 3 4 7 4 3 5 3 0 3 5 4 2 3 4 3 5\n[77] 3\n\n\nRecall that the two most connected regions are 28 and 48. If we take a closer look we can see the weight of their neighbours for further analysis, compared to the least connected 14 (with the exception of 68):\n\nrswm_q[[28]]\n\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\nrswm_q[[48]]\n\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\nrswm_q[[14]]\n\n[1] 1\n\n\nFor 28 and 48, each neigbour is assigned 0.1111 of the total weight, meaning when computing the average neighbouring Drug Use Per Capita Values, each neigbour’s Drug Use PC will be multiplied by 0.1111 before being derived.\n\nsummary(unlist(rswm_q))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1111  0.1667  0.2000  0.2159  0.2500  1.0000"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#binary-weights",
    "href": "Take-Home_Exercise/TakeHomeEx02/TakeHomeEx02.html#binary-weights",
    "title": "TakeHome Exercise 2: Drug Abuse in Thailand",
    "section": "Binary Weights",
    "text": "Binary Weights\nThis tab shows the Binary weights (B) for each region.\n\nrswm_ids &lt;- st_weights(wm_q, glist=ids, style = \"B\", allow_zero = TRUE)\nrswm_ids\n\n[[1]]\n[1] 0.003315192 0.003016607 0.004630397 0.001125688 0.001697770 0.002002553\n\n[[2]]\n[1] 0.002361373 0.001602581 0.001564500 0.001676585\n\n[[3]]\n[1] 0.003315192 0.002854311 0.002044693 0.003184795\n\n[[4]]\n[1] 0.003016607 0.002854311 0.002828972 0.001389322 0.001050532 0.001801335\n\n[[5]]\n[1] 0.002044693 0.002828972 0.001627032 0.002749528 0.001064333 0.001529214\n[7] 0.001336418\n\n[[6]]\n[1] 0.000878389 0.001178208 0.001044633\n\n[[7]]\n[1] 0.004630397 0.001289428\n\n[[8]]\n[1] 0.0013893225 0.0016270324 0.0020680379 0.0008111102 0.0018306120\n\n[[9]]\n[1] 0.002361373 0.003119182 0.001560582 0.001135777 0.001683755\n\n[[10]]\n[1] 0.002749528 0.003119182 0.001239663 0.002023719\n\n[[11]]\n[1] 0.0009014757 0.0009384743 0.0013214513 0.0013085278 0.0009759728\n\n[[12]]\n[1] 0.0011256880 0.0010505316 0.0012894281 0.0009014757 0.0019214541\n[6] 0.0013695052 0.0018308493 0.0010083793\n\n[[13]]\n[1] 0.0009384743 0.0019214541 0.0022377415\n\n[[14]]\n[1] 0.001321451\n\n[[15]]\n[1] 0.0018013349 0.0020680379 0.0013695052 0.0018159798 0.0007680623\n\n[[16]]\n[1] 0.0018308493 0.0018159798 0.0012779578 0.0008914841\n\n[[17]]\n[1] 0.001308528 0.002237741\n\n[[18]]\n[1] 0.0009759728 0.0010083793 0.0012779578 0.0007601302 0.0007508763\n\n[[19]]\n[1] 0.0008127504 0.0010952398 0.0007054238 0.0013009821\n\n[[20]]\n[1] 0.0008111102 0.0007680623 0.0008914841 0.0007601302 0.0008127504\n[6] 0.0010811484 0.0005938114 0.0007661711\n\n[[21]]\n[1] 0.0007508763 0.0010811484 0.0013220627 0.0005540413 0.0007546700\n\n[[22]]\n[1] 0.0008693913 0.0023180705 0.0008738794 0.0013119141 0.0017783772\n\n[[23]]\n[1] 0.0008693913 0.0013015667 0.0011417918 0.0007582891\n\n[[24]]\n[1] 0.0013220627 0.0013015667 0.0007462076 0.0008646900\n\n[[25]]\n[1] 0.002318071 0.001136674 0.001283745\n\n[[26]]\n[1] 0.0008738794 0.0011417918 0.0011366739\n\n[[27]]\n[1] 0.0008768467 0.0011772829 0.0010437375 0.0012341993 0.0011496588\n[6] 0.0008362915\n\n[[28]]\n[1] 0.0010952398 0.0005938114 0.0005540413 0.0008768467 0.0012913982\n[6] 0.0006684975 0.0011046500 0.0008582251 0.0006505098\n\n[[29]]\n[1] 0.000878389 0.001094256 0.001554845\n\n[[30]]\n[1] 0.0010643325 0.0018306120 0.0015605821 0.0012396628 0.0007054238\n[6] 0.0007661711 0.0009678872 0.0007567931\n\n[[31]]\n[1] 0.0007546700 0.0007462076 0.0011772829 0.0012913982 0.0014303042\n\n[[32]]\n[1] 0.0013119141 0.0012837448 0.0010437375 0.0010942557 0.0009658427\n[6] 0.0008509267\n\n[[33]]\n[1] 0.0017783772 0.0007582891 0.0008646900 0.0012341993 0.0014303042\n[6] 0.0009658427\n\n[[34]]\n[1] 0.0006684975 0.0007134550 0.0013282229 0.0007662463 0.0007961576\n[6] 0.0007359408\n\n[[35]]\n[1] 0.0011782085 0.0011496588 0.0015548448 0.0008509267 0.0008226040\n[6] 0.0009781706\n\n[[36]]\n[1] 0.001044633 0.000713455 0.000822604 0.001747051\n\n[[37]]\n[1] 0.001104650 0.001328223 0.001528848\n\n[[38]]\n[1] 0.0008362915 0.0008582251 0.0007662463 0.0009781706 0.0017470507\n[6] 0.0015288477\n\n[[39]]\n[1] 0.0005949243 0.0013127120 0.0005775104\n\n[[40]]\n[1] 0.0005949243 0.0013533896 0.0010208959 0.0012736404 0.0004330871\n\n[[41]]\n[1] 0.0012461498 0.0009185291 0.0007866881\n\n[[42]]\n[1] 0.0013127120 0.0012461498 0.0008642176 0.0008065710\n\n[[43]]\n[1] 0.0009185291 0.0008642176 0.0016580351 0.0009043097 0.0014401507\n\n[[44]]\n[1] 0.0013533896 0.0004050562\n\n[[45]]\n[1] 0.0005775104 0.0010208959 0.0008065710 0.0016580351 0.0015770331\n[6] 0.0005137365 0.0008337361\n\n[[46]]\n[1] 0.0012736404 0.0015770331 0.0006368745\n\n[[47]]\n[1] 0.0011083440 0.0010224582 0.0011487366 0.0007692196 0.0009500116\n\n[[48]]\n[1] 0.0004330871 0.0004050562 0.0005137365 0.0006368745 0.0011083440\n[6] 0.0005390168 0.0008660228 0.0005930179 0.0004194751\n\n[[49]]\n[1] 0.0016025811 0.0011357769 0.0009678872 0.0010224582 0.0005390168\n[6] 0.0014880643 0.0007969962 0.0012281481\n\n[[50]]\n[1] 0.001148737 0.001488064 0.001207034 0.001159642\n\n[[51]]\n[1] 0.0007961576 0.0007692196 0.0012070337 0.0009872524 0.0010607131\n[6] 0.0011788056\n\n[[52]]\n[1] 0.0013009821 0.0006505098 0.0007567931 0.0007359408 0.0007969962\n[6] 0.0011596424 0.0009872524\n\n[[53]]\n[1] 0.0009043097 0.0008337361 0.0009500116 0.0008660228 0.0010607131\n[6] 0.0009913886\n\n[[54]]\n[1] 0.0007866881 0.0014401507 0.0011788056 0.0009913886\n\n[[55]]\n[1] 0.0015644999 0.0005930179 0.0012281481 0.0010319581 0.0010726557\n\n[[56]]\n[1] 0.0004194751 0.0010319581 0.0007359178 0.0007684688 0.0010943099\n\n[[57]]\n[1] 0.0016977702 0.0031847953 0.0015292139 0.0007359178 0.0013974726\n[6] 0.0024342521 0.0012539862\n\n[[58]]\n[1] 0.0008969484 0.0005305747\n\n[[59]]\n[1] 0.0008969484 0.0015276982 0.0016200705\n\n[[60]]\n[1] 0.0007684688 0.0013974726 0.0015276982 0.0022947120 0.0014508421\n\n[[61]]\n[1] 0.001620070 0.002294712 0.002932727\n\n[[62]]\n[1] 0.002002553 0.002434252 0.001450842 0.002932727\n\n[[63]]\n[1] 0.001676585 0.001336418 0.001683755 0.002023719 0.001072656 0.001094310\n[7] 0.001253986\n\n[[64]]\n[1] 0.0011280034 0.0011297514 0.0009924372 0.0010810291\n\n[[65]]\n[1] 0.0005305747 0.0017218617 0.0006970052\n\n[[66]]\n[1] 0.0011280034 0.0009317490 0.0010515220 0.0009922622 0.0005527059\n\n[[67]]\n[1] 0.0011297514 0.0006793504 0.0011683896\n\n[[68]]\nNULL\n\n[[69]]\n[1] 0.0017218617 0.0006793504 0.0009044108\n\n[[70]]\n[1] 0.0009924372 0.0006970052 0.0009317490 0.0011683896 0.0009044108\n\n[[71]]\n[1] 0.001081029 0.001051522 0.001897001 0.001163891\n\n[[72]]\n[1] 0.001357908 0.001839165\n\n[[73]]\n[1] 0.001357908 0.001631630 0.001088143\n\n[[74]]\n[1] 0.0009922622 0.0018970008 0.0012004480 0.0013147666\n\n[[75]]\n[1] 0.0018391654 0.0016316305 0.0008936034\n\n[[76]]\n[1] 0.0005527059 0.0010881434 0.0012004480 0.0008936034 0.0014431917\n\n[[77]]\n[1] 0.001163891 0.001314767 0.001443192\n\nattr(,\"mode\")\n[1] \"general\"\nattr(,\"glist\")\nattr(,\"glist\")[[1]]\n[1] 0.003315192 0.003016607 0.004630397 0.001125688 0.001697770 0.002002553\n\nattr(,\"glist\")[[2]]\n[1] 0.002361373 0.001602581 0.001564500 0.001676585\n\nattr(,\"glist\")[[3]]\n[1] 0.003315192 0.002854311 0.002044693 0.003184795\n\nattr(,\"glist\")[[4]]\n[1] 0.003016607 0.002854311 0.002828972 0.001389322 0.001050532 0.001801335\n\nattr(,\"glist\")[[5]]\n[1] 0.002044693 0.002828972 0.001627032 0.002749528 0.001064333 0.001529214\n[7] 0.001336418\n\nattr(,\"glist\")[[6]]\n[1] 0.000878389 0.001178208 0.001044633\n\nattr(,\"glist\")[[7]]\n[1] 0.004630397 0.001289428\n\nattr(,\"glist\")[[8]]\n[1] 0.0013893225 0.0016270324 0.0020680379 0.0008111102 0.0018306120\n\nattr(,\"glist\")[[9]]\n[1] 0.002361373 0.003119182 0.001560582 0.001135777 0.001683755\n\nattr(,\"glist\")[[10]]\n[1] 0.002749528 0.003119182 0.001239663 0.002023719\n\nattr(,\"glist\")[[11]]\n[1] 0.0009014757 0.0009384743 0.0013214513 0.0013085278 0.0009759728\n\nattr(,\"glist\")[[12]]\n[1] 0.0011256880 0.0010505316 0.0012894281 0.0009014757 0.0019214541\n[6] 0.0013695052 0.0018308493 0.0010083793\n\nattr(,\"glist\")[[13]]\n[1] 0.0009384743 0.0019214541 0.0022377415\n\nattr(,\"glist\")[[14]]\n[1] 0.001321451\n\nattr(,\"glist\")[[15]]\n[1] 0.0018013349 0.0020680379 0.0013695052 0.0018159798 0.0007680623\n\nattr(,\"glist\")[[16]]\n[1] 0.0018308493 0.0018159798 0.0012779578 0.0008914841\n\nattr(,\"glist\")[[17]]\n[1] 0.001308528 0.002237741\n\nattr(,\"glist\")[[18]]\n[1] 0.0009759728 0.0010083793 0.0012779578 0.0007601302 0.0007508763\n\nattr(,\"glist\")[[19]]\n[1] 0.0008127504 0.0010952398 0.0007054238 0.0013009821\n\nattr(,\"glist\")[[20]]\n[1] 0.0008111102 0.0007680623 0.0008914841 0.0007601302 0.0008127504\n[6] 0.0010811484 0.0005938114 0.0007661711\n\nattr(,\"glist\")[[21]]\n[1] 0.0007508763 0.0010811484 0.0013220627 0.0005540413 0.0007546700\n\nattr(,\"glist\")[[22]]\n[1] 0.0008693913 0.0023180705 0.0008738794 0.0013119141 0.0017783772\n\nattr(,\"glist\")[[23]]\n[1] 0.0008693913 0.0013015667 0.0011417918 0.0007582891\n\nattr(,\"glist\")[[24]]\n[1] 0.0013220627 0.0013015667 0.0007462076 0.0008646900\n\nattr(,\"glist\")[[25]]\n[1] 0.002318071 0.001136674 0.001283745\n\nattr(,\"glist\")[[26]]\n[1] 0.0008738794 0.0011417918 0.0011366739\n\nattr(,\"glist\")[[27]]\n[1] 0.0008768467 0.0011772829 0.0010437375 0.0012341993 0.0011496588\n[6] 0.0008362915\n\nattr(,\"glist\")[[28]]\n[1] 0.0010952398 0.0005938114 0.0005540413 0.0008768467 0.0012913982\n[6] 0.0006684975 0.0011046500 0.0008582251 0.0006505098\n\nattr(,\"glist\")[[29]]\n[1] 0.000878389 0.001094256 0.001554845\n\nattr(,\"glist\")[[30]]\n[1] 0.0010643325 0.0018306120 0.0015605821 0.0012396628 0.0007054238\n[6] 0.0007661711 0.0009678872 0.0007567931\n\nattr(,\"glist\")[[31]]\n[1] 0.0007546700 0.0007462076 0.0011772829 0.0012913982 0.0014303042\n\nattr(,\"glist\")[[32]]\n[1] 0.0013119141 0.0012837448 0.0010437375 0.0010942557 0.0009658427\n[6] 0.0008509267\n\nattr(,\"glist\")[[33]]\n[1] 0.0017783772 0.0007582891 0.0008646900 0.0012341993 0.0014303042\n[6] 0.0009658427\n\nattr(,\"glist\")[[34]]\n[1] 0.0006684975 0.0007134550 0.0013282229 0.0007662463 0.0007961576\n[6] 0.0007359408\n\nattr(,\"glist\")[[35]]\n[1] 0.0011782085 0.0011496588 0.0015548448 0.0008509267 0.0008226040\n[6] 0.0009781706\n\nattr(,\"glist\")[[36]]\n[1] 0.001044633 0.000713455 0.000822604 0.001747051\n\nattr(,\"glist\")[[37]]\n[1] 0.001104650 0.001328223 0.001528848\n\nattr(,\"glist\")[[38]]\n[1] 0.0008362915 0.0008582251 0.0007662463 0.0009781706 0.0017470507\n[6] 0.0015288477\n\nattr(,\"glist\")[[39]]\n[1] 0.0005949243 0.0013127120 0.0005775104\n\nattr(,\"glist\")[[40]]\n[1] 0.0005949243 0.0013533896 0.0010208959 0.0012736404 0.0004330871\n\nattr(,\"glist\")[[41]]\n[1] 0.0012461498 0.0009185291 0.0007866881\n\nattr(,\"glist\")[[42]]\n[1] 0.0013127120 0.0012461498 0.0008642176 0.0008065710\n\nattr(,\"glist\")[[43]]\n[1] 0.0009185291 0.0008642176 0.0016580351 0.0009043097 0.0014401507\n\nattr(,\"glist\")[[44]]\n[1] 0.0013533896 0.0004050562\n\nattr(,\"glist\")[[45]]\n[1] 0.0005775104 0.0010208959 0.0008065710 0.0016580351 0.0015770331\n[6] 0.0005137365 0.0008337361\n\nattr(,\"glist\")[[46]]\n[1] 0.0012736404 0.0015770331 0.0006368745\n\nattr(,\"glist\")[[47]]\n[1] 0.0011083440 0.0010224582 0.0011487366 0.0007692196 0.0009500116\n\nattr(,\"glist\")[[48]]\n[1] 0.0004330871 0.0004050562 0.0005137365 0.0006368745 0.0011083440\n[6] 0.0005390168 0.0008660228 0.0005930179 0.0004194751\n\nattr(,\"glist\")[[49]]\n[1] 0.0016025811 0.0011357769 0.0009678872 0.0010224582 0.0005390168\n[6] 0.0014880643 0.0007969962 0.0012281481\n\nattr(,\"glist\")[[50]]\n[1] 0.001148737 0.001488064 0.001207034 0.001159642\n\nattr(,\"glist\")[[51]]\n[1] 0.0007961576 0.0007692196 0.0012070337 0.0009872524 0.0010607131\n[6] 0.0011788056\n\nattr(,\"glist\")[[52]]\n[1] 0.0013009821 0.0006505098 0.0007567931 0.0007359408 0.0007969962\n[6] 0.0011596424 0.0009872524\n\nattr(,\"glist\")[[53]]\n[1] 0.0009043097 0.0008337361 0.0009500116 0.0008660228 0.0010607131\n[6] 0.0009913886\n\nattr(,\"glist\")[[54]]\n[1] 0.0007866881 0.0014401507 0.0011788056 0.0009913886\n\nattr(,\"glist\")[[55]]\n[1] 0.0015644999 0.0005930179 0.0012281481 0.0010319581 0.0010726557\n\nattr(,\"glist\")[[56]]\n[1] 0.0004194751 0.0010319581 0.0007359178 0.0007684688 0.0010943099\n\nattr(,\"glist\")[[57]]\n[1] 0.0016977702 0.0031847953 0.0015292139 0.0007359178 0.0013974726\n[6] 0.0024342521 0.0012539862\n\nattr(,\"glist\")[[58]]\n[1] 0.0008969484 0.0005305747\n\nattr(,\"glist\")[[59]]\n[1] 0.0008969484 0.0015276982 0.0016200705\n\nattr(,\"glist\")[[60]]\n[1] 0.0007684688 0.0013974726 0.0015276982 0.0022947120 0.0014508421\n\nattr(,\"glist\")[[61]]\n[1] 0.001620070 0.002294712 0.002932727\n\nattr(,\"glist\")[[62]]\n[1] 0.002002553 0.002434252 0.001450842 0.002932727\n\nattr(,\"glist\")[[63]]\n[1] 0.001676585 0.001336418 0.001683755 0.002023719 0.001072656 0.001094310\n[7] 0.001253986\n\nattr(,\"glist\")[[64]]\n[1] 0.0011280034 0.0011297514 0.0009924372 0.0010810291\n\nattr(,\"glist\")[[65]]\n[1] 0.0005305747 0.0017218617 0.0006970052\n\nattr(,\"glist\")[[66]]\n[1] 0.0011280034 0.0009317490 0.0010515220 0.0009922622 0.0005527059\n\nattr(,\"glist\")[[67]]\n[1] 0.0011297514 0.0006793504 0.0011683896\n\nattr(,\"glist\")[[68]]\nnumeric(0)\n\nattr(,\"glist\")[[69]]\n[1] 0.0017218617 0.0006793504 0.0009044108\n\nattr(,\"glist\")[[70]]\n[1] 0.0009924372 0.0006970052 0.0009317490 0.0011683896 0.0009044108\n\nattr(,\"glist\")[[71]]\n[1] 0.001081029 0.001051522 0.001897001 0.001163891\n\nattr(,\"glist\")[[72]]\n[1] 0.001357908 0.001839165\n\nattr(,\"glist\")[[73]]\n[1] 0.001357908 0.001631630 0.001088143\n\nattr(,\"glist\")[[74]]\n[1] 0.0009922622 0.0018970008 0.0012004480 0.0013147666\n\nattr(,\"glist\")[[75]]\n[1] 0.0018391654 0.0016316305 0.0008936034\n\nattr(,\"glist\")[[76]]\n[1] 0.0005527059 0.0010881434 0.0012004480 0.0008936034 0.0014431917\n\nattr(,\"glist\")[[77]]\n[1] 0.001163891 0.001314767 0.001443192\n\nattr(,\"glistsym\")\n[1] TRUE\nattr(,\"glistsym\")attr(,\"d\")\n[1] 0\nattr(,\"B\")\n[1] TRUE\n\n\n\nrswm_ids[[28]]\n\n[1] 0.0010952398 0.0005938114 0.0005540413 0.0008768467 0.0012913982\n[6] 0.0006684975 0.0011046500 0.0008582251 0.0006505098\n\nrswm_ids[[48]]\n\n[1] 0.0004330871 0.0004050562 0.0005137365 0.0006368745 0.0011083440\n[6] 0.0005390168 0.0008660228 0.0005930179 0.0004194751\n\nrswm_ids[[14]]\n\n[1] 0.001321451\n\n\nPolygon 28:\n\nThe neighbors of polygon 28 have been assigned the following weights: [0.001952398, 0.0005938114, 0.0005540413, 0.0008786467, 0.0012913982, 0.0006684975, 0.0011046500]. Neighbours closer to Polygon 28 will have larger weights.\nImplication: When calculating average Drug Use Per Capita, the values from its closer neighbours will have a higher weight. The same logic can be applied for 48 and 14\n\nPolygon 8 and Polygon 1 (Additional Data):\n\nPolygon 8: [0.0005390179, 0.0004194751].\n\nSimilar to polygon 48, polygon 8 has only two neighbors with relatively equal influence.\n\nPolygon 1: [0.001399134].\n\nOnly one neighbor for polygon 1, with a single weight indicating the inverse distance for that neighbor.\n\n\n\nsummary(unlist(rswm_ids))\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.0004051 0.0008646 0.0011268 0.0012629 0.0014601 0.0046304"
  }
]