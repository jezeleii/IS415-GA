[
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Spatial Weights & Applications",
    "section": "",
    "text": "By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-shapefile-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-shapefile-into-r-environment",
    "title": "Spatial Weights & Applications",
    "section": "3.1 Import shapefile into R environment",
    "text": "3.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer=\"Hunan\") %&gt;% \n  st_transform(crs=4490)\n\nReading layer `Hunan' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-csv-file-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#import-csv-file-into-r-environment",
    "title": "Spatial Weights & Applications",
    "section": "3.2 Import csv file into R environment",
    "text": "3.2 Import csv file into R environment\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\") \n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#performing-relational-join",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#performing-relational-join",
    "title": "Spatial Weights & Applications",
    "section": "3.3 Performing relational join",
    "text": "3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, hunan2012)\n\nJoining with `by = join_by(County)`\n\nnames(hunan)\n\n [1] \"NAME_2\"      \"ID_3\"        \"NAME_3\"      \"ENGTYPE_3\"   \"Shape_Leng\" \n [6] \"Shape_Area\"  \"County\"      \"City\"        \"avg_wage\"    \"deposite\"   \n[11] \"FAI\"         \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"      \n[16] \"GIO\"         \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"        \n[21] \"EmpR\"        \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"  \n[26] \"Household_R\" \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"      \n[31] \"Agri\"        \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n[36] \"geometry\"   \n\n\n\nhunan &lt;- hunan %&gt;% \n  select(1:4, 7, 15, 32)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-queen-contiguity-based-neighbours",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-queen-contiguity-based-neighbours",
    "title": "Spatial Weights & Applications",
    "section": "5.1 Computing (QUEEN) contiguity based neighbours",
    "text": "5.1 Computing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[1]\n\n[[1]]\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe GDPPC can be retrieve of these five countries by using the code chunk below:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nThe complete weight matrix can be displayed using str():\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#creating-rook-contiguity-based-neighbours",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#creating-rook-contiguity-based-neighbours",
    "title": "Spatial Weights & Applications",
    "section": "5.2 Creating (ROOK) contiguity based neighbours",
    "text": "5.2 Creating (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-contiguity-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-contiguity-weights",
    "title": "Spatial Weights & Applications",
    "section": "5.3 Visualizing contiguity weights",
    "text": "5.3 Visualizing contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n8.5.3.1 Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\n\n\n\n\n\n\n\n\n\n\n8.5.3.2 Plotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")\n\n\n\n\n\n\n\n\n\ngreen_t &lt;- rgb(0,1,0, alpha=0.7)\nblue_t &lt;- rgb(0,0,1, alpha=0.7)\n#additional plot for comparison \nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen vs Rook Contiguity\")\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col=green_t)\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col=blue_t)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#determining-the-cut-off-distance",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#determining-the-cut-off-distance",
    "title": "Spatial Weights & Applications",
    "section": "6.1 Determining the cut-off distance",
    "text": "6.1 Determining the cut-off distance\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat=TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "title": "Spatial Weights & Applications",
    "section": "6.2 Computing fixed distance weight matrix",
    "text": "6.2 Computing fixed distance weight matrix\nWe will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat=TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n6.2.1 Plotting fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st Nearest Neighbours\")\nplot(k1, coords, add=TRUE, col='red', length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance Link\")\nplot(wm_d62, coords, add=TRUE, pch=19, cex=0.6)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "title": "Spatial Weights & Applications",
    "section": "6.3 Computing adaptive distance weight matrix",
    "text": "6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using the str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n6.3.1 Plotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch=19, cex=0.6, add=TRUE, col=\"red\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-with-row-standardized-weights",
    "title": "Spatial Weights & Applications",
    "section": "9.1 Spatial lag with row-standardized weights",
    "text": "9.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  China Geodetic Coordinate System 2000\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC Service lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667   14100  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981   17727  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592    7525  24143.25\n4 Changde 21102      Li      County      Li 24473   53160  27737.50\n5 Changde 21103   Linli      County   Linli 25554    7031  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137    6981  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "title": "Spatial Weights & Applications",
    "section": "9.2 Spatial lag as a sum of neighbouring values",
    "text": "9.2 Spatial lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\n\nStart by applying a function that will assign a value of 1 per each neigbour – done with lapply.\n\n\n#there is an error here\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nUse lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nWe can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-average",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-average",
    "title": "Spatial Weights & Applications",
    "section": "9.3 Spatial window average",
    "text": "9.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdgpc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_w_avg_gpdgpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;% \n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-sum",
    "href": "Hands-On_Exercise/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-sum",
    "title": "Spatial Weights & Applications",
    "section": "9.4 Spatial window sum",
    "text": "9.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs,\n                       glist = b_weights, \n                       style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;% \n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1,ncol=2)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html",
    "title": "In-class Exercise 05",
    "section": "",
    "text": "There can be a lot of robust discussions surrounding statistical analysis of Spatial weights, which assesses the strength of interaction (combined effect of correlation coefficient and weights)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#spatial-weights-applications",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#spatial-weights-applications",
    "title": "In-class Exercise 05",
    "section": "",
    "text": "There can be a lot of robust discussions surrounding statistical analysis of Spatial weights, which assesses the strength of interaction (combined effect of correlation coefficient and weights)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#importing-study-area",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#importing-study-area",
    "title": "In-class Exercise 05",
    "section": "3.1 Importing study area",
    "text": "3.1 Importing study area"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#converging-to-owin-object",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#converging-to-owin-object",
    "title": "In-class Exercise 05",
    "section": "3.2 Converging to owin object",
    "text": "3.2 Converging to owin object"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GA",
    "section": "",
    "text": "JEZELEI MANANGAN\n    Penultimate Year, BSc Information Systems SMU\n    \n      Explore my work and see how I turn complex datasets into actionable insights. Whether you’re interested in GIS, remote sensing, or spatial analysis, you’ll find a collection of projects that demonstrate my skills in R and newfound knowledge in geospatial analytics.\n    \n  \n\n\n\n\n\nHands-On Exercise 01\n\n\nBuilding Block 1: Geospatial Data Science with R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 02\n\n\nBuilding Block 2: Thematic Mapping & GeoVisualization with R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 03\n\n\nBuilding Block 3: Spatial Point Pattern Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 04\n\n\nBuilding Block 4: Spatial-Temporal Point Pattern Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 05\n\n\nBuilding Block 5: Network Constrainted Spatial Point Pattern Analysis"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx02/data/MPSZ-2019.html",
    "href": "In-Class_Exercise/InClassEx02/data/MPSZ-2019.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "href": "In-Class_Exercise/InClassEx04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\nWe will work with functions in the spNetwork package:\n\nto derive network kernel density estimation (NKDE), and\nto perform network G-function and k-function analysis"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#preparing-the-lixels-objects",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#preparing-the-lixels-objects",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "6.1 Preparing the lixels objects",
    "text": "6.1 Preparing the lixels objects"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#generating-line-centre-points",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#generating-line-centre-points",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "6.2 Generating line centre points",
    "text": "6.2 Generating line centre points"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#performing-nkde",
    "href": "Hands-On_Exercise/Hands-on_Ex04/Hands-on_Ex04.html#performing-nkde",
    "title": "Network Constrained Spatial Point Patterns Analysis",
    "section": "6.3 Performing NKDE",
    "text": "6.3 Performing NKDE"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html",
    "title": "In-class Exercise 04",
    "section": "",
    "text": "The specific questions we would like to answer are:\n\nare the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?\nif the answer is NO, where and when the observed forest fire locations tend to cluster?"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#importing-study-area",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#importing-study-area",
    "title": "In-class Exercise 04",
    "section": "3.1 Importing study area",
    "text": "3.1 Importing study area\nIn this section, st_read() of sf package will be used to import the two geospatial data sets mentioned in previous section into R environment.\nKepulauan_Bangka_Belitung\n\nkbb &lt;- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") \n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nLooking further into the dataset, we notice that the coordinates have Polygon Z Feature.\n\nBefore proceeding, we need to dissolve the boundaries, and check for multi-polygon features. In this case, Polygon Z is not needed and may interfere with further analysis\n\nGroup Z boundaries up\nRemove the Z value\nTransform the projection\n\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;% \n  st_union() %&gt;% \n  st_zm(drop = TRUE, what=\"ZM\") %&gt;% \n  st_transform(crs=32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#converging-to-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#converging-to-owin-object",
    "title": "In-class Exercise 04",
    "section": "3.2 Converging to owin object",
    "text": "3.2 Converging to owin object\nNext, as.owin() is used to convert kbb into an owin object.\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\nNext, class() is used to confim if the output is indeed an owin object\n\nclass(kbb_owin)\n\n[1] \"owin\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#overall-plot",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#overall-plot",
    "title": "In-class Exercise 04",
    "section": "5.1 Overall Plot",
    "text": "5.1 Overall Plot\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_bubbles(alpha = 0.5, size = 0.05) + \n  tm_layout(main.title = \"Forest Fire Distribution in Kepulauan & Bangka Belitung\", \n            )"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#visualizing-geographic-distribution-of-forest-fires-by-month",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#visualizing-geographic-distribution-of-forest-fires-by-month",
    "title": "In-class Exercise 04",
    "section": "5.2 Visualizing Geographic Distribution of Forest Fires by Month",
    "text": "5.2 Visualizing Geographic Distribution of Forest Fires by Month\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_dots(alpha = 0.5, size = 0.1) + \n  tm_layout(main.title = \"Forest Fire Distribution by Month Factor in Kepulauan & Bangka Belitung\", \n            ) + \n  tm_facets(by=\"Month_fac\", \n            free.coords=FALSE,\n            drop.units=TRUE)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#extracting-forest-fires-by-month",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#extracting-forest-fires-by-month",
    "title": "In-class Exercise 04",
    "section": "6.1 Extracting Forest fires by month",
    "text": "6.1 Extracting Forest fires by month\nThe code chunk below is used to remofe the unwanted fields from fire_sf data.frame. This is because as.ppp() only need the mark field and geometry field from the input sf data.frame\n\nfire_month &lt;- fire_sf %&gt;% \n  select(Month_num)\nclass(fire_month)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp",
    "title": "In-class Exercise 04",
    "section": "6.2 Creating ppp",
    "text": "6.2 Creating ppp\nThe code chunk below is used to derive a ppp obect called fire_month from fire_month sf data.frame\n\nfire_month_ppp &lt;- as.ppp(fire_month)\n#marks(fire_month_ppp) &lt;- fire_sf$DayofYear\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nst_crs(kbb_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n\nst_crs(fire_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n\n\nThe code chunk is used to check the output is in the correct object class:\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\nIn the code chunk below, we check for duplicates.\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object",
    "title": "In-class Exercise 04",
    "section": "6.3 Including Owin object",
    "text": "6.3 Including Owin object\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\nplot(fire_month_owin)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#computing-spatio-temporal-kde",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#computing-spatio-temporal-kde",
    "title": "In-class Exercise 04",
    "section": "6.4 Computing Spatio-temporal KDE",
    "text": "6.4 Computing Spatio-temporal KDE\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object",
    "title": "In-class Exercise 04",
    "section": "6.5 Plotting the spatio-temporal KDE Object",
    "text": "6.5 Plotting the spatio-temporal KDE Object\nIn the code chunk below, plot() of R base is used to the KDE for between July 2023 - December 2023.\n\npar(mfrow = c(2, 3), fig.width = 12, fig.height = 10)\n\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.width\"\nis not a graphical parameter\n\n\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.height\"\nis not a graphical parameter\n\ntims &lt;- c(7,8,9,10,11,12)\n\nfor(i in tims){\n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE,\n       main=paste(\"KDE at month\",i))\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object",
    "title": "In-class Exercise 04",
    "section": "7.1 Creating ppp object",
    "text": "7.1 Creating ppp object\nIn the code chunk below, DayofYear field is included in the output ppp object.\n\nfire_yday_ppp &lt;- fire_sf %&gt;% \n  select(DayofYear) %&gt;% \n  as.ppp()"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object-1",
    "title": "In-class Exercise 04",
    "section": "7.2 Including Owin object",
    "text": "7.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-1",
    "title": "In-class Exercise 04",
    "section": "7.3 Plotting the Spatio-temporal KDE object",
    "text": "7.3 Plotting the Spatio-temporal KDE object\n\nkde_yday &lt;- spattemp.density(fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\n\ntims &lt;- 10:352\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object-1",
    "title": "In-class Exercise 04",
    "section": "8.1 Creating ppp object",
    "text": "8.1 Creating ppp object\nNow, the STKDE will be derived by using h and lambda values derive in previous step.\n\nkde_yday_plus &lt;- spattemp.density(\n  fire_yday_owin,\n  h = 9000,\n  lambda =19)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday_plus)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 9000 (spatial)\n  lambda = 19 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [2.001642e-19, 2.445724e-12]"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-2",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-2",
    "title": "In-class Exercise 04",
    "section": "8.2 Plotting the Spatio-temporal KDE object",
    "text": "8.2 Plotting the Spatio-temporal KDE object\n\ntemp_gif &lt;- \"forestFires.gif\"\n\n# Check if the GIF already exists\nif (!file.exists(temp_gif)) {\n  # If the GIF doesn't exist, create and save it\n  saveGIF({\n    for(i in tims){\n      plot(kde_yday, i, \n           override.par=FALSE, \n           fix.range=TRUE,\n           main=paste('KDE at Day', i))\n    }\n  }, movie.name = temp_gif, interval = 0.5, ani.width=800, ani.height=600)\n} else {\n  # If the GIF already exists, skip the saving process\n  message(\"GIF already exists, skipping save.\")\n}\n\nGIF already exists, skipping save."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-shapefile-into-r-environment",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-shapefile-into-r-environment",
    "title": "In-class Exercise 05",
    "section": "3.1 Import shapefile into R environment",
    "text": "3.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer=\"Hunan\") %&gt;% \n  st_transform(crs=4490)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-csv-file-into-r-environment",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#import-csv-file-into-r-environment",
    "title": "In-class Exercise 05",
    "section": "3.2 Import csv file into R environment",
    "text": "3.2 Import csv file into R environment\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#performing-relational-join",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#performing-relational-join",
    "title": "In-class Exercise 05",
    "section": "3.3 Performing relational join",
    "text": "3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, hunan2012)\nnames(hunan)\n\n\nhunan &lt;- hunan %&gt;% \n  select(1:3, 7, 15, 16, 31, 32)\n\nTake note of the following when doing relational join\n\nUpper case, Lower case lettering\nCommon columns for joining\nStoring the dataset in rds\n\n\nwrite_rds(hunan, \"data/rds/hunan.rds\")\n\nTo use this data for subsequent analysis:\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan.rds\")\n\nUseful rmarkdown:\n\n#| eval: false\n#| echo:false - does not show on the quarto document rendering"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#mapping-the-gdpc",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#mapping-the-gdpc",
    "title": "In-class Exercise 05",
    "section": "Mapping the GDPC",
    "text": "Mapping the GDPC\nConverting to SpatialPolygonDataFrame\n\nhunan_sp &lt;- hunan_sf %&gt;% \n  as_Spatial()"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#determine-adaptive-bandwidth",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#determine-adaptive-bandwidth",
    "title": "In-class Exercise 05",
    "section": "Determine adaptive bandwidth",
    "text": "Determine adaptive bandwidth\n\nAIC\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,  #same value as the GDP Per Capita (Function = 1)\n                 data=hunan_sp, \n                 approach=\"AIC\", \n                 adaptive=TRUE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nCross Validation\nAIC\n\nUnusual cases here:\n\nLatLong = T -&gt; will transform data into projected coordinate system (in kilometer) vs\nLongLat = T (Great Circle Transformation)\n\n\n\nCross Validation\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data=hunan_sp, \n                 approach=\"CV\", \n                 adaptive=TRUE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#fixed-bandwidth",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#fixed-bandwidth",
    "title": "In-class Exercise 05",
    "section": "Fixed bandwidth",
    "text": "Fixed bandwidth\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data=hunan_sp, \n                 approach=\"CV\", \n                 adaptive=FALSE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n\nYou can use fixed bandwidth (change adaptive=TRUE to adaptive=FALSE)\n\nComputing Geographically Summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp, \n               vars=\"GDPPC\", \n               bw = bw_AIC, \n               kernel=\"bisquare\", \n               adaptive=TRUE,\n               longlat = T)\n\nView(gwstat[[“SDF”]]@data)\n\n\nPreparing the output\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\ncbind() to append the newly derived data [cannot introduce sorting /arrange etc]\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\nWhat is the difference between these neighbours and the sp data\n\nLM, LSD,LVar, LSKe, LCV - L for Local\n\nBased on the output, there is no unique identifier for the data"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx05/InClassEx05.html#visualising-geographically-weighted-summary-statistic",
    "href": "In-Class_Exercise/InClassEx05/InClassEx05.html#visualising-geographically-weighted-summary-statistic",
    "title": "In-class Exercise 05",
    "section": "Visualising geographically weighted summary statistic",
    "text": "Visualising geographically weighted summary statistic\n\ntm_shape(hunan_gstat) + \n  tm_fill(\"GDPPC_LM\", \n          n = 5, \n          style= \"quantile\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Distribution of geographically weighted mean\", \n            main.title.position = \"center\", \n            main.title.size = 2.0, \n            legend.text.size = 1.2,\n            legend.height=1.50, \n            legend.width=1.50,\n            frame=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#objectives",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#objectives",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#packages-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#packages-used",
    "title": "Take-Home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\nThe table below provides a summary of the packages I’ve used for this exercise\n\nThe code chunk below installs and launches the R packages,\n\n\ntidyverse\nfor performing data science tasks such as importing, wrangling and visualising data.\nIt contains the following packages used :\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\n\nsf\npackage provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n\ntmap\nwhich provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\nspatstat\nhas functions useful for Point Pattern Analysis\n\n\nraster\nreads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)\n\n\nspNetwork\nwhich provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n\nsp\n\n\n\ndplyr\n\n\n\nsparr\nprovides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n\nanimation\n\n\n\n\n\npacman::p_load(tidyverse, sf, sp, tmap, spatstat, raster, spNetwork, RColorBrewer,dplyr, sparr,animation, magick)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#datasets-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#datasets-used",
    "title": "Take-Home Exercise 1",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nIn response to the background context of the armed conflict happening in Myanmar, the exercise aims to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\nUpon further research, I’ve managed to come across an interesting resource which maps out the Warscapes in Myanmar. It illustrates the variations in the type of conflict inflicted in different zones of the country\n\nAspatial Data\n\nMYNMAR.CSV dataset derived from Armed Conflict Location & Event Data Project (ACLED), a non-profit organization collecting, analyzing and mapping data on political violence and protest events around the world. (Limited to Jan 2021 - June 2024)\n\n\n\nGeospatial\nThe following datasets were obtained from: https://data.humdata.org/organization/mimu\n\nMyanmar Country Boundaries MIMU\nMyanmar State_Region Boundaries MIMU\nPoints of Interest from OpenStreetMap, depicting different categories of features mapped by the OSM community. It depicts various categories such as : public services and infrastructure, emergency and safety locations, amenities etc.\n\nThis additional dataset from OpenStreetMap is crucial for analyzing armed conflict in Myanmar as it provides detailed geographic information on key locations such as public services, infrastructure, and emergency and safety sites. Understanding the distribution of these points of interest helps in assessing the impact of conflict on civilian infrastructure, access to essential services, and the safety of affected populations. Furthermore, it may aid in planning humanitarian assistance, evacuation routes, and monitoring areas of strategic importance during the conflict through data insights.\nFor the purposes of this exercise, we will focus on the State/Region boundaries, seeing as the conflict is generally explored in this manner (as inferred from the given references in the Take Home Exercise Overview). This is represented by the first administrative level (admin1). Myanmar is divided into 7 states and 7 regions (plus the Union Territory of Naypyidaw).\nThese boundaries are politically and administratively significant. Different states (e.g., Kachin, Rakhine, Shan) and regions have distinct ethnic compositions and different conflict dynamics, making this level critical for understanding broader conflict patterns."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#importing-spatial-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#importing-spatial-data",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Importing Spatial Data",
    "text": "3.1 Importing Spatial Data\n\n1. Myanmar CSV\nUsing read_csv to import the data in the MYANMAR.CSV file, which is the ACLED Dataset detailing armed conflict in Myanmar:\n\narmed_conflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck and transform the CRS of the ACLED Dataset:\n\ncolnames(armed_conflict_data)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\n\n\narmed_conflict &lt;- st_as_sf(armed_conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;% \n  st_transform(armed_conflict, crs=32647)\n\n\n\n2. Country, State, Region, District Boundaries\nUsing the st_read function, we will import data from the State & Region Sub-boundary dataset to visualize Myanmar’s landscape. We will focus our analysis on the State_Region Level (Admin1)\n\nstate_region_sf &lt;-  st_read(dsn=\"data/geospatial/stateRegion\", layer \n=\"mmr_polbnda_adm1_250k_mimu_1\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/stateRegion' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\ndistrict_sf &lt;- st_read(dsn=\"data/geospatial/district\", layer \n=\"mmr_polbnda_adm2_250k_mimu\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/district' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nAfter importing the dataset, we will plot to see the boundaries of the State & Regions of Myanmar. The plot() function is used to plot the geometry of the sf object. The st_geometry() function is used to extract the geometry of the state_region_sf object.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_polygons() + \n  tm_text(\"ST\", size =0.9, just=\"center\")\n\n\n\n\n\n\n\ntm_layout(frame=FALSE)\n\n$tm_layout\n$tm_layout$frame\n[1] FALSE\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\n\n3. Points of Interest\nFrom here on out, we will denote points-of-interest as POI.\nI will load the corresponding shapefile:\n\npoi_sf &lt;- st_read(dsn = \"data/geospatial/pointsOfInterest\", layer = \"hotosm_mmr_points_of_interest_points_shp\") %&gt;%\n  st_set_crs(4326) %&gt;%  \n  st_transform(crs = 32647)  \n\nReading layer `hotosm_mmr_points_of_interest_points_shp' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/pointsOfInterest' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56187 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 92.15357 ymin: 9.756896 xmax: 101.1515 ymax: 28.36754\nCRS:           NA\n\n\n\nst_crs(poi_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\ncolnames(poi_sf)\n\n [1] \"name\"       \"name_en\"    \"amenity\"    \"man_made\"   \"shop\"      \n [6] \"tourism\"    \"opening_ho\" \"beds\"       \"rooms\"      \"addr_full\" \n[11] \"addr_house\" \"addr_stree\" \"addr_city\"  \"source\"     \"name_my\"   \n[16] \"osm_id\"     \"osm_type\"   \"geometry\"  \n\n\nBased on the unique amenities, those that would be relevant in analyzing armed conflict effects in Myanmar would be : “hospital” , “refugee_site”, “Health centre” , “clinic”:\n\npoi_sf &lt;- poi_sf %&gt;% \n  mutate(amenity = str_to_lower(amenity)) %&gt;% \n  filter(amenity %in% c(\"refugee_site\", \"hospital\", \"health center\")) %&gt;% \n  dplyr::select(name_en, amenity, geometry)\n\npoi_sf\n\nSimple feature collection with 617 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -211935.1 ymin: 1103190 xmax: 697952 ymax: 3026108\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                         name_en  amenity                 geometry\n1                           &lt;NA&gt; hospital POINT (439165.5 1562018)\n2       Kalar Chaunggyi Hospital hospital POINT (262988.5 1908198)\n3                  militry O.P.T hospital POINT (238995.6 2440150)\n4           Myint Mo Oo Hospital hospital POINT (414147.5 1556093)\n5             Chan Myae Hospital hospital POINT (412546.6 1555811)\n6              Mediland Hospital hospital POINT (412151.4 1557561)\n7  Traditional Medicine Hospital hospital POINT (411729.3 1557083)\n8                           &lt;NA&gt; hospital POINT (458901.2 1144896)\n9              Kra Buri Hospital hospital POINT (475772.4 1149467)\n10        Dawei General Hospital hospital POINT (413966.3 1556630)\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) +\n  tm_polygons(alpha=0.5) + \n  tm_shape(poi_sf) +\n  tm_dots(col = \"amenity\", palette = \"Set1\",\n          title=\"Amenity Type\") +\n  tm_layout(main.title = \"Distribution of Healthcare Infrastructure & Amenities\", \n            main.title.position = c(\"center\", \"top\")\n  ) + \n  tm_layout(legend.outside=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#data-preparation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nBefore a thematic map can be prepared, we have to prepare a data table which includes the variables event types, focused on : Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nstr(armed_conflict)\n\nsf [42,608 × 30] (S3: sf/tbl_df/tbl/data.frame)\n $ event_id_cnty     : chr [1:42608] \"MMR64313\" \"MMR64320\" \"MMR64321\" \"MMR64322\" ...\n $ event_date        : chr [1:42608] \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" ...\n $ year              : num [1:42608] 2024 2024 2024 2024 2024 ...\n $ time_precision    : num [1:42608] 1 1 1 1 1 1 1 1 1 1 ...\n $ disorder_type     : chr [1:42608] \"Political violence\" \"Political violence\" \"Political violence\" \"Strategic developments\" ...\n $ event_type        : chr [1:42608] \"Battles\" \"Battles\" \"Battles\" \"Strategic developments\" ...\n $ sub_event_type    : chr [1:42608] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Change to group/activity\" ...\n $ actor1            : chr [1:42608] \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"Military Forces of Myanmar (2021-)\" ...\n $ assoc_actor_1     : chr [1:42608] \"MDA - AGF: Madaya - The Authentic Genes Force; SSTF: Security & Special Task Force CDM People's Police\" NA NA NA ...\n $ inter1            : num [1:42608] 3 3 3 1 3 1 1 2 1 1 ...\n $ actor2            : chr [1:42608] \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" NA ...\n $ assoc_actor_2     : chr [1:42608] NA NA NA NA ...\n $ inter2            : num [1:42608] 1 1 1 0 1 0 2 1 2 2 ...\n $ interaction       : num [1:42608] 13 13 13 10 13 10 12 12 12 12 ...\n $ civilian_targeting: chr [1:42608] NA NA NA NA ...\n $ iso               : num [1:42608] 104 104 104 104 104 104 104 104 104 104 ...\n $ region            : chr [1:42608] \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" ...\n $ country           : chr [1:42608] \"Myanmar\" \"Myanmar\" \"Myanmar\" \"Myanmar\" ...\n $ admin1            : chr [1:42608] \"Mandalay\" \"Mandalay\" \"Mandalay\" \"Sagaing\" ...\n $ admin2            : chr [1:42608] \"Mandalay\" \"Pyinoolwin\" \"Pyinoolwin\" \"Shwebo\" ...\n $ admin3            : chr [1:42608] \"Patheingyi\" \"Singu\" \"Thabeikkyin\" \"Khin-U\" ...\n $ location          : chr [1:42608] \"Aung Tha Pyay\" \"Pin Lel Gyi\" \"Thabeikkyin\" \"Khin-U\" ...\n $ geo_precision     : num [1:42608] 2 1 2 2 2 2 1 1 2 1 ...\n $ source            : chr [1:42608] \"Democratic Voice of Burma; Irrawaddy\" \"Irrawaddy\" \"Irrawaddy\" \"Democratic Voice of Burma; Khit Thit Media\" ...\n $ source_scale      : chr [1:42608] \"National\" \"National\" \"National\" \"Subnational-National\" ...\n $ notes             : chr [1:42608] \"On 30 June 2024, near Aung Tha Pyay village (Patheingyi township, Mandalay district, Mandalay region), a combin\"| __truncated__ \"On 30 June 2024, in Pin Lel Gyi village (Singu township, Pyinoolwin district, Mandalay region), the People's De\"| __truncated__ \"On 30 June 2024, in Thabeikkyin township (Pyinoolwin district, Mandalay region), the People's Defense Force - M\"| __truncated__ \"Change to armed group: On 30 June 2024, in Khin-U town (Khin-U township, Shwebo district, Sagaing region), a mi\"| __truncated__ ...\n $ fatalities        : num [1:42608] 0 0 0 0 0 0 0 2 0 0 ...\n $ tags              : chr [1:42608] NA NA NA NA ...\n $ timestamp         : num [1:42608] 1.72e+09 1.72e+09 1.72e+09 1.72e+09 1.72e+09 ...\n $ geometry          :sfc_POINT of length 42608; first list element:  'XY' num [1:2] 214961 2452068\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"event_id_cnty\" \"event_date\" \"year\" \"time_precision\" ...\n\n\nHere is a visual overview of the 4 different types of Armed Conflict (based on event_types) :\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_borders(col = \"black\") + \n  tm_shape(armed_conflict) + \n  tm_dots(col = \"event_type\", palette = \"Set1\", size = 0.01, alpha = 0.5) +\n  tm_facets(by = \"event_type\") + \n  tm_layout(title = \"Armed Conflict in Myanmar (Jan 2021 - Jun 2024)\", \n            legend.outside = TRUE) +\n  tm_legend(title = \"Event Type\")\n\n\n\n\n\n\n\n\nFrom the plots above, we see that armed conflict even types seem to concentrate in the North-west region, particularly at the boundary of Sagaing, Mandalay and Magwe state, which we will zoom in on.\nIn order to group and have a sensing of the effects of armed conflict, we will aggregate based on fatalities to see a quick overview as well as their state (administrative boundary 1) :\n\narmed_conflict_fatalities &lt;- armed_conflict %&gt;% \n  group_by(admin1, event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Summarize fatalities based on the administrative boundary (stateRegion)\n  group_by(admin1) %&gt;% \n  mutate(total_fatalities_admin1 = sum(total_fatalities)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Arrange admin1 by descending order of fatalities and then the event type \n  arrange(desc(total_fatalities_admin1), admin1, desc(total_fatalities)) \n\n`summarise()` has grouped output by 'admin1'. You can override using the\n`.groups` argument.\n\narmed_conflict_fatalities\n\nSimple feature collection with 72 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 72 × 5\n   admin1   event_type                total_fatalities                  geometry\n   &lt;chr&gt;    &lt;chr&gt;                                &lt;dbl&gt;          &lt;MULTIPOINT [m]&gt;\n 1 Sagaing  Battles                              11225 ((-16397.05 2576482), (-…\n 2 Sagaing  Explosions/Remote violen…             5161 ((-13753.92 2572123), (-…\n 3 Sagaing  Violence against civilia…             2513 ((-13808.2 2533298), (-1…\n 4 Sagaing  Strategic developments                  40 ((-16397.05 2576482), (-…\n 5 Magway   Battles                               3910 ((-14448.48 2310133), (-…\n 6 Magway   Explosions/Remote violen…             1701 ((-11811.97 2503484), (-…\n 7 Magway   Violence against civilia…              544 ((-9822.857 2409014), (-…\n 8 Magway   Strategic developments                  17 ((-11256.98 2417070), (-…\n 9 Mandalay Battles                               1658 ((69197.66 2321843), (84…\n10 Mandalay Explosions/Remote violen…             1051 ((75228.96 2349261), (96…\n# ℹ 62 more rows\n# ℹ 1 more variable: total_fatalities_admin1 &lt;dbl&gt;\n\n\nBased on the above result, we see that the fatalities are concentrated in are concentrated in these 3 states: Sagaing, Magway and Mandalay.\nThe code chunk below explores the data further:\n\narmed_conflict_fatalities_by_event_type &lt;- armed_conflict %&gt;% \n  group_by(event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\narmed_conflict_fatalities_by_event_type\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 4\n  event_type              total_fatalities event_count                  geometry\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;int&gt;          &lt;MULTIPOINT [m]&gt;\n1 Battles                            35924       12049 ((-207135 2358896), (-20…\n2 Explosions/Remote viol…            11562       12208 ((-208804.4 2357274), (-…\n3 Violence against civil…             6478        6225 ((-206931.7 2359490), (-…\n4 Strategic developments               127       12126 ((-206931.7 2359490), (-…\n\n\nBefore doing so, let’s explore the nuances in the naming convention to understand a potential reason why conflict arises:\n\narea_names &lt;- state_region_sf %&gt;% \n  distinct(ST_RG) %&gt;% \n  pull(ST_RG)\n\narea_names\n\n[1] \"Region\"          \"State\"           \"Union Territory\"\n\n\n\nKey Differences\n\nState:\n\nRepresents areas predominantly inhabited by ethnic minorities, each with their own cultural and historical significance.\nOften involved in ethnic conflicts, seeking more autonomy.\n\nRegion:\n\nRepresents the Bamar-majority areas, which have more economic and political power.\nTypically less conflict-prone compared to states.\n\nUnion Territory:\n\nA special administrative area directly controlled by the central government (e.g., the capital region).\nNo local parliament or legislative autonomy."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#subsetting-the-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#subsetting-the-data",
    "title": "Take-Home Exercise 1",
    "section": "3.3 Subsetting the data:",
    "text": "3.3 Subsetting the data:\n\n3.3.1 Data Processing of subsetted dataset - MYANMAR.CSV\nWe’ll now process the data to see the corresponding fatalities with the different event types mentioned above, Battles, Explosions/Remote violence, Strategic developments and Violence against civilians.\nFrom this point forward, we will focus on the event_type of ‘Battles’ and sub_event_type of ‘Armed Clash’ as it would be interesting to analyse given that it has the most event counts and fatalities as aggregated in the code above:\n\nSince we are interested in deriving the quarterly KDE layers, we will convert the event_date column (currently in [chr] format), into a Date object that can be used for further analysis.\n\n\narmed_conflict_sf &lt;- armed_conflict %&gt;%\n  filter(event_type == \"Battles\") %&gt;% \n  filter(admin1 %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  dplyr::select(1:3, 5:8, 11, 15, 19, 20, 27, 29, 30)\n\nSave the intermediate dataset to rds:\n\nwrite_rds(armed_conflict_sf, \"data/rds/armed_conflict_sf.rds\")\n\nWe change the CRS to 32647 given that it is in the North Western Zone of Myanmar:\n\narmed_conflict_sf &lt;- read_rds(\"data/rds/armed_conflict_sf.rds\") %&gt;% \n  st_transform(crs = 32647) \n\n\nhead(armed_conflict_sf)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 146213 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 14\n  event_id_cnty event_date   year disorder_type event_type sub_event_type actor1\n  &lt;chr&gt;         &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n1 MMR64313      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n2 MMR64320      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n3 MMR64321      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n4 MMR64323      30 June 20…  2024 Political vi… Battles    Armed clash    PKDF …\n5 MMR64314      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n6 MMR64319      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n# ℹ 7 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\narmed_conflict_sf &lt;- armed_conflict_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) %&gt;% \n  mutate(quarter = paste0(\"Q\", quarter(event_date), \" \", year(event_date)))\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_conflict_battles &lt;- armed_conflict_sf %&gt;% \n  group_by(event_type, sub_event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n    filter(event_type == \"Battles\") %&gt;% \n    ungroup() \n\n`summarise()` has grouped output by 'event_type'. You can override using the\n`.groups` argument.\n\narmed_conflict_battles\n\nSimple feature collection with 3 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 5\n  event_type sub_event_type                      total_fatalities event_count\n  &lt;chr&gt;      &lt;chr&gt;                                          &lt;dbl&gt;       &lt;int&gt;\n1 Battles    Armed clash                                    16750        4681\n2 Battles    Government regains territory                       0           1\n3 Battles    Non-state actor overtakes territory               43          15\n# ℹ 1 more variable: geometry &lt;GEOMETRY [m]&gt;\n\n\n\ntotal_deaths &lt;- armed_conflict %&gt;% summarize(total_fatalities = sum(fatalities, na.rm=TRUE),\n            event_count = n())\n\ntotal_deaths\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 3\n  total_fatalities event_count                                          geometry\n             &lt;dbl&gt;       &lt;int&gt;                                  &lt;MULTIPOINT [m]&gt;\n1            54091       42608 ((-208804.4 2357274), (-207135 2358896), (-20693…\n\n\nOut of 54091 deaths for the whole of Myanmar for Jan 2021 - Jun 2024, encompassing all event_types and sub_event_types recorded, deaths from event_type == “Battles” , specifically the sub_event_type of “Armed clash” has lead to 34581 deaths in the states of Myanmar alone, accounting for ~63.9% of deaths.\n\n\n3.3.1 Data Processing of subsetted dataset - State_Region_sf\n\nstate3_sf &lt;- state_region_sf %&gt;% \n  filter(ST %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  st_transform(crs = 32647)\n\nstate3_sf\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -37628.21 ymin: 2086865 xmax: 308341.4 ymax: 3029739\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID       ST ST_PCODE  ST_RG          ST_MMR PCode_V\n1        8   Magway   MMR009 Region   မကွေးတိုင်းဒေသကြီး     9.4\n2        9 Mandalay   MMR010 Region မန္တလေးတိုင်းဒေသကြီး     9.4\n3       13  Sagaing   MMR005 Region  စစ်ကိုင်းတိုင်းဒေသကြီး     9.4\n                        geometry\n1 MULTIPOLYGON (((-1717.607 2...\n2 MULTIPOLYGON (((208184.3 26...\n3 MULTIPOLYGON (((275295.6 30...\n\n\n\nplot(state3_sf)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#filtering-down-to-battles-armed-clash",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#filtering-down-to-battles-armed-clash",
    "title": "Take-Home Exercise 1",
    "section": "3.4 Filtering down to Battles, Armed Clash",
    "text": "3.4 Filtering down to Battles, Armed Clash\n\n3.4.1 Analyzing Densities based on fatalities and event_count\nCalculating area of each state in km^2:\n\nstate3_sf &lt;- state3_sf %&gt;% \n  mutate(area_km2 = st_area(geometry) / 1e6)\n\nDensity for Fatalities & Event_count in the area:\n\nevent_density_data &lt;- armed_conflict_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    total_events = n(),               \n    total_fatalities = sum(fatalities, na.rm = TRUE)  \n  ) %&gt;% \n  ungroup()\n\nMerge the event data with the state-level area data\n\nevent_density_data\n\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 4\n  admin1   total_events total_fatalities                                geometry\n  &lt;chr&gt;           &lt;int&gt;            &lt;dbl&gt;                        &lt;MULTIPOINT [m]&gt;\n1 Magway           1115             3910 ((-14448.48 2310133), (-11778.42 23314…\n2 Mandalay          602             1658 ((69197.66 2321843), (84966.22 2353705…\n3 Sagaing          2980            11225 ((-16397.05 2576482), (-13816.45 25496…\n\n\n\nevent_density_data &lt;- state3_sf %&gt;%\n  st_join(event_density_data, by = \"admin1\")\n\n\ncolnames(event_density_data)\n\n [1] \"OBJECTID\"         \"ST\"               \"ST_PCODE\"         \"ST_RG\"           \n [5] \"ST_MMR\"           \"PCode_V\"          \"area_km2\"         \"admin1\"          \n [9] \"total_events\"     \"total_fatalities\" \"geometry\"        \n\n\n\nevent_density_data &lt;- event_density_data %&gt;%\n  mutate(\n    event_density = total_events / area_km2,         \n    fatality_density = total_fatalities / area_km2    \n  )\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Plot event density\ntm_shape(event_density_data) +\n  tm_polygons(\"event_density\", title = \"Event Density (Events/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n# Plot fatality density\ntm_shape(event_density_data) +\n  tm_polygons(\"fatality_density\", title = \"Fatality Density (Fatalities/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.1 Subsetting the data:\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_clash_sf &lt;- armed_conflict_sf %&gt;% \n  filter(event_type == \"Battles\", sub_event_type ==\"Armed clash\") %&gt;% \n  group_by(quarter, event_type, sub_event_type, admin1, geometry, event_date) %&gt;% \n  summarize(\n      `FATALITIES` = sum(fatalities, na.rm=TRUE), \n      event_count = n()\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'quarter', 'event_type', 'sub_event_type',\n'admin1', 'geometry'. You can override using the `.groups` argument.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-object-to-sp-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-object-to-sp-object",
    "title": "Take-Home Exercise 1",
    "section": "3.5 Converting sf Object to sp Object",
    "text": "3.5 Converting sf Object to sp Object\n\narmed_clash_sp &lt;- as(armed_clash_sf, \"Spatial\")\nstate3_sp &lt;- as(state3_sf, \"Spatial\")\n\n\ncolnames(armed_clash_sf)\n\n[1] \"quarter\"        \"event_type\"     \"sub_event_type\" \"admin1\"        \n[5] \"geometry\"       \"event_date\"     \"FATALITIES\"     \"event_count\"   \n\n\n\nunique_coordinates &lt;- armed_clash_sf %&gt;%\n  summarise(unique_count = n_distinct(geometry))  # Directly on geometry column\n\n# For total event count\ntotal_armed_clash_count &lt;- armed_clash_sf %&gt;% \n  summarise(event_count = sum(event_count, na.rm = TRUE))\n\n# Print results\nprint(unique_coordinates)\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  unique_count                                                          geometry\n         &lt;int&gt;                                                  &lt;MULTIPOINT [m]&gt;\n1         1547 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), …\n\nprint(total_armed_clash_count)  \n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  event_count                                                           geometry\n        &lt;int&gt;                                                   &lt;MULTIPOINT [m]&gt;\n1        4681 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), (…\n\n\nOut of 4681 Armed Clash conflict events, only 1547 unique coordinate points are recorded, indicating the that armed clashes occurred more than once for the coordinate points in general."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "3.6 Converting sp Object to spatstat’s ppp Format",
    "text": "3.6 Converting sp Object to spatstat’s ppp Format\n\nglimpse(armed_clash_sp)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 4594 obs. of  7 variables:\n  .. ..$ quarter       : chr [1:4594] \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" ...\n  .. ..$ event_type    : chr [1:4594] \"Battles\" \"Battles\" \"Battles\" \"Battles\" ...\n  .. ..$ sub_event_type: chr [1:4594] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Armed clash\" ...\n  .. ..$ admin1        : chr [1:4594] \"Magway\" \"Magway\" \"Magway\" \"Mandalay\" ...\n  .. ..$ event_date    : Date[1:4594], format: \"2021-03-30\" \"2021-03-31\" ...\n  .. ..$ FATALITIES    : num [1:4594] 1 1 4 1 2 4 6 1 2 5 ...\n  .. ..$ event_count   : int [1:4594] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:4594, 1:2] -4389 -4389 -6592 97374 101220 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -16397 2108023 255317 2987342\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\narmed_clash_ppp &lt;- as.ppp(armed_clash_sf)\n\nWarning in as.ppp.sf(armed_clash_sf): only first attribute column is used for\nmarks\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\nplot(armed_clash_ppp)\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#handling-duplicated-points",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#handling-duplicated-points",
    "title": "Take-Home Exercise 1",
    "section": "3.7 Handling Duplicated Points",
    "text": "3.7 Handling Duplicated Points\nWe check for duplication in the ppp object using the code chunk below. Before processing, we need to account for the fact that we have divided the data into quarters, which would result in the event_types at the same location being treated as separate points, but spatstat recognizing them as duplicates as they share the exact same coordinates.\n\nany(duplicated(armed_clash_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(armed_clash_ppp) &gt; 1)\n\n[1] 2503\n\n\nTo account for the number of locations which have more than one point event, we can use the code chunk below:\n\ncoords &lt;- st_coordinates(armed_clash_sf)\ncoords_df &lt;- as.data.frame(coords)\n\nlocation_counts &lt;- coords_df %&gt;% \n  group_by(X,Y) %&gt;% \n  summarize(count = n()) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'X'. You can override using the `.groups`\nargument.\n\nlocations_with_multiple_events &lt;- location_counts %&gt;% \n  filter(count &gt; 1)\n\ncount_locations_with_multiple_events &lt;- nrow(locations_with_multiple_events)\ncount_locations_with_multiple_events\n\n[1] 607\n\n\nOut of 1547 unique coordinate points, 515 have more than one conflict events occuring throughout the time period of Jan 2021 - Jun 2024, which could account for the 2503 duplicate count above.\n\ntmap_mode('view')\n\ntm_shape(armed_clash_sf) + \n  tm_dots(alpha = 0.7, size = 0.01)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "title": "Take-Home Exercise 1",
    "section": "3.8 Spotting Duplicate points from the map shown",
    "text": "3.8 Spotting Duplicate points from the map shown\nTo address the duplicate points, which largely arises due to the temporal aspect of the data we will use Jittering (adding a small perturbation to the duplicate points so that they do not occupy the exact same space)\nThe code chunk below implements the jittering approach.\n\narmed_clash_jitter &lt;- rjitter(armed_clash_ppp, \n                                 retry=TRUE, \n                                 nsim=1, \n                                 drop=TRUE)\n\nCheck for duplicated points in the data:\n\nany(duplicated(armed_clash_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Combining point events object and owin object",
    "text": "4.1 Combining point events object and owin object\nIn the next step of geospatial data wrangling, we extract armed conflict (armed clash as a subset of Battles) events located within Myanmar using this code chunk:\n\narmed_clash_myn_ppp &lt;- armed_clash_ppp[states3_owin]\n\nThe output combined both the point and polygon feature in one ppp object class as shown below:\n\nplot(armed_clash_myn_ppp, cex = 0.4, main=\"Spatial Distribution of Battles (Armed Clash) in Myanmar\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(armed_clash_myn_ppp)\n\nMarked planar point pattern:  4594 points\nAverage intensity 2.703969e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     4594 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 10179 vertices\nenclosing rectangle: [-37628.21, 308341.37] x [2086865.1, 3029739.1] units\n                     (346000 x 942900 units)\nWindow area = 1.69898e+11 square units\nFraction of frame area: 0.521"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#kernel-density-estimation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nThis section with perform first-order SPPA and focus on :\n\nDeriving KDE for visualizing and exploring the intensity of point processes\nPerform Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour Statistics\n\n\n5.1.1 Computing KDE using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n\nkde_armed_clash_myn_bw &lt;- density(armed_clash_myn_ppp, \n                                     sigma=bw.diggle, \n                                     edge=TRUE,\n                                     kernel=\"gaussian\")\n\n\nplot(kde_armed_clash_myn_bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp)\nsigma_diggle\n\n   sigma \n84.63052 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, we need to rescale.ppp() unit from meter to kilometer to prevent interference in the scale as well as the distortion of the bandwith values:\n\narmed_clash_myn_ppp.km &lt;- rescale.ppp(armed_clash_myn_ppp, 1000, \"km\")\n\nWe re-run density() using the rescaled data and plot the output KDE map: (Note the difference between _bw and .bw to denote scaled data)\n\nkde_armed_clash_myn.bw &lt;- density(armed_clash_myn_ppp.km,\n                                     sigma=bw.diggle, \n                                     edge=TRUE, \n                                     kernel=\"gaussian\")\n\nplot(kde_armed_clash_myn.bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp.km)\nsigma_diggle\n\n     sigma \n0.08463052"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Working with different automatic bandwidth methods",
    "text": "6.1 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(armed_clash_myn_ppp.km)\n\n   sigma \n32.05992 \n\n\n\nbw.scott(armed_clash_myn_ppp.km)\n\n sigma.x  sigma.y \n16.84732 26.63314 \n\n\n\nbw.ppl(armed_clash_myn_ppp.km)\n\n   sigma \n3.674435 \n\n\n\nbw.diggle(armed_clash_myn_ppp.km)\n\n     sigma \n0.08463052 \n\n\nThe code chunk beow will be used to compare the output of using the different methods.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States CvL\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States Scott\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States ppl\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States diggleL\"))\n\n\n\n\n\n\n\n\nInterpretation: To summarize given the expectation of multiple clusters in th Myanmar conflict data, I’ll be predominantly utilizing bw.ppl(), well-suited for capturing multiple clusters without overfitting or underfitting, Baddeley et al. (2016). In the case where tighter, isolated clusters are preferred, bw.diggle() will be the sigma used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-kernel-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#working-with-different-kernel-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Working with different kernel methods",
    "text": "6.2 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Fixed vs Adaptive bandwidth for KDE",
    "text": "6.2 Fixed vs Adaptive bandwidth for KDE\nThe choice between automatic and adaptive bandwidth depends on the objectives and nature of our analysis.\n\n6.2.1 Computing KDE by using fixed bandwidth\n\n\n\n\n\n\nFixed Bandwidth\nAdaptive Bandwidth\n\n\n\n\nOffers Consistency across Space: Uniform smoothing across the entire study area.\nVarying Spatial Densities: Showing significant differences in conflict event densities (urban, rural ares), adaptive bandwidth could give a more nuanced understanding\n\n\nGeneral Hotspot Detection: To identify overall hotspots or conflict zones without too much detail\nLocal Hotspot Detection\n\n\n\nBased on our earlier analysis, we received a sigma value of 6. which results in minimal smoothing, meaning the KDE will show more localized patterns, however, this could lead to overfitting, where small clusters are exaggerated and conflict points are more prone to misinterpretation.\nCurrently, as I am unsure of what sigma degree to use, a good starting point would be to calculate the average or median Nearest Neighbour distance between points and use that as an initial value:\n\nmean_distance &lt;- mean(nndist(armed_clash_myn_ppp.km))\n\npar(mfrow=c(1,2))\nkde_diggle &lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.diggle)\nkde_ppl&lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.ppl)\nplot(kde_diggle)\nplot(kde_ppl)\n\n\n\n\n\n\n\n\n\n6.2.2 Computing KDE by using adaptive bandwidth\n\nkde_armed_clash_myn_adaptive &lt;- adaptive.density(armed_clash_myn_ppp.km, \n                                                 method=\"kernel\")\nplot(kde_armed_clash_myn_adaptive)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "title": "Take-Home Exercise 1",
    "section": "6.3 Fixed Bandwith for Quarterly KDE Analysis",
    "text": "6.3 Fixed Bandwith for Quarterly KDE Analysis\n\nKey Considerations for KDE Comparison Across Quarters:\n\nConsistency: For the KDEs to be comparable across different quarters, you need to use the same sigma for all quarters. This ensures that the degree of smoothing is consistent across the time periods, allowing you to make fair comparisons of density patterns over time.\nScale of Patterns: The chosen sigma should be large enough to reveal the relevant spatial patterns without introducing too much noise (from a very small sigma) or losing too much detail (from a very large sigma).\n\n\n\n\n\n\n\n\n\n\nInitial Sigma Value (0.07)\n\nMean Distance (1.6)\n\n\n\n\n\nAdvantages\nDisadvantages\nAdvantages\nDisadvantages\n\n\nCaptures local detail: This smaller sigma will emphasize fine-grained, local patterns, showing small clusters of events that may otherwise be smoothed over with a larger sigma.\nToo small for larger trends: A sigma of 0.18 may result in overfitting, where the KDE highlights every small cluster or isolated event.\nGood balance of local and global patterns: A sigma of 1.6 km (based on average nearest neighbor distance) strikes a balance between capturing local clusters and revealing broader spatial trends. It smooths out small noise while still showing meaningful clusters.\nLess local detail: While the 1.6 km sigma is a good balance, it may not capture very small-scale, localized patterns that might be relevant in specific analyses.\n\n\nGood for high-detail analysis: If your goal is to observe very specific spatial variations within each quarter, this smaller sigma might be more suitable.\nDifficult for comparisons: A very small sigma might highlight differences in individual points rather than overall trends, making it harder to compare the general distributions across quarters.\nBetter for comparisons: Since this sigma is derived from the overall spacing of points in your dataset, it reflects a more general spatial structure. This makes it more suitable for comparing KDE patterns across different quarters, as it ensures that the bandwidth is appropriate for both sparse and dense data, without overemphasizing small differences.\n\n\n\n\nContent adapted from Luc Anselin Spatial Econometrics.\nBased on this analysis, I am more inclined to go with the mean distance calculated for a Fixed Bandwidth, which we will use to compare Battles (Armed clash) across different quarters.\nSimple visualizations through graphs can help us get a better sense of the temporal aspect of when these armed clashes occurred. Since we are dealing with time:\n\narmed_clash_long &lt;- armed_clash_sf %&gt;%\n  arrange(desc(FATALITIES)) %&gt;% \n  pivot_longer(cols = c(FATALITIES, event_count), \n               names_to = \"measure\",             \n               values_to = \"value\")\n\n\nggplot(armed_clash_long, aes(x = value, \n                             y = factor(quarter, levels = sort(unique(quarter))))) + \n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"black\") +  \n  geom_text(data = armed_clash_long %&gt;%\n              group_by(quarter, measure) %&gt;% \n              filter(value == max(value)),  \n            aes(label = round(value, 1)),  \n            position = position_dodge(width = 0.9), \n            vjust = 0.5,  \n            hjust = 4.0,  \n            size = 3,    \n            color = \"white\") + \n  facet_wrap(~measure, scales = \"free_x\") + \n  labs(title = \"Total Fatalities and Event Count by Event Type per Quarter\", \n       x = \"Value\", \n       y = \"Quarter\") + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nquarters &lt;- unique(marks(armed_clash_myn_ppp))\n\npar(mfrow = c(2,2))\n\nfor (q in quarters){\n  quarter_ppp &lt;- armed_clash_myn_ppp[marks(armed_clash_myn_ppp)==q]\n  plot(quarter_ppp, main=paste(\"Spatial Distribution for\", q), cex = 0.5)\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object",
    "text": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object\n\nq1_2021_ppp &lt;- q1_2021_jitter[states3_owin]\nq2_2021_ppp &lt;- q2_2021_jitter[states3_owin]\nq3_2021_ppp &lt;- q3_2021_jitter[states3_owin]\nq4_2021_ppp &lt;- q4_2021_jitter[states3_owin]\n\n# For 2022\nq1_2022_ppp &lt;- q1_2022_jitter[states3_owin]\nq2_2022_ppp &lt;- q2_2022_jitter[states3_owin]\nq3_2022_ppp &lt;- q3_2022_jitter[states3_owin]\nq4_2022_ppp &lt;- q4_2022_jitter[states3_owin]\n\n# For 2023\nq1_2023_ppp &lt;- q1_2023_jitter[states3_owin]\nq2_2023_ppp &lt;- q2_2023_jitter[states3_owin]\nq3_2023_ppp &lt;- q3_2023_jitter[states3_owin]\nq4_2023_ppp &lt;- q4_2023_jitter[states3_owin]\n\n# For 2024\nq1_2024_ppp &lt;- q1_2024_jitter[states3_owin]\nq2_2024_ppp &lt;- q2_2024_jitter[states3_owin]"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#rescale.ppp",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#rescale.ppp",
    "title": "Take-Home Exercise 1",
    "section": "7.2 Rescale.ppp()",
    "text": "7.2 Rescale.ppp()\n\n# For 2021\nq1_2021_ppp.km = rescale.ppp(q1_2021_ppp, 1000, \"km\")\nq2_2021_ppp.km = rescale.ppp(q2_2021_ppp, 1000, \"km\")\nq3_2021_ppp.km = rescale.ppp(q3_2021_ppp, 1000, \"km\")\nq4_2021_ppp.km = rescale.ppp(q4_2021_ppp, 1000, \"km\")\n\n# For 2022\nq1_2022_ppp.km = rescale.ppp(q1_2022_ppp, 1000, \"km\")\nq2_2022_ppp.km = rescale.ppp(q2_2022_ppp, 1000, \"km\")\nq3_2022_ppp.km = rescale.ppp(q3_2022_ppp, 1000, \"km\")\nq4_2022_ppp.km = rescale.ppp(q4_2022_ppp, 1000, \"km\")\n\n# For 2023\nq1_2023_ppp.km = rescale.ppp(q1_2023_ppp, 1000, \"km\")\nq2_2023_ppp.km = rescale.ppp(q2_2023_ppp, 1000, \"km\")\nq3_2023_ppp.km = rescale.ppp(q3_2023_ppp, 1000, \"km\")\nq4_2023_ppp.km = rescale.ppp(q4_2023_ppp, 1000, \"km\")\n\n# For 2024\nq1_2024_ppp.km = rescale.ppp(q1_2024_ppp, 1000, \"km\")\nq2_2024_ppp.km = rescale.ppp(q2_2024_ppp, 1000, \"km\")\n\nIn the code chunk below, we will compute the KDE of each quarter of each year. bw.diggle method is used to derive the bandwidth of each KDE:\n\npar(mfrow = c(4, 4), mar = c(2, 2, 2, 2)) \n\n# 2021 plots\nplot(density(q1_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2021\")\n\nplot(density(q2_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2021\")\n\n\nplot(density(q3_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2021\")\n\nplot(density(q4_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2021\")\n\n\n# 2022 plots\nplot(density(q1_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2022\")\n\nplot(density(q2_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2022\")\n\n\nplot(density(q3_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2022\")\n\nplot(density(q4_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2022\")\n\n# 2023 plots\nplot(density(q1_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2023\")\n\nplot(density(q2_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2023\")\n\n\nplot(density(q3_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2023\")\n\nplot(density(q4_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2023\")\n\n# 2024 plots\nplot(density(q1_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2024\")\n\nplot(density(q2_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2024\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Take-Home Exercise 1",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(armed_clash_myn_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  armed_clash_myn_ppp.km\nR = 0.26742, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nInterpretation:\n\nThe R-value (0.37315) suggests that the points (armed clashes) are clustered—events tend to occur near each other.\nThe p-value (extremely low) provides very strong evidence against the null hypothesis of randomness. Thus, we conclude that the distribution of armed clashes is not random but instead shows a statistically significant clustered pattern.\n\n\n8.1.1 Clark and Evans Test: Q2 2021\n\nclarkevans.test(q2_2021_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2021_ppp.km\nR = 0.39527, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.2 Clark and Evans Test: Q2 2022\n\nclarkevans.test(q2_2022_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2022_ppp.km\nR = 0.41889, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.3 Clark and Evans Test: Q2 2023\n\nclarkevans.test(q2_2023_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2023_ppp.km\nR = 0.43067, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.4 Clark and Evans Test: Q2 2024\n\nclarkevans.test(q2_2024_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2024_ppp.km\nR = 0.3442, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nReasons to account for the observed pattern:\nBased on the R-value, where lower R values indicate strong clustering, it follows the reasons below:\n\nEscalation of Conflict in the hotspot Area: From 2021 onwards, the area of study has recently experience a military coup in February 2021, which was concentrated as the Tatmadaw (military) cracked down on urban areas and strategic areas. These mentioned states were areas where civilian resistance was particularly strong.\nImplication of Dispersion: This observation is further evidence by the quarterly summation of the deaths by state, where for the same quarters observed below: Q4 2021 - Q2 2022, there was a stark increase in the total_fatalities and event_count, marking the amplification of armed clash battles in the region, accounting for the strong clustering patterns observed from Q2 2021 which showed the strongest clustering out of the 4 quarters assessed and eventual distribution of the conflict towards other areas.\n\n\nquarterly_summary %&gt;% \n  arrange(desc(total_fatalities))\n\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   quarter total_fatalities event_count                                 geometry\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                         &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022             2494         504 ((-11051.37 2410853), (-10908.92 256130…\n 2 Q1 2022             1759         410 ((-13816.45 2549666), (-12383.46 255035…\n 3 Q4 2021             1674         340 ((-12383.46 2550351), (-10581.74 255763…\n 4 Q3 2022             1649         414 ((-14448.48 2310133), (-12383.46 255035…\n 5 Q4 2023             1502         432 ((-13753.92 2572123), (-10781.63 257609…\n 6 Q1 2023             1335         429 ((-9542.333 2376489), (-8200.325 237117…\n 7 Q2 2023             1291         372 ((-10160.54 2446554), (-8954.966 256734…\n 8 Q4 2022             1264         377 ((-10226.14 2411015), (-8954.966 256734…\n 9 Q3 2023              998         428 ((-10171.84 2571422), (-10106 2331539),…\n10 Q3 2021              759         179 ((-13645.89 2571086), (-9197.246 255207…\n11 Q1 2024              757         292 ((-16397.05 2576482), (-13753.92 257212…\n12 Q2 2024              726         279 ((-11281.63 2583340), (-10452.13 257881…\n13 Q2 2021              522         130 ((-13808.2 2533298), (-10226.14 2411015…\n14 Q1 2021               20           8 ((-10581.74 2557635), (-9197.246 255207…\n\n\n\nquarterly_summary_by_state &lt;- armed_clash_sf %&gt;%\n  group_by(quarter, admin1) %&gt;%  # Group by quarter\n  summarise(\n    total_fatalities = sum(FATALITIES, na.rm = TRUE), \n    event_count = n()                               \n  ) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\n`summarise()` has grouped output by 'quarter'. You can override using the\n`.groups` argument.\n\nprint(quarterly_summary_by_state)\n\nSimple feature collection with 42 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 42 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q2 2022 Magway               726         134 ((-11051.37 2410853), (-10745.5…\n10 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n# ℹ 32 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-to-owin-objects",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#converting-sf-to-owin-objects",
    "title": "Take-Home Exercise 1",
    "section": "9.2 Converting sf to owin objects",
    "text": "9.2 Converting sf to owin objects\n\nsagaing_owin = as.owin(sagaing)\nmagway_owin = as.owin(magway)\nmandalay_owin = as.owin(mandalay)\n\n\npar(mfrow=c(1,3))\nplot(sagaing_owin)\nplot(magway_owin)\nplot(mandalay_owin)\n\n\n\n\n\n\n\n\n\n9.2.1 Combining armed clash points and the study area\nBy using the code chunk below, we are able to extract armed clashes that is within the specific region to do our analysis later on.\n\narmed_clash_sng_ppp = armed_clash_jitter[sagaing_owin]\narmed_clash_mgy_ppp = armed_clash_jitter[magway_owin]\narmed_clash_mnd_ppp = armed_clash_jitter[mandalay_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\narmed_clash_sng.km = rescale(armed_clash_sng_ppp, 1000, \"km\")\narmed_clash_mgy.km = rescale(armed_clash_mgy_ppp, 1000, \"km\")\narmed_clash_mnd.km = rescale(armed_clash_mnd_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these 3 study areas and the locations of the battles (armed clashes).\n\npar(mfrow=c(1,3))\nplot(armed_clash_sng.km, main=\"Sagaing\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mgy.km, main=\"Magway\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mnd.km, main=\"Mandalay\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "9.6 Analysing Spatial Point Process Using G-Function",
    "text": "9.6 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I compute the G-function estimation by using Gest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n9.6.1 Computing G-function estimation\n\nG_SNG = Gest(armed_clash_sng_ppp, correction = \"best\")\nplot(G_SNG)\n\n\n\n\n\n\n\n\n\n\n9.6.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_SNG.csr)\n\n\n\n\n\n\n\n\n\n\n9.7 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.In this section, I compute the F-function estimation by using Fest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n\n9.7.1 Computing F-function estimation\n\nF_SNG = Fest(armed_clash_sng_ppp, correction=\"best\")\nplot(F_SNG)\n\n\n\n\n\n\n\n\n\n\n9.7.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Fest, correction = \"all\", nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(F_SNG.csr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Exercise 1",
    "section": "9.8 Analysing Spatial Point Process Using K-Function",
    "text": "9.8 Analysing Spatial Point Process Using K-Function\n\n9.8.1 Computing K-function estimation\n\n#K_SNG = Kest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(K_SNG, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with K-fucntion\n\n#K_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Kest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(K_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Exercise 1",
    "section": "9.9 Analysing Spatial Point Process Using L-Function",
    "text": "9.9 Analysing Spatial Point Process Using L-Function\n\n9.9.1 Computing L-function estimation\n\n#L_SNG = Lest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(L_SNG, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with L-fucntion\n\n#L_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Lest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(L_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:",
    "text": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:\n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \ntm_shape(armed_clash_sagaing) + \n  tm_dots(size = 0.1, alpha = 0.5) + \ntm_facets(by=\"quarter\", \n          free.coords=FALSE,\n          drop.units = TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "title": "Take-Home Exercise 1",
    "section": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground",
    "text": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground\nAlong with the quarterly visualization of the armed clashes, we see a corresponding fixation of attacks on the Southern point of the Sagaing, near the border of two other states in conflict (Madway and Mandalay). According to the article by Think Global Health:\n\nAttacks on Health Care in Myanmar, 2021 – 2023\nMyanmar’s health system is under attack countrywide, with the greatest number of attacks taking place in the Sagaing, Mandalay, and Yangon regions.\nAccording to Insecurity Insight, a nonprofit group collecting data on conflicts worldwide, nearly 1,200 attacks on health-care workers and facilities have taken place in the three years since the coup. Doctors, aid workers, and other medical personnel have been detained and arrested, targeted for allegedly taking care of protestors or participating in the civil disobedience movement (CDM).  \n\n\nquarterly_summary_sagaing &lt;- quarterly_summary_by_state %&gt;% \n  filter(admin1 == \"Sagaing\")\nquarterly_summary_sagaing  \n\nSimple feature collection with 14 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n * &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n10 Q3 2021 Sagaing              521         130 ((-13645.89 2571086), (-9197.24…\n11 Q1 2024 Sagaing              451         190 ((-16397.05 2576482), (-13753.9…\n12 Q2 2021 Sagaing              387          90 ((-13808.2 2533298), (-9514.18 …\n13 Q2 2024 Sagaing              348         133 ((-11281.63 2583340), (-10452.1…\n14 Q1 2021 Sagaing               13           4 ((-10581.74 2557635), (-9197.24…\n\n\nCoincidentally (or not), the quarters with the higest number of recorded fatalities fall between Q4 2021 - Q3 2022, where we will focus the computation of STKDE\n\narmed_clash_sagaing\n\nSimple feature collection with 2903 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10 Q1 2022 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#computing-stkde-by-day-of-year",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#computing-stkde-by-day-of-year",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Day of Year",
    "text": "10.2 Computing STKDE by Day of Year\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;% \n  filter(admin1 == \"Sagaing\") %&gt;% \n  filter(quarter %in% c(\"Q4 2021\", \"Q1 2022\", \"Q2 2022\", \"Q3 2022\")) %&gt;% \n  mutate(dayYear = yday(event_date)) %&gt;% \n  mutate(monthNum = month(event_date)) %&gt;% \n  mutate(monthFac = month(event_date,\n                          label=TRUE,\n                          abbr=FALSE))\narmed_clash_year_sf\n\nSimple feature collection with 1119 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2863190\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,119 × 11\n   quarter event_type sub_event_type admin1           geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;         &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-02-01\n 2 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-03-24\n 3 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-15\n 4 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-23\n 5 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-03-18\n 6 Q1 2022 Battles    Armed clash    Sagai…    (95831 2496973) 2022-01-11\n 7 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-01-24\n 8 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-02-04\n 9 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-01-12\n10 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-02-05\n# ℹ 1,109 more rows\n# ℹ 5 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, dayYear &lt;dbl&gt;,\n#   monthNum &lt;dbl&gt;, monthFac &lt;ord&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\narmed_clash_yday_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(dayYear) %&gt;% \n  as.ppp()\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_yday_owin &lt;- armed_clash_yday_ppp[sagaing_owin]\nsummary(sagaing_yday_owin)\n\nMarked planar point pattern:  1119 points\nAverage intensity 1.192011e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    91.0   172.0   176.3   260.5   365.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_yday_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp(sagaing_yday_owin)\n\nInitialising...Done.\nOptimising...\nh = 26068.43 \b; lambda = 29.14375 \nh = 28675.27 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 2635.987 \nh = 26720.14 \b; lambda = 1332.565 \nh = 27371.85 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 1332.565 \nh = 26394.29 \b; lambda = 680.8545 \nh = 26557.21 \b; lambda = 354.9991 \nh = 26638.68 \b; lambda = 192.0715 \nh = 26679.41 \b; lambda = 110.6076 \nh = 26699.78 \b; lambda = 69.87568 \nDone.\n\n\n          h      lambda \n26699.77626    69.87568 \n\n\n\nkde_yday &lt;- spattemp.density(sagaing_yday_owin,\n                             h=26699.77626,\n                             lambda=69.87568)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 26699.78 (spatial)\n  lambda = 69.8757 (temporal)\n\nNo. of observations\n  1119 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 365]\n\nEvaluation\n  128 x 128 x 365 trivariate lattice\n  Density range: [1.553021e-30, 1.912896e-13]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:365\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#saving-intermediate-datasets",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#saving-intermediate-datasets",
    "title": "Take-Home Exercise 1",
    "section": "10.3 Saving Intermediate Datasets:",
    "text": "10.3 Saving Intermediate Datasets:\n\nwrite_rds(healthcare_sng, \"data/rds/healthcare_sng.rds\")\nwrite_rds(quarterly_summary, \"data/rds/quarterly_summary.rds\")\nwrite_rds(quarterly_summary_by_state, \"data/rds/quarterly_summary_by_state.rds\")\nwrite_rds(state3_sf, \"data/rds/state3_sf.rds\")\nwrite_rds(event_density_data, \"data/rds/event_density_data.rds.rds\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#key-findings",
    "href": "Take-Home_Exercise/TakeHomeEx01 /Take-HomeEx01.html#key-findings",
    "title": "Take-Home Exercise 1",
    "section": "Key Findings:",
    "text": "Key Findings:\n\nClustering of Armed Clashes:\n\nWithin Q4 2021 to Q2 2022, with R-values indicating a highly clustered distribution of conflict events. This clustering is particularly evident in Sagaing, Mandalay, and Magway, where much of the conflict was concentrated.\nThe clustering can be attributed to the ongoing civil resistance following the military coup in Myanmar in 2021, with Sagaing experiencing heavily intense conflicts. This has prompted me to research further, finding that: \n\nThe area is prone to natural disasters, being located at the ‘Sagaing fault’ and is already a natural hotspot for refugee / displaced individuals due to the socio-economic plight it has faced, as part of the ‘Dry Zone’ \nMilitary Conscription drives has ‘provoked reverse migration, pushing young men who fled Myanmar’s war-torn Dry Zone to give up their livellihoods and risk their lives to return home’ \n\n\nKernel Density Estimation:\n\nKDE analysis allowed us to visualize the intensity of conflict over time. Using fixed bandwidth (e.g., bw.ppl()), we observed that while the intensity of conflict was concentrated in certain regions, particularly in Sagaing, there was a gradual dispersion of conflict events over time into neighboring regions such as Magway and Mandalay.\nThe choice of bandwidth (sigma) and kernel function was important for interpreting both local and broader trends in armed clashes. The Gaussian kernel was effective in showing overall trends, while smaller sigmas captured finer details, especially in high-density areas. Initially, I actually went with bw.diggle instead of bw.ppl bandwidth as I thought bw.diggle() is always the best choice for detecting clusters, and bw.ppl is better for smoothing over broader areas. However, this interpretation may be overly simplistic. \n\nGoing by bw.diggle, I obtained a really small sigma value which might have been a sign of overfitting. Furthermore, because of the plotting and the movement of the conflict over time, we ought to expect multiple clsuter, which implied bw.ppl was a better fit. \n\n\nSpatio-temporal KDE:\n\nThe STKDE provided a nuanced view of how conflict events evolved quarter by quarter, confirming that some periods saw a stark increase in fatalities, such as Q4 2021 through Q2 2022.\nThe temporal analysis highlighted the cyclical nature of the conflict, with periods of intense violence followed by temporary dispersions or shifts in conflict zones.\n\n2nd-Order Spatial Point Pattern Analysis:\n\nThe use of G-, F-, K-, and L-functions provided further confirmation of the non-random distribution of armed clashes. These functions indicated significant spatial interaction among the conflict points, suggesting that the locations of armed clashes were influenced by proximity to other events, reflecting the complex nature of the conflict. 2nd Point Pattern Analysis allowed me to research further on the conflicting factors that affected (random) spatial distribution of armed conflict, and found the unfortunate but deliberate choice to target civilian institutions like hospitals.\n\nHealthcare as a Battleground:\n\nBy overlaying points of interest (POI) such as hospitals and healthcare facilities onto the map, we observed that many clashes occurred near key civilian infrastructure. This aligns with findings that healthcare has become a battleground in Myanmar, particularly in Sagaing and surrounding regions. Attacks on healthcare facilities have not only disrupted medical services but also contributed to the broader humanitarian crisis in the region."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#objectives",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#objectives",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#packages-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#packages-used",
    "title": "Take-Home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\nThe table below provides a summary of the packages I’ve used for this exercise\n\nThe code chunk below installs and launches the R packages,\n\n\ntidyverse\nfor performing data science tasks such as importing, wrangling and visualising data.\nIt contains the following packages used :\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\n\nsf\npackage provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n\ntmap\nwhich provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\nspatstat\nhas functions useful for Point Pattern Analysis\n\n\nraster\nreads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)\n\n\nspNetwork\nwhich provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n\nsp\n\n\n\ndplyr\n\n\n\nsparr\nprovides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n\nanimation\n\n\n\n\n\npacman::p_load(tidyverse, sf, sp, tmap, spatstat, raster, spNetwork, RColorBrewer,dplyr, sparr,animation, magick)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#datasets-used",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#datasets-used",
    "title": "Take-Home Exercise 1",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nIn response to the background context of the armed conflict happening in Myanmar, the exercise aims to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\nUpon further research, I’ve managed to come across an interesting resource which maps out the Warscapes in Myanmar. It illustrates the variations in the type of conflict inflicted in different zones of the country\n\nAspatial Data\n\nMYNMAR.CSV dataset derived from Armed Conflict Location & Event Data Project (ACLED), a non-profit organization collecting, analyzing and mapping data on political violence and protest events around the world. (Limited to Jan 2021 - June 2024)\n\n\n\nGeospatial\nThe following datasets were obtained from: https://data.humdata.org/organization/mimu\n\nMyanmar Country Boundaries MIMU\nMyanmar State_Region Boundaries MIMU\nPoints of Interest from OpenStreetMap, depicting different categories of features mapped by the OSM community. It depicts various categories such as : public services and infrastructure, emergency and safety locations, amenities etc.\n\nThis additional dataset from OpenStreetMap is crucial for analyzing armed conflict in Myanmar as it provides detailed geographic information on key locations such as public services, infrastructure, and emergency and safety sites. Understanding the distribution of these points of interest helps in assessing the impact of conflict on civilian infrastructure, access to essential services, and the safety of affected populations. Furthermore, it may aid in planning humanitarian assistance, evacuation routes, and monitoring areas of strategic importance during the conflict through data insights.\nFor the purposes of this exercise, we will focus on the State/Region boundaries, seeing as the conflict is generally explored in this manner (as inferred from the given references in the Take Home Exercise Overview). This is represented by the first administrative level (admin1). Myanmar is divided into 7 states and 7 regions (plus the Union Territory of Naypyidaw).\nThese boundaries are politically and administratively significant. Different states (e.g., Kachin, Rakhine, Shan) and regions have distinct ethnic compositions and different conflict dynamics, making this level critical for understanding broader conflict patterns."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#importing-spatial-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#importing-spatial-data",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Importing Spatial Data",
    "text": "3.1 Importing Spatial Data\n\n1. Myanmar CSV\nUsing read_csv to import the data in the MYANMAR.CSV file, which is the ACLED Dataset detailing armed conflict in Myanmar:\n\narmed_conflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck and transform the CRS of the ACLED Dataset:\n\ncolnames(armed_conflict_data)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\n\n\narmed_conflict &lt;- st_as_sf(armed_conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;% \n  st_transform(armed_conflict, crs=32647)\n\n\n\n2. Country, State, Region, District Boundaries\nUsing the st_read function, we will import data from the State & Region Sub-boundary dataset to visualize Myanmar’s landscape. We will focus our analysis on the State_Region Level (Admin1)\n\nstate_region_sf &lt;-  st_read(dsn=\"data/geospatial/stateRegion\", layer \n=\"mmr_polbnda_adm1_250k_mimu_1\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/stateRegion' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\ndistrict_sf &lt;- st_read(dsn=\"data/geospatial/district\", layer \n=\"mmr_polbnda_adm2_250k_mimu\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/district' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nAfter importing the dataset, we will plot to see the boundaries of the State & Regions of Myanmar. The plot() function is used to plot the geometry of the sf object. The st_geometry() function is used to extract the geometry of the state_region_sf object.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_polygons() + \n  tm_text(\"ST\", size =0.9, just=\"center\")\n\n\n\n\n\n\n\ntm_layout(frame=FALSE)\n\n$tm_layout\n$tm_layout$frame\n[1] FALSE\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\n\n3. Points of Interest\nFrom here on out, we will denote points-of-interest as POI.\nI will load the corresponding shapefile:\n\npoi_sf &lt;- st_read(dsn = \"data/geospatial/pointsOfInterest\", layer = \"hotosm_mmr_points_of_interest_points_shp\") %&gt;%\n  st_set_crs(4326) %&gt;%  \n  st_transform(crs = 32647)  \n\nReading layer `hotosm_mmr_points_of_interest_points_shp' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01 /data/geospatial/pointsOfInterest' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56187 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 92.15357 ymin: 9.756896 xmax: 101.1515 ymax: 28.36754\nCRS:           NA\n\n\n\nst_crs(poi_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\ncolnames(poi_sf)\n\n [1] \"name\"       \"name_en\"    \"amenity\"    \"man_made\"   \"shop\"      \n [6] \"tourism\"    \"opening_ho\" \"beds\"       \"rooms\"      \"addr_full\" \n[11] \"addr_house\" \"addr_stree\" \"addr_city\"  \"source\"     \"name_my\"   \n[16] \"osm_id\"     \"osm_type\"   \"geometry\"  \n\n\nBased on the unique amenities, those that would be relevant in analyzing armed conflict effects in Myanmar would be : “hospital” , “refugee_site”, “Health centre” , “clinic”:\n\npoi_sf &lt;- poi_sf %&gt;% \n  mutate(amenity = str_to_lower(amenity)) %&gt;% \n  filter(amenity %in% c(\"refugee_site\", \"hospital\", \"health center\")) %&gt;% \n  dplyr::select(name_en, amenity, geometry)\n\npoi_sf\n\nSimple feature collection with 617 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -211935.1 ymin: 1103190 xmax: 697952 ymax: 3026108\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                         name_en  amenity                 geometry\n1                           &lt;NA&gt; hospital POINT (439165.5 1562018)\n2       Kalar Chaunggyi Hospital hospital POINT (262988.5 1908198)\n3                  militry O.P.T hospital POINT (238995.6 2440150)\n4           Myint Mo Oo Hospital hospital POINT (414147.5 1556093)\n5             Chan Myae Hospital hospital POINT (412546.6 1555811)\n6              Mediland Hospital hospital POINT (412151.4 1557561)\n7  Traditional Medicine Hospital hospital POINT (411729.3 1557083)\n8                           &lt;NA&gt; hospital POINT (458901.2 1144896)\n9              Kra Buri Hospital hospital POINT (475772.4 1149467)\n10        Dawei General Hospital hospital POINT (413966.3 1556630)\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) +\n  tm_polygons(alpha=0.5) + \n  tm_shape(poi_sf) +\n  tm_dots(col = \"amenity\", palette = \"Set1\",\n          title=\"Amenity Type\") +\n  tm_layout(main.title = \"Distribution of Healthcare Infrastructure & Amenities\", \n            main.title.position = c(\"center\", \"top\")\n  ) + \n  tm_layout(legend.outside=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#data-preparation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nBefore a thematic map can be prepared, we have to prepare a data table which includes the variables event types, focused on : Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nstr(armed_conflict)\n\nsf [42,608 × 30] (S3: sf/tbl_df/tbl/data.frame)\n $ event_id_cnty     : chr [1:42608] \"MMR64313\" \"MMR64320\" \"MMR64321\" \"MMR64322\" ...\n $ event_date        : chr [1:42608] \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" ...\n $ year              : num [1:42608] 2024 2024 2024 2024 2024 ...\n $ time_precision    : num [1:42608] 1 1 1 1 1 1 1 1 1 1 ...\n $ disorder_type     : chr [1:42608] \"Political violence\" \"Political violence\" \"Political violence\" \"Strategic developments\" ...\n $ event_type        : chr [1:42608] \"Battles\" \"Battles\" \"Battles\" \"Strategic developments\" ...\n $ sub_event_type    : chr [1:42608] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Change to group/activity\" ...\n $ actor1            : chr [1:42608] \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"Military Forces of Myanmar (2021-)\" ...\n $ assoc_actor_1     : chr [1:42608] \"MDA - AGF: Madaya - The Authentic Genes Force; SSTF: Security & Special Task Force CDM People's Police\" NA NA NA ...\n $ inter1            : num [1:42608] 3 3 3 1 3 1 1 2 1 1 ...\n $ actor2            : chr [1:42608] \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" NA ...\n $ assoc_actor_2     : chr [1:42608] NA NA NA NA ...\n $ inter2            : num [1:42608] 1 1 1 0 1 0 2 1 2 2 ...\n $ interaction       : num [1:42608] 13 13 13 10 13 10 12 12 12 12 ...\n $ civilian_targeting: chr [1:42608] NA NA NA NA ...\n $ iso               : num [1:42608] 104 104 104 104 104 104 104 104 104 104 ...\n $ region            : chr [1:42608] \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" ...\n $ country           : chr [1:42608] \"Myanmar\" \"Myanmar\" \"Myanmar\" \"Myanmar\" ...\n $ admin1            : chr [1:42608] \"Mandalay\" \"Mandalay\" \"Mandalay\" \"Sagaing\" ...\n $ admin2            : chr [1:42608] \"Mandalay\" \"Pyinoolwin\" \"Pyinoolwin\" \"Shwebo\" ...\n $ admin3            : chr [1:42608] \"Patheingyi\" \"Singu\" \"Thabeikkyin\" \"Khin-U\" ...\n $ location          : chr [1:42608] \"Aung Tha Pyay\" \"Pin Lel Gyi\" \"Thabeikkyin\" \"Khin-U\" ...\n $ geo_precision     : num [1:42608] 2 1 2 2 2 2 1 1 2 1 ...\n $ source            : chr [1:42608] \"Democratic Voice of Burma; Irrawaddy\" \"Irrawaddy\" \"Irrawaddy\" \"Democratic Voice of Burma; Khit Thit Media\" ...\n $ source_scale      : chr [1:42608] \"National\" \"National\" \"National\" \"Subnational-National\" ...\n $ notes             : chr [1:42608] \"On 30 June 2024, near Aung Tha Pyay village (Patheingyi township, Mandalay district, Mandalay region), a combin\"| __truncated__ \"On 30 June 2024, in Pin Lel Gyi village (Singu township, Pyinoolwin district, Mandalay region), the People's De\"| __truncated__ \"On 30 June 2024, in Thabeikkyin township (Pyinoolwin district, Mandalay region), the People's Defense Force - M\"| __truncated__ \"Change to armed group: On 30 June 2024, in Khin-U town (Khin-U township, Shwebo district, Sagaing region), a mi\"| __truncated__ ...\n $ fatalities        : num [1:42608] 0 0 0 0 0 0 0 2 0 0 ...\n $ tags              : chr [1:42608] NA NA NA NA ...\n $ timestamp         : num [1:42608] 1.72e+09 1.72e+09 1.72e+09 1.72e+09 1.72e+09 ...\n $ geometry          :sfc_POINT of length 42608; first list element:  'XY' num [1:2] 214961 2452068\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"event_id_cnty\" \"event_date\" \"year\" \"time_precision\" ...\n\n\nHere is a visual overview of the 4 different types of Armed Conflict (based on event_types) :\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_borders(col = \"black\") + \n  tm_shape(armed_conflict) + \n  tm_dots(col = \"event_type\", palette = \"Set1\", size = 0.01, alpha = 0.5) +\n  tm_facets(by = \"event_type\") + \n  tm_layout(title = \"Armed Conflict in Myanmar (Jan 2021 - Jun 2024)\", \n            legend.outside = TRUE) +\n  tm_legend(title = \"Event Type\")\n\n\n\n\n\n\n\n\nFrom the plots above, we see that armed conflict even types seem to concentrate in the North-west region, particularly at the boundary of Sagaing, Mandalay and Magwe state, which we will zoom in on.\nIn order to group and have a sensing of the effects of armed conflict, we will aggregate based on fatalities to see a quick overview as well as their state (administrative boundary 1) :\n\narmed_conflict_fatalities &lt;- armed_conflict %&gt;% \n  group_by(admin1, event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Summarize fatalities based on the administrative boundary (stateRegion)\n  group_by(admin1) %&gt;% \n  mutate(total_fatalities_admin1 = sum(total_fatalities)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Arrange admin1 by descending order of fatalities and then the event type \n  arrange(desc(total_fatalities_admin1), admin1, desc(total_fatalities)) \n\n`summarise()` has grouped output by 'admin1'. You can override using the\n`.groups` argument.\n\narmed_conflict_fatalities\n\nSimple feature collection with 72 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 72 × 5\n   admin1   event_type                total_fatalities                  geometry\n   &lt;chr&gt;    &lt;chr&gt;                                &lt;dbl&gt;          &lt;MULTIPOINT [m]&gt;\n 1 Sagaing  Battles                              11225 ((-16397.05 2576482), (-…\n 2 Sagaing  Explosions/Remote violen…             5161 ((-13753.92 2572123), (-…\n 3 Sagaing  Violence against civilia…             2513 ((-13808.2 2533298), (-1…\n 4 Sagaing  Strategic developments                  40 ((-16397.05 2576482), (-…\n 5 Magway   Battles                               3910 ((-14448.48 2310133), (-…\n 6 Magway   Explosions/Remote violen…             1701 ((-11811.97 2503484), (-…\n 7 Magway   Violence against civilia…              544 ((-9822.857 2409014), (-…\n 8 Magway   Strategic developments                  17 ((-11256.98 2417070), (-…\n 9 Mandalay Battles                               1658 ((69197.66 2321843), (84…\n10 Mandalay Explosions/Remote violen…             1051 ((75228.96 2349261), (96…\n# ℹ 62 more rows\n# ℹ 1 more variable: total_fatalities_admin1 &lt;dbl&gt;\n\n\nBased on the above result, we see that the fatalities are concentrated in are concentrated in these 3 states: Sagaing, Magway and Mandalay.\nThe code chunk below explores the data further:\n\narmed_conflict_fatalities_by_event_type &lt;- armed_conflict %&gt;% \n  group_by(event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\narmed_conflict_fatalities_by_event_type\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 4\n  event_type              total_fatalities event_count                  geometry\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;int&gt;          &lt;MULTIPOINT [m]&gt;\n1 Battles                            35924       12049 ((-207135 2358896), (-20…\n2 Explosions/Remote viol…            11562       12208 ((-208804.4 2357274), (-…\n3 Violence against civil…             6478        6225 ((-206931.7 2359490), (-…\n4 Strategic developments               127       12126 ((-206931.7 2359490), (-…\n\n\nBefore doing so, let’s explore the nuances in the naming convention to understand a potential reason why conflict arises:\n\narea_names &lt;- state_region_sf %&gt;% \n  distinct(ST_RG) %&gt;% \n  pull(ST_RG)\n\narea_names\n\n[1] \"Region\"          \"State\"           \"Union Territory\"\n\n\n\nKey Differences\n\nState:\n\nRepresents areas predominantly inhabited by ethnic minorities, each with their own cultural and historical significance.\nOften involved in ethnic conflicts, seeking more autonomy.\n\nRegion:\n\nRepresents the Bamar-majority areas, which have more economic and political power.\nTypically less conflict-prone compared to states.\n\nUnion Territory:\n\nA special administrative area directly controlled by the central government (e.g., the capital region).\nNo local parliament or legislative autonomy."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#subsetting-the-data",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#subsetting-the-data",
    "title": "Take-Home Exercise 1",
    "section": "3.3 Subsetting the data:",
    "text": "3.3 Subsetting the data:\n\n3.3.1 Data Processing of subsetted dataset - MYANMAR.CSV\nWe’ll now process the data to see the corresponding fatalities with the different event types mentioned above, Battles, Explosions/Remote violence, Strategic developments and Violence against civilians.\nFrom this point forward, we will focus on the event_type of ‘Battles’ and sub_event_type of ‘Armed Clash’ as it would be interesting to analyse given that it has the most event counts and fatalities as aggregated in the code above:\n\nSince we are interested in deriving the quarterly KDE layers, we will convert the event_date column (currently in [chr] format), into a Date object that can be used for further analysis.\n\n\narmed_conflict_sf &lt;- armed_conflict %&gt;%\n  filter(event_type == \"Battles\") %&gt;% \n  filter(admin1 %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  dplyr::select(1:3, 5:8, 11, 15, 19, 20, 27, 29, 30)\n\nSave the intermediate dataset to rds:\n\nwrite_rds(armed_conflict_sf, \"data/rds/armed_conflict_sf.rds\")\n\nWe change the CRS to 32647 given that it is in the North Western Zone of Myanmar:\n\narmed_conflict_sf &lt;- read_rds(\"data/rds/armed_conflict_sf.rds\") %&gt;% \n  st_transform(crs = 32647) \n\n\nhead(armed_conflict_sf)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 146213 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 14\n  event_id_cnty event_date   year disorder_type event_type sub_event_type actor1\n  &lt;chr&gt;         &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n1 MMR64313      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n2 MMR64320      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n3 MMR64321      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n4 MMR64323      30 June 20…  2024 Political vi… Battles    Armed clash    PKDF …\n5 MMR64314      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n6 MMR64319      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n# ℹ 7 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\narmed_conflict_sf &lt;- armed_conflict_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) %&gt;% \n  mutate(quarter = paste0(\"Q\", quarter(event_date), \" \", year(event_date)))\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_conflict_battles &lt;- armed_conflict_sf %&gt;% \n  group_by(event_type, sub_event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n    filter(event_type == \"Battles\") %&gt;% \n    ungroup() \n\n`summarise()` has grouped output by 'event_type'. You can override using the\n`.groups` argument.\n\narmed_conflict_battles\n\nSimple feature collection with 3 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 5\n  event_type sub_event_type                      total_fatalities event_count\n  &lt;chr&gt;      &lt;chr&gt;                                          &lt;dbl&gt;       &lt;int&gt;\n1 Battles    Armed clash                                    16750        4681\n2 Battles    Government regains territory                       0           1\n3 Battles    Non-state actor overtakes territory               43          15\n# ℹ 1 more variable: geometry &lt;GEOMETRY [m]&gt;\n\n\n\ntotal_deaths &lt;- armed_conflict %&gt;% summarize(total_fatalities = sum(fatalities, na.rm=TRUE),\n            event_count = n())\n\ntotal_deaths\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 3\n  total_fatalities event_count                                          geometry\n             &lt;dbl&gt;       &lt;int&gt;                                  &lt;MULTIPOINT [m]&gt;\n1            54091       42608 ((-208804.4 2357274), (-207135 2358896), (-20693…\n\n\nOut of 54091 deaths for the whole of Myanmar for Jan 2021 - Jun 2024, encompassing all event_types and sub_event_types recorded, deaths from event_type == “Battles” , specifically the sub_event_type of “Armed clash” has lead to 34581 deaths in the states of Myanmar alone, accounting for ~63.9% of deaths.\n\n\n3.3.1 Data Processing of subsetted dataset - State_Region_sf\n\nstate3_sf &lt;- state_region_sf %&gt;% \n  filter(ST %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  st_transform(crs = 32647)\n\nstate3_sf\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -37628.21 ymin: 2086865 xmax: 308341.4 ymax: 3029739\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID       ST ST_PCODE  ST_RG          ST_MMR PCode_V\n1        8   Magway   MMR009 Region   မကွေးတိုင်းဒေသကြီး     9.4\n2        9 Mandalay   MMR010 Region မန္တလေးတိုင်းဒေသကြီး     9.4\n3       13  Sagaing   MMR005 Region  စစ်ကိုင်းတိုင်းဒေသကြီး     9.4\n                        geometry\n1 MULTIPOLYGON (((-1717.607 2...\n2 MULTIPOLYGON (((208184.3 26...\n3 MULTIPOLYGON (((275295.6 30...\n\n\n\nplot(state3_sf)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "title": "Take-Home Exercise 1",
    "section": "3.4 Filtering down to Battles, Armed Clash",
    "text": "3.4 Filtering down to Battles, Armed Clash\n\n3.4.1 Analyzing Densities based on fatalities and event_count\nCalculating area of each state in km^2:\n\nstate3_sf &lt;- state3_sf %&gt;% \n  mutate(area_km2 = st_area(geometry) / 1e6)\n\nDensity for Fatalities & Event_count in the area:\n\nevent_density_data &lt;- armed_conflict_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    total_events = n(),               \n    total_fatalities = sum(fatalities, na.rm = TRUE)  \n  ) %&gt;% \n  ungroup()\n\nMerge the event data with the state-level area data\n\nevent_density_data\n\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 4\n  admin1   total_events total_fatalities                                geometry\n  &lt;chr&gt;           &lt;int&gt;            &lt;dbl&gt;                        &lt;MULTIPOINT [m]&gt;\n1 Magway           1115             3910 ((-14448.48 2310133), (-11778.42 23314…\n2 Mandalay          602             1658 ((69197.66 2321843), (84966.22 2353705…\n3 Sagaing          2980            11225 ((-16397.05 2576482), (-13816.45 25496…\n\n\n\nevent_density_data &lt;- state3_sf %&gt;%\n  st_join(event_density_data, by = \"admin1\")\n\n\ncolnames(event_density_data)\n\n [1] \"OBJECTID\"         \"ST\"               \"ST_PCODE\"         \"ST_RG\"           \n [5] \"ST_MMR\"           \"PCode_V\"          \"area_km2\"         \"admin1\"          \n [9] \"total_events\"     \"total_fatalities\" \"geometry\"        \n\n\n\nevent_density_data &lt;- event_density_data %&gt;%\n  mutate(\n    event_density = total_events / area_km2,         \n    fatality_density = total_fatalities / area_km2    \n  )\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Plot event density\ntm_shape(event_density_data) +\n  tm_polygons(\"event_density\", title = \"Event Density (Events/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n# Plot fatality density\ntm_shape(event_density_data) +\n  tm_polygons(\"fatality_density\", title = \"Fatality Density (Fatalities/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.1 Subsetting the data:\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_clash_sf &lt;- armed_conflict_sf %&gt;% \n  filter(event_type == \"Battles\", sub_event_type ==\"Armed clash\") %&gt;% \n  group_by(quarter, event_type, sub_event_type, admin1, geometry, event_date) %&gt;% \n  summarize(\n      `FATALITIES` = sum(fatalities, na.rm=TRUE), \n      event_count = n()\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'quarter', 'event_type', 'sub_event_type',\n'admin1', 'geometry'. You can override using the `.groups` argument.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "title": "Take-Home Exercise 1",
    "section": "3.5 Converting sf Object to sp Object",
    "text": "3.5 Converting sf Object to sp Object\n\narmed_clash_sp &lt;- as(armed_clash_sf, \"Spatial\")\nstate3_sp &lt;- as(state3_sf, \"Spatial\")\n\n\ncolnames(armed_clash_sf)\n\n[1] \"quarter\"        \"event_type\"     \"sub_event_type\" \"admin1\"        \n[5] \"geometry\"       \"event_date\"     \"FATALITIES\"     \"event_count\"   \n\n\n\nunique_coordinates &lt;- armed_clash_sf %&gt;%\n  summarise(unique_count = n_distinct(geometry))  # Directly on geometry column\n\n# For total event count\ntotal_armed_clash_count &lt;- armed_clash_sf %&gt;% \n  summarise(event_count = sum(event_count, na.rm = TRUE))\n\n# Print results\nprint(unique_coordinates)\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  unique_count                                                          geometry\n         &lt;int&gt;                                                  &lt;MULTIPOINT [m]&gt;\n1         1547 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), …\n\nprint(total_armed_clash_count)  \n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  event_count                                                           geometry\n        &lt;int&gt;                                                   &lt;MULTIPOINT [m]&gt;\n1        4681 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), (…\n\n\nOut of 4681 Armed Clash conflict events, only 1547 unique coordinate points are recorded, indicating the that armed clashes occurred more than once for the coordinate points in general."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "3.6 Converting sp Object to spatstat’s ppp Format",
    "text": "3.6 Converting sp Object to spatstat’s ppp Format\n\nglimpse(armed_clash_sp)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 4594 obs. of  7 variables:\n  .. ..$ quarter       : chr [1:4594] \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" ...\n  .. ..$ event_type    : chr [1:4594] \"Battles\" \"Battles\" \"Battles\" \"Battles\" ...\n  .. ..$ sub_event_type: chr [1:4594] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Armed clash\" ...\n  .. ..$ admin1        : chr [1:4594] \"Magway\" \"Magway\" \"Magway\" \"Mandalay\" ...\n  .. ..$ event_date    : Date[1:4594], format: \"2021-03-30\" \"2021-03-31\" ...\n  .. ..$ FATALITIES    : num [1:4594] 1 1 4 1 2 4 6 1 2 5 ...\n  .. ..$ event_count   : int [1:4594] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:4594, 1:2] -4389 -4389 -6592 97374 101220 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -16397 2108023 255317 2987342\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\narmed_clash_ppp &lt;- as.ppp(armed_clash_sf)\n\nWarning in as.ppp.sf(armed_clash_sf): only first attribute column is used for\nmarks\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\nplot(armed_clash_ppp)\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#handling-duplicated-points",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#handling-duplicated-points",
    "title": "Take-Home Exercise 1",
    "section": "3.7 Handling Duplicated Points",
    "text": "3.7 Handling Duplicated Points\nWe check for duplication in the ppp object using the code chunk below. Before processing, we need to account for the fact that we have divided the data into quarters, which would result in the event_types at the same location being treated as separate points, but spatstat recognizing them as duplicates as they share the exact same coordinates.\n\nany(duplicated(armed_clash_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(armed_clash_ppp) &gt; 1)\n\n[1] 2503\n\n\nTo account for the number of locations which have more than one point event, we can use the code chunk below:\n\ncoords &lt;- st_coordinates(armed_clash_sf)\ncoords_df &lt;- as.data.frame(coords)\n\nlocation_counts &lt;- coords_df %&gt;% \n  group_by(X,Y) %&gt;% \n  summarize(count = n()) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'X'. You can override using the `.groups`\nargument.\n\nlocations_with_multiple_events &lt;- location_counts %&gt;% \n  filter(count &gt; 1)\n\ncount_locations_with_multiple_events &lt;- nrow(locations_with_multiple_events)\ncount_locations_with_multiple_events\n\n[1] 607\n\n\nOut of 1547 unique coordinate points, 515 have more than one conflict events occuring throughout the time period of Jan 2021 - Jun 2024, which could account for the 2503 duplicate count above.\n\ntmap_mode('view')\n\ntm_shape(armed_clash_sf) + \n  tm_dots(alpha = 0.7, size = 0.01)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "title": "Take-Home Exercise 1",
    "section": "3.8 Spotting Duplicate points from the map shown",
    "text": "3.8 Spotting Duplicate points from the map shown\nTo address the duplicate points, which largely arises due to the temporal aspect of the data we will use Jittering (adding a small perturbation to the duplicate points so that they do not occupy the exact same space)\nThe code chunk below implements the jittering approach.\n\narmed_clash_jitter &lt;- rjitter(armed_clash_ppp, \n                                 retry=TRUE, \n                                 nsim=1, \n                                 drop=TRUE)\n\nCheck for duplicated points in the data:\n\nany(duplicated(armed_clash_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Combining point events object and owin object",
    "text": "4.1 Combining point events object and owin object\nIn the next step of geospatial data wrangling, we extract armed conflict (armed clash as a subset of Battles) events located within Myanmar using this code chunk:\n\narmed_clash_myn_ppp &lt;- armed_clash_ppp[states3_owin]\n\nThe output combined both the point and polygon feature in one ppp object class as shown below:\n\nplot(armed_clash_myn_ppp, cex = 0.4, main=\"Spatial Distribution of Battles (Armed Clash) in Myanmar\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(armed_clash_myn_ppp)\n\nMarked planar point pattern:  4594 points\nAverage intensity 2.703969e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     4594 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 10179 vertices\nenclosing rectangle: [-37628.21, 308341.37] x [2086865.1, 3029739.1] units\n                     (346000 x 942900 units)\nWindow area = 1.69898e+11 square units\nFraction of frame area: 0.521"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#kernel-density-estimation",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nThis section with perform first-order SPPA and focus on :\n\nDeriving KDE for visualizing and exploring the intensity of point processes\nPerform Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour Statistics\n\n\n5.1.1 Computing KDE using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n\nkde_armed_clash_myn_bw &lt;- density(armed_clash_myn_ppp, \n                                     sigma=bw.diggle, \n                                     edge=TRUE,\n                                     kernel=\"gaussian\")\n\n\nplot(kde_armed_clash_myn_bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp)\nsigma_diggle\n\n   sigma \n84.63052 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, we need to rescale.ppp() unit from meter to kilometer to prevent interference in the scale as well as the distortion of the bandwith values:\n\narmed_clash_myn_ppp.km &lt;- rescale.ppp(armed_clash_myn_ppp, 1000, \"km\")\n\nWe re-run density() using the rescaled data and plot the output KDE map: (Note the difference between _bw and .bw to denote scaled data)\n\nkde_armed_clash_myn.bw &lt;- density(armed_clash_myn_ppp.km,\n                                     sigma=bw.diggle, \n                                     edge=TRUE, \n                                     kernel=\"gaussian\")\n\nplot(kde_armed_clash_myn.bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp.km)\nsigma_diggle\n\n     sigma \n0.08463052"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Working with different automatic bandwidth methods",
    "text": "6.1 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(armed_clash_myn_ppp.km)\n\n   sigma \n32.05992 \n\n\n\nbw.scott(armed_clash_myn_ppp.km)\n\n sigma.x  sigma.y \n16.84732 26.63314 \n\n\n\nbw.ppl(armed_clash_myn_ppp.km)\n\n   sigma \n3.674435 \n\n\n\nbw.diggle(armed_clash_myn_ppp.km)\n\n     sigma \n0.08463052 \n\n\nThe code chunk beow will be used to compare the output of using the different methods.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States CvL\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States Scott\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States ppl\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States diggleL\"))\n\n\n\n\n\n\n\n\nInterpretation: To summarize given the expectation of multiple clusters in th Myanmar conflict data, I’ll be predominantly utilizing bw.ppl(), well-suited for capturing multiple clusters without overfitting or underfitting, Baddeley et al. (2016). In the case where tighter, isolated clusters are preferred, bw.diggle() will be the sigma used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-kernel-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#working-with-different-kernel-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Working with different kernel methods",
    "text": "6.2 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Fixed vs Adaptive bandwidth for KDE",
    "text": "6.2 Fixed vs Adaptive bandwidth for KDE\nThe choice between automatic and adaptive bandwidth depends on the objectives and nature of our analysis.\n\n6.2.1 Computing KDE by using fixed bandwidth\n\n\n\n\n\n\nFixed Bandwidth\nAdaptive Bandwidth\n\n\n\n\nOffers Consistency across Space: Uniform smoothing across the entire study area.\nVarying Spatial Densities: Showing significant differences in conflict event densities (urban, rural ares), adaptive bandwidth could give a more nuanced understanding\n\n\nGeneral Hotspot Detection: To identify overall hotspots or conflict zones without too much detail\nLocal Hotspot Detection\n\n\n\nBased on our earlier analysis, we received a sigma value of 6. which results in minimal smoothing, meaning the KDE will show more localized patterns, however, this could lead to overfitting, where small clusters are exaggerated and conflict points are more prone to misinterpretation.\nCurrently, as I am unsure of what sigma degree to use, a good starting point would be to calculate the average or median Nearest Neighbour distance between points and use that as an initial value:\n\nmean_distance &lt;- mean(nndist(armed_clash_myn_ppp.km))\n\npar(mfrow=c(1,2))\nkde_diggle &lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.diggle)\nkde_ppl&lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.ppl)\nplot(kde_diggle)\nplot(kde_ppl)\n\n\n\n\n\n\n\n\n\n6.2.2 Computing KDE by using adaptive bandwidth\n\nkde_armed_clash_myn_adaptive &lt;- adaptive.density(armed_clash_myn_ppp.km, \n                                                 method=\"kernel\")\nplot(kde_armed_clash_myn_adaptive)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "title": "Take-Home Exercise 1",
    "section": "6.3 Fixed Bandwith for Quarterly KDE Analysis",
    "text": "6.3 Fixed Bandwith for Quarterly KDE Analysis\n\nKey Considerations for KDE Comparison Across Quarters:\n\nConsistency: For the KDEs to be comparable across different quarters, you need to use the same sigma for all quarters. This ensures that the degree of smoothing is consistent across the time periods, allowing you to make fair comparisons of density patterns over time.\nScale of Patterns: The chosen sigma should be large enough to reveal the relevant spatial patterns without introducing too much noise (from a very small sigma) or losing too much detail (from a very large sigma).\n\n\n\n\n\n\n\n\n\n\nInitial Sigma Value (0.07)\n\nMean Distance (1.6)\n\n\n\n\n\nAdvantages\nDisadvantages\nAdvantages\nDisadvantages\n\n\nCaptures local detail: This smaller sigma will emphasize fine-grained, local patterns, showing small clusters of events that may otherwise be smoothed over with a larger sigma.\nToo small for larger trends: A sigma of 0.18 may result in overfitting, where the KDE highlights every small cluster or isolated event.\nGood balance of local and global patterns: A sigma of 1.6 km (based on average nearest neighbor distance) strikes a balance between capturing local clusters and revealing broader spatial trends. It smooths out small noise while still showing meaningful clusters.\nLess local detail: While the 1.6 km sigma is a good balance, it may not capture very small-scale, localized patterns that might be relevant in specific analyses.\n\n\nGood for high-detail analysis: If your goal is to observe very specific spatial variations within each quarter, this smaller sigma might be more suitable.\nDifficult for comparisons: A very small sigma might highlight differences in individual points rather than overall trends, making it harder to compare the general distributions across quarters.\nBetter for comparisons: Since this sigma is derived from the overall spacing of points in your dataset, it reflects a more general spatial structure. This makes it more suitable for comparing KDE patterns across different quarters, as it ensures that the bandwidth is appropriate for both sparse and dense data, without overemphasizing small differences.\n\n\n\n\nContent adapted from Luc Anselin Spatial Econometrics.\nBased on this analysis, I am more inclined to go with the mean distance calculated for a Fixed Bandwidth, which we will use to compare Battles (Armed clash) across different quarters.\nSimple visualizations through graphs can help us get a better sense of the temporal aspect of when these armed clashes occurred. Since we are dealing with time:\n\narmed_clash_long &lt;- armed_clash_sf %&gt;%\n  arrange(desc(FATALITIES)) %&gt;% \n  pivot_longer(cols = c(FATALITIES, event_count), \n               names_to = \"measure\",             \n               values_to = \"value\")\n\n\nggplot(armed_clash_long, aes(x = value, \n                             y = factor(quarter, levels = sort(unique(quarter))))) + \n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"black\") +  \n  geom_text(data = armed_clash_long %&gt;%\n              group_by(quarter, measure) %&gt;% \n              filter(value == max(value)),  \n            aes(label = round(value, 1)),  \n            position = position_dodge(width = 0.9), \n            vjust = 0.5,  \n            hjust = 4.0,  \n            size = 3,    \n            color = \"white\") + \n  facet_wrap(~measure, scales = \"free_x\") + \n  labs(title = \"Total Fatalities and Event Count by Event Type per Quarter\", \n       x = \"Value\", \n       y = \"Quarter\") + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nquarters &lt;- unique(marks(armed_clash_myn_ppp))\n\npar(mfrow = c(2,2))\n\nfor (q in quarters){\n  quarter_ppp &lt;- armed_clash_myn_ppp[marks(armed_clash_myn_ppp)==q]\n  plot(quarter_ppp, main=paste(\"Spatial Distribution for\", q), cex = 0.5)\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object",
    "text": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object\n\nq1_2021_ppp &lt;- q1_2021_jitter[states3_owin]\nq2_2021_ppp &lt;- q2_2021_jitter[states3_owin]\nq3_2021_ppp &lt;- q3_2021_jitter[states3_owin]\nq4_2021_ppp &lt;- q4_2021_jitter[states3_owin]\n\n# For 2022\nq1_2022_ppp &lt;- q1_2022_jitter[states3_owin]\nq2_2022_ppp &lt;- q2_2022_jitter[states3_owin]\nq3_2022_ppp &lt;- q3_2022_jitter[states3_owin]\nq4_2022_ppp &lt;- q4_2022_jitter[states3_owin]\n\n# For 2023\nq1_2023_ppp &lt;- q1_2023_jitter[states3_owin]\nq2_2023_ppp &lt;- q2_2023_jitter[states3_owin]\nq3_2023_ppp &lt;- q3_2023_jitter[states3_owin]\nq4_2023_ppp &lt;- q4_2023_jitter[states3_owin]\n\n# For 2024\nq1_2024_ppp &lt;- q1_2024_jitter[states3_owin]\nq2_2024_ppp &lt;- q2_2024_jitter[states3_owin]"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#rescale.ppp",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#rescale.ppp",
    "title": "Take-Home Exercise 1",
    "section": "7.2 Rescale.ppp()",
    "text": "7.2 Rescale.ppp()\n\n# For 2021\nq1_2021_ppp.km = rescale.ppp(q1_2021_ppp, 1000, \"km\")\nq2_2021_ppp.km = rescale.ppp(q2_2021_ppp, 1000, \"km\")\nq3_2021_ppp.km = rescale.ppp(q3_2021_ppp, 1000, \"km\")\nq4_2021_ppp.km = rescale.ppp(q4_2021_ppp, 1000, \"km\")\n\n# For 2022\nq1_2022_ppp.km = rescale.ppp(q1_2022_ppp, 1000, \"km\")\nq2_2022_ppp.km = rescale.ppp(q2_2022_ppp, 1000, \"km\")\nq3_2022_ppp.km = rescale.ppp(q3_2022_ppp, 1000, \"km\")\nq4_2022_ppp.km = rescale.ppp(q4_2022_ppp, 1000, \"km\")\n\n# For 2023\nq1_2023_ppp.km = rescale.ppp(q1_2023_ppp, 1000, \"km\")\nq2_2023_ppp.km = rescale.ppp(q2_2023_ppp, 1000, \"km\")\nq3_2023_ppp.km = rescale.ppp(q3_2023_ppp, 1000, \"km\")\nq4_2023_ppp.km = rescale.ppp(q4_2023_ppp, 1000, \"km\")\n\n# For 2024\nq1_2024_ppp.km = rescale.ppp(q1_2024_ppp, 1000, \"km\")\nq2_2024_ppp.km = rescale.ppp(q2_2024_ppp, 1000, \"km\")\n\nIn the code chunk below, we will compute the KDE of each quarter of each year. bw.diggle method is used to derive the bandwidth of each KDE:\n\npar(mfrow = c(4, 4), mar = c(2, 2, 2, 2)) \n\n# 2021 plots\nplot(density(q1_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2021\")\n\nplot(density(q2_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2021\")\n\n\nplot(density(q3_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2021\")\n\nplot(density(q4_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2021\")\n\n\n# 2022 plots\nplot(density(q1_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2022\")\n\nplot(density(q2_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2022\")\n\n\nplot(density(q3_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2022\")\n\nplot(density(q4_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2022\")\n\n# 2023 plots\nplot(density(q1_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2023\")\n\nplot(density(q2_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2023\")\n\n\nplot(density(q3_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2023\")\n\nplot(density(q4_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2023\")\n\n# 2024 plots\nplot(density(q1_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2024\")\n\nplot(density(q2_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2024\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Take-Home Exercise 1",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(armed_clash_myn_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  armed_clash_myn_ppp.km\nR = 0.26742, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nInterpretation:\n\nThe R-value (0.37315) suggests that the points (armed clashes) are clustered—events tend to occur near each other.\nThe p-value (extremely low) provides very strong evidence against the null hypothesis of randomness. Thus, we conclude that the distribution of armed clashes is not random but instead shows a statistically significant clustered pattern.\n\n\n8.1.1 Clark and Evans Test: Q2 2021\n\nclarkevans.test(q2_2021_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2021_ppp.km\nR = 0.39373, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.2 Clark and Evans Test: Q2 2022\n\nclarkevans.test(q2_2022_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2022_ppp.km\nR = 0.41526, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.3 Clark and Evans Test: Q2 2023\n\nclarkevans.test(q2_2023_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2023_ppp.km\nR = 0.42649, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.4 Clark and Evans Test: Q2 2024\n\nclarkevans.test(q2_2024_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2024_ppp.km\nR = 0.34251, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nReasons to account for the observed pattern:\nBased on the R-value, where lower R values indicate strong clustering, it follows the reasons below:\n\nEscalation of Conflict in the hotspot Area: From 2021 onwards, the area of study has recently experience a military coup in February 2021, which was concentrated as the Tatmadaw (military) cracked down on urban areas and strategic areas. These mentioned states were areas where civilian resistance was particularly strong.\nImplication of Dispersion: This observation is further evidence by the quarterly summation of the deaths by state, where for the same quarters observed below: Q4 2021 - Q2 2022, there was a stark increase in the total_fatalities and event_count, marking the amplification of armed clash battles in the region, accounting for the strong clustering patterns observed from Q2 2021 which showed the strongest clustering out of the 4 quarters assessed and eventual distribution of the conflict towards other areas.\n\n\nquarterly_summary %&gt;% \n  arrange(desc(total_fatalities))\n\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   quarter total_fatalities event_count                                 geometry\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                         &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022             2494         504 ((-11051.37 2410853), (-10908.92 256130…\n 2 Q1 2022             1759         410 ((-13816.45 2549666), (-12383.46 255035…\n 3 Q4 2021             1674         340 ((-12383.46 2550351), (-10581.74 255763…\n 4 Q3 2022             1649         414 ((-14448.48 2310133), (-12383.46 255035…\n 5 Q4 2023             1502         432 ((-13753.92 2572123), (-10781.63 257609…\n 6 Q1 2023             1335         429 ((-9542.333 2376489), (-8200.325 237117…\n 7 Q2 2023             1291         372 ((-10160.54 2446554), (-8954.966 256734…\n 8 Q4 2022             1264         377 ((-10226.14 2411015), (-8954.966 256734…\n 9 Q3 2023              998         428 ((-10171.84 2571422), (-10106 2331539),…\n10 Q3 2021              759         179 ((-13645.89 2571086), (-9197.246 255207…\n11 Q1 2024              757         292 ((-16397.05 2576482), (-13753.92 257212…\n12 Q2 2024              726         279 ((-11281.63 2583340), (-10452.13 257881…\n13 Q2 2021              522         130 ((-13808.2 2533298), (-10226.14 2411015…\n14 Q1 2021               20           8 ((-10581.74 2557635), (-9197.246 255207…\n\n\n\nquarterly_summary_by_state &lt;- armed_clash_sf %&gt;%\n  group_by(quarter, admin1) %&gt;%  # Group by quarter\n  summarise(\n    total_fatalities = sum(FATALITIES, na.rm = TRUE), \n    event_count = n()                               \n  ) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\n`summarise()` has grouped output by 'quarter'. You can override using the\n`.groups` argument.\n\nprint(quarterly_summary_by_state)\n\nSimple feature collection with 42 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 42 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q2 2022 Magway               726         134 ((-11051.37 2410853), (-10745.5…\n10 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n# ℹ 32 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-to-owin-objects",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#converting-sf-to-owin-objects",
    "title": "Take-Home Exercise 1",
    "section": "9.2 Converting sf to owin objects",
    "text": "9.2 Converting sf to owin objects\n\nsagaing_owin = as.owin(sagaing)\nmagway_owin = as.owin(magway)\nmandalay_owin = as.owin(mandalay)\n\n\npar(mfrow=c(1,3))\nplot(sagaing_owin)\nplot(magway_owin)\nplot(mandalay_owin)\n\n\n\n\n\n\n\n\n\n9.2.1 Combining armed clash points and the study area\nBy using the code chunk below, we are able to extract armed clashes that is within the specific region to do our analysis later on.\n\narmed_clash_sng_ppp = armed_clash_jitter[sagaing_owin]\narmed_clash_mgy_ppp = armed_clash_jitter[magway_owin]\narmed_clash_mnd_ppp = armed_clash_jitter[mandalay_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\narmed_clash_sng.km = rescale(armed_clash_sng_ppp, 1000, \"km\")\narmed_clash_mgy.km = rescale(armed_clash_mgy_ppp, 1000, \"km\")\narmed_clash_mnd.km = rescale(armed_clash_mnd_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these 3 study areas and the locations of the battles (armed clashes).\n\npar(mfrow=c(1,3))\nplot(armed_clash_sng.km, main=\"Sagaing\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mgy.km, main=\"Magway\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mnd.km, main=\"Mandalay\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "9.6 Analysing Spatial Point Process Using G-Function",
    "text": "9.6 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I compute the G-function estimation by using Gest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n9.6.1 Computing G-function estimation\n\nG_SNG = Gest(armed_clash_sng_ppp, correction = \"best\")\nplot(G_SNG)\n\n\n\n\n\n\n\n\n\n\n9.6.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_SNG.csr)\n\n\n\n\n\n\n\n\n\n\n9.7 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.In this section, I compute the F-function estimation by using Fest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n\n9.7.1 Computing F-function estimation\n\nF_SNG = Fest(armed_clash_sng_ppp, correction=\"best\")\nplot(F_SNG)\n\n\n\n\n\n\n\n\n\n\n9.7.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Fest, correction = \"all\", nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(F_SNG.csr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Exercise 1",
    "section": "9.8 Analysing Spatial Point Process Using K-Function",
    "text": "9.8 Analysing Spatial Point Process Using K-Function\n\n9.8.1 Computing K-function estimation\n\n#K_SNG = Kest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(K_SNG, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with K-fucntion\n\n#K_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Kest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(K_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Exercise 1",
    "section": "9.9 Analysing Spatial Point Process Using L-Function",
    "text": "9.9 Analysing Spatial Point Process Using L-Function\n\n9.9.1 Computing L-function estimation\n\n#L_SNG = Lest(armed_clash_sng_ppp, correction = \"Ripley\")\n#plot(L_SNG, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with L-fucntion\n\n#L_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Lest, nsim = 30, rank = 1, glocal=TRUE)\n\n\n#plot(L_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:",
    "text": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:\n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \ntm_shape(armed_clash_sagaing) + \n  tm_dots(size = 0.1, alpha = 0.5) + \ntm_facets(by=\"quarter\", \n          free.coords=FALSE,\n          drop.units = TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "title": "Take-Home Exercise 1",
    "section": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground",
    "text": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground\nAlong with the quarterly visualization of the armed clashes, we see a corresponding fixation of attacks on the Southern point of the Sagaing, near the border of two other states in conflict (Madway and Mandalay). According to the article by Think Global Health:\n\nAttacks on Health Care in Myanmar, 2021 – 2023\nMyanmar’s health system is under attack countrywide, with the greatest number of attacks taking place in the Sagaing, Mandalay, and Yangon regions.\nAccording to Insecurity Insight, a nonprofit group collecting data on conflicts worldwide, nearly 1,200 attacks on health-care workers and facilities have taken place in the three years since the coup. Doctors, aid workers, and other medical personnel have been detained and arrested, targeted for allegedly taking care of protestors or participating in the civil disobedience movement (CDM).  \n\n\nquarterly_summary_sagaing &lt;- quarterly_summary_by_state %&gt;% \n  filter(admin1 == \"Sagaing\")\nquarterly_summary_sagaing  \n\nSimple feature collection with 14 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n * &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n10 Q3 2021 Sagaing              521         130 ((-13645.89 2571086), (-9197.24…\n11 Q1 2024 Sagaing              451         190 ((-16397.05 2576482), (-13753.9…\n12 Q2 2021 Sagaing              387          90 ((-13808.2 2533298), (-9514.18 …\n13 Q2 2024 Sagaing              348         133 ((-11281.63 2583340), (-10452.1…\n14 Q1 2021 Sagaing               13           4 ((-10581.74 2557635), (-9197.24…\n\n\nCoincidentally (or not), the quarters with the higest number of recorded fatalities fall between Q4 2021 - Q3 2022, where we will focus the computation of STKDE\n\narmed_clash_sagaing\n\nSimple feature collection with 2903 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10 Q1 2022 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Day of Year",
    "text": "10.2 Computing STKDE by Day of Year\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;% \n  filter(admin1 == \"Sagaing\") %&gt;% \n  filter(quarter %in% c(\"Q4 2021\", \"Q1 2022\", \"Q2 2022\", \"Q3 2022\")) %&gt;% \n  mutate(dayYear = yday(event_date)) %&gt;% \n  mutate(monthNum = month(event_date)) %&gt;% \n  mutate(monthFac = month(event_date,\n                          label=TRUE,\n                          abbr=FALSE))\narmed_clash_year_sf\n\nSimple feature collection with 1119 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2863190\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,119 × 11\n   quarter event_type sub_event_type admin1           geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;         &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-02-01\n 2 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-03-24\n 3 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-15\n 4 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-23\n 5 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-03-18\n 6 Q1 2022 Battles    Armed clash    Sagai…    (95831 2496973) 2022-01-11\n 7 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-01-24\n 8 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-02-04\n 9 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-01-12\n10 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-02-05\n# ℹ 1,109 more rows\n# ℹ 5 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, dayYear &lt;dbl&gt;,\n#   monthNum &lt;dbl&gt;, monthFac &lt;ord&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\narmed_clash_yday_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(dayYear) %&gt;% \n  as.ppp()\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_yday_owin &lt;- armed_clash_yday_ppp[sagaing_owin]\nsummary(sagaing_yday_owin)\n\nMarked planar point pattern:  1119 points\nAverage intensity 1.192011e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    91.0   172.0   176.3   260.5   365.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_yday_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp(sagaing_yday_owin)\n\nInitialising...Done.\nOptimising...\nh = 26068.43 \b; lambda = 29.14375 \nh = 28675.27 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 2635.987 \nh = 26720.14 \b; lambda = 1332.565 \nh = 27371.85 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 1332.565 \nh = 26394.29 \b; lambda = 680.8545 \nh = 26557.21 \b; lambda = 354.9991 \nh = 26638.68 \b; lambda = 192.0715 \nh = 26679.41 \b; lambda = 110.6076 \nh = 26699.78 \b; lambda = 69.87568 \nDone.\n\n\n          h      lambda \n26699.77626    69.87568 \n\n\n\nkde_yday &lt;- spattemp.density(sagaing_yday_owin,\n                             h=26699.77626,\n                             lambda=69.87568)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 26699.78 (spatial)\n  lambda = 69.8757 (temporal)\n\nNo. of observations\n  1119 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 365]\n\nEvaluation\n  128 x 128 x 365 trivariate lattice\n  Density range: [1.553021e-30, 1.912896e-13]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:365\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#saving-intermediate-datasets",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#saving-intermediate-datasets",
    "title": "Take-Home Exercise 1",
    "section": "10.3 Saving Intermediate Datasets:",
    "text": "10.3 Saving Intermediate Datasets:\n\nwrite_rds(healthcare_sng, \"data/rds/healthcare_sng.rds\")\nwrite_rds(quarterly_summary, \"data/rds/quarterly_summary.rds\")\nwrite_rds(quarterly_summary_by_state, \"data/rds/quarterly_summary_by_state.rds\")\nwrite_rds(state3_sf, \"data/rds/state3_sf.rds\")\nwrite_rds(event_density_data, \"data/rds/event_density_data.rds.rds\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#key-findings",
    "href": "Take-Home_Exercise/TakeHomeEx01 /TakeHomeEx01.html#key-findings",
    "title": "Take-Home Exercise 1",
    "section": "Key Findings:",
    "text": "Key Findings:\n\nClustering of Armed Clashes:\n\nWithin Q4 2021 to Q2 2022, with R-values indicating a highly clustered distribution of conflict events. This clustering is particularly evident in Sagaing, Mandalay, and Magway, where much of the conflict was concentrated.\nThe clustering can be attributed to the ongoing civil resistance following the military coup in Myanmar in 2021, with Sagaing experiencing heavily intense conflicts. This has prompted me to research further, finding that: \n\nThe area is prone to natural disasters, being located at the ‘Sagaing fault’ and is already a natural hotspot for refugee / displaced individuals due to the socio-economic plight it has faced, as part of the ‘Dry Zone’ \nMilitary Conscription drives has ‘provoked reverse migration, pushing young men who fled Myanmar’s war-torn Dry Zone to give up their livellihoods and risk their lives to return home’ \n\n\nKernel Density Estimation:\n\nKDE analysis allowed us to visualize the intensity of conflict over time. Using fixed bandwidth (e.g., bw.ppl()), we observed that while the intensity of conflict was concentrated in certain regions, particularly in Sagaing, there was a gradual dispersion of conflict events over time into neighboring regions such as Magway and Mandalay.\nThe choice of bandwidth (sigma) and kernel function was important for interpreting both local and broader trends in armed clashes. The Gaussian kernel was effective in showing overall trends, while smaller sigmas captured finer details, especially in high-density areas. Initially, I actually went with bw.diggle instead of bw.ppl bandwidth as I thought bw.diggle() is always the best choice for detecting clusters, and bw.ppl is better for smoothing over broader areas. However, this interpretation may be overly simplistic. \n\nGoing by bw.diggle, I obtained a really small sigma value which might have been a sign of overfitting. Furthermore, because of the plotting and the movement of the conflict over time, we ought to expect multiple clsuter, which implied bw.ppl was a better fit. \n\n\nSpatio-temporal KDE:\n\nThe STKDE provided a nuanced view of how conflict events evolved quarter by quarter, confirming that some periods saw a stark increase in fatalities, such as Q4 2021 through Q2 2022.\nThe temporal analysis highlighted the cyclical nature of the conflict, with periods of intense violence followed by temporary dispersions or shifts in conflict zones.\n\n2nd-Order Spatial Point Pattern Analysis:\n\nThe use of G-, F-, K-, and L-functions provided further confirmation of the non-random distribution of armed clashes. These functions indicated significant spatial interaction among the conflict points, suggesting that the locations of armed clashes were influenced by proximity to other events, reflecting the complex nature of the conflict. 2nd Point Pattern Analysis allowed me to research further on the conflicting factors that affected (random) spatial distribution of armed conflict, and found the unfortunate but deliberate choice to target civilian institutions like hospitals.\n\nHealthcare as a Battleground:\n\nBy overlaying points of interest (POI) such as hospitals and healthcare facilities onto the map, we observed that many clashes occurred near key civilian infrastructure. This aligns with findings that healthcare has become a battleground in Myanmar, particularly in Sagaing and surrounding regions. Attacks on healthcare facilities have not only disrupted medical services but also contributed to the broader humanitarian crisis in the region."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#objectives",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#objectives",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#packages-used",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#packages-used",
    "title": "Take-Home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\nThe table below provides a summary of the packages I’ve used for this exercise\n\nThe code chunk below installs and launches the R packages,\n\n\ntidyverse\nfor performing data science tasks such as importing, wrangling and visualising data.\nIt contains the following packages used :\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\n\nsf\npackage provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n\ntmap\nwhich provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\nspatstat\nhas functions useful for Point Pattern Analysis\n\n\nraster\nreads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)\n\n\nspNetwork\nwhich provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n\nsp\n\n\n\ndplyr\n\n\n\nsparr\nprovides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n\nanimation\n\n\n\n\n\npacman::p_load(tidyverse, sf, sp, tmap, spatstat, raster, spNetwork, RColorBrewer,dplyr, sparr,animation, magick)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#datasets-used",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#datasets-used",
    "title": "Take-Home Exercise 1",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nIn response to the background context of the armed conflict happening in Myanmar, the exercise aims to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\nUpon further research, I’ve managed to come across an interesting resource which maps out the Warscapes in Myanmar. It illustrates the variations in the type of conflict inflicted in different zones of the country\n\nAspatial Data\n\nMYNMAR.CSV dataset derived from Armed Conflict Location & Event Data Project (ACLED), a non-profit organization collecting, analyzing and mapping data on political violence and protest events around the world. (Limited to Jan 2021 - June 2024)\n\n\n\nGeospatial\nThe following datasets were obtained from: https://data.humdata.org/organization/mimu\n\nMyanmar Country Boundaries MIMU\nMyanmar State_Region Boundaries MIMU\nPoints of Interest from OpenStreetMap, depicting different categories of features mapped by the OSM community. It depicts various categories such as : public services and infrastructure, emergency and safety locations, amenities etc.\n\nThis additional dataset from OpenStreetMap is crucial for analyzing armed conflict in Myanmar as it provides detailed geographic information on key locations such as public services, infrastructure, and emergency and safety sites. Understanding the distribution of these points of interest helps in assessing the impact of conflict on civilian infrastructure, access to essential services, and the safety of affected populations. Furthermore, it may aid in planning humanitarian assistance, evacuation routes, and monitoring areas of strategic importance during the conflict through data insights.\nFor the purposes of this exercise, we will focus on the State/Region boundaries, seeing as the conflict is generally explored in this manner (as inferred from the given references in the Take Home Exercise Overview). This is represented by the first administrative level (admin1). Myanmar is divided into 7 states and 7 regions (plus the Union Territory of Naypyidaw).\nThese boundaries are politically and administratively significant. Different states (e.g., Kachin, Rakhine, Shan) and regions have distinct ethnic compositions and different conflict dynamics, making this level critical for understanding broader conflict patterns."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#importing-spatial-data",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#importing-spatial-data",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Importing Spatial Data",
    "text": "3.1 Importing Spatial Data\n\n1. Myanmar CSV\nUsing read_csv to import the data in the MYANMAR.CSV file, which is the ACLED Dataset detailing armed conflict in Myanmar:\n\narmed_conflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck and transform the CRS of the ACLED Dataset:\n\ncolnames(armed_conflict_data)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\n\n\narmed_conflict &lt;- st_as_sf(armed_conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;% \n  st_transform(armed_conflict, crs=32647)\n\n\n\n2. Country, State, Region, District Boundaries\nUsing the st_read function, we will import data from the State & Region Sub-boundary dataset to visualize Myanmar’s landscape. We will focus our analysis on the State_Region Level (Admin1)\n\nstate_region_sf &lt;-  st_read(dsn=\"data/geospatial/stateRegion\", layer \n=\"mmr_polbnda_adm1_250k_mimu_1\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01/data/geospatial/stateRegion' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\ndistrict_sf &lt;- st_read(dsn=\"data/geospatial/district\", layer \n=\"mmr_polbnda_adm2_250k_mimu\") %&gt;% \n  st_transform(myanmar_sf, crs=32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01/data/geospatial/district' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nAfter importing the dataset, we will plot to see the boundaries of the State & Regions of Myanmar. The plot() function is used to plot the geometry of the sf object. The st_geometry() function is used to extract the geometry of the state_region_sf object.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_polygons() + \n  tm_text(\"ST\", size =0.9, just=\"center\")\n\n\n\n\n\n\n\ntm_layout(frame=FALSE)\n\n$tm_layout\n$tm_layout$frame\n[1] FALSE\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\n\n3. Points of Interest\nFrom here on out, we will denote points-of-interest as POI.\nI will load the corresponding shapefile:\n\npoi_sf &lt;- st_read(dsn = \"data/geospatial/pointsOfInterest\", layer = \"hotosm_mmr_points_of_interest_points_shp\") %&gt;%\n  st_set_crs(4326) %&gt;%  \n  st_transform(crs = 32647)  \n\nReading layer `hotosm_mmr_points_of_interest_points_shp' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Take-Home_Exercise/TakeHomeEx01/data/geospatial/pointsOfInterest' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56187 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 92.15357 ymin: 9.756896 xmax: 101.1515 ymax: 28.36754\nCRS:           NA\n\n\n\nst_crs(poi_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\ncolnames(poi_sf)\n\n [1] \"name\"       \"name_en\"    \"amenity\"    \"man_made\"   \"shop\"      \n [6] \"tourism\"    \"opening_ho\" \"beds\"       \"rooms\"      \"addr_full\" \n[11] \"addr_house\" \"addr_stree\" \"addr_city\"  \"source\"     \"name_my\"   \n[16] \"osm_id\"     \"osm_type\"   \"geometry\"  \n\n\nBased on the unique amenities, those that would be relevant in analyzing armed conflict effects in Myanmar would be : “hospital” , “refugee_site”, “Health centre” , “clinic”:\n\npoi_sf &lt;- poi_sf %&gt;% \n  mutate(amenity = str_to_lower(amenity)) %&gt;% \n  filter(amenity %in% c(\"refugee_site\", \"hospital\", \"health center\")) %&gt;% \n  dplyr::select(name_en, amenity, geometry)\n\npoi_sf\n\nSimple feature collection with 617 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -211935.1 ymin: 1103190 xmax: 697952 ymax: 3026108\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                         name_en  amenity                 geometry\n1                           &lt;NA&gt; hospital POINT (439165.5 1562018)\n2       Kalar Chaunggyi Hospital hospital POINT (262988.5 1908198)\n3                  militry O.P.T hospital POINT (238995.6 2440150)\n4           Myint Mo Oo Hospital hospital POINT (414147.5 1556093)\n5             Chan Myae Hospital hospital POINT (412546.6 1555811)\n6              Mediland Hospital hospital POINT (412151.4 1557561)\n7  Traditional Medicine Hospital hospital POINT (411729.3 1557083)\n8                           &lt;NA&gt; hospital POINT (458901.2 1144896)\n9              Kra Buri Hospital hospital POINT (475772.4 1149467)\n10        Dawei General Hospital hospital POINT (413966.3 1556630)\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) +\n  tm_polygons(alpha=0.5) + \n  tm_shape(poi_sf) +\n  tm_dots(col = \"amenity\", palette = \"Set1\",\n          title=\"Amenity Type\") +\n  tm_layout(main.title = \"Distribution of Healthcare Infrastructure & Amenities\", \n            main.title.position = c(\"center\", \"top\")\n  ) + \n  tm_layout(legend.outside=TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#data-preparation",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nBefore a thematic map can be prepared, we have to prepare a data table which includes the variables event types, focused on : Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nstr(armed_conflict)\n\nsf [42,608 × 30] (S3: sf/tbl_df/tbl/data.frame)\n $ event_id_cnty     : chr [1:42608] \"MMR64313\" \"MMR64320\" \"MMR64321\" \"MMR64322\" ...\n $ event_date        : chr [1:42608] \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" \"30 June 2024\" ...\n $ year              : num [1:42608] 2024 2024 2024 2024 2024 ...\n $ time_precision    : num [1:42608] 1 1 1 1 1 1 1 1 1 1 ...\n $ disorder_type     : chr [1:42608] \"Political violence\" \"Political violence\" \"Political violence\" \"Strategic developments\" ...\n $ event_type        : chr [1:42608] \"Battles\" \"Battles\" \"Battles\" \"Strategic developments\" ...\n $ sub_event_type    : chr [1:42608] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Change to group/activity\" ...\n $ actor1            : chr [1:42608] \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"People's Defense Force - Mandalay\" \"Military Forces of Myanmar (2021-)\" ...\n $ assoc_actor_1     : chr [1:42608] \"MDA - AGF: Madaya - The Authentic Genes Force; SSTF: Security & Special Task Force CDM People's Police\" NA NA NA ...\n $ inter1            : num [1:42608] 3 3 3 1 3 1 1 2 1 1 ...\n $ actor2            : chr [1:42608] \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" \"Military Forces of Myanmar (2021-)\" NA ...\n $ assoc_actor_2     : chr [1:42608] NA NA NA NA ...\n $ inter2            : num [1:42608] 1 1 1 0 1 0 2 1 2 2 ...\n $ interaction       : num [1:42608] 13 13 13 10 13 10 12 12 12 12 ...\n $ civilian_targeting: chr [1:42608] NA NA NA NA ...\n $ iso               : num [1:42608] 104 104 104 104 104 104 104 104 104 104 ...\n $ region            : chr [1:42608] \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" \"Southeast Asia\" ...\n $ country           : chr [1:42608] \"Myanmar\" \"Myanmar\" \"Myanmar\" \"Myanmar\" ...\n $ admin1            : chr [1:42608] \"Mandalay\" \"Mandalay\" \"Mandalay\" \"Sagaing\" ...\n $ admin2            : chr [1:42608] \"Mandalay\" \"Pyinoolwin\" \"Pyinoolwin\" \"Shwebo\" ...\n $ admin3            : chr [1:42608] \"Patheingyi\" \"Singu\" \"Thabeikkyin\" \"Khin-U\" ...\n $ location          : chr [1:42608] \"Aung Tha Pyay\" \"Pin Lel Gyi\" \"Thabeikkyin\" \"Khin-U\" ...\n $ geo_precision     : num [1:42608] 2 1 2 2 2 2 1 1 2 1 ...\n $ source            : chr [1:42608] \"Democratic Voice of Burma; Irrawaddy\" \"Irrawaddy\" \"Irrawaddy\" \"Democratic Voice of Burma; Khit Thit Media\" ...\n $ source_scale      : chr [1:42608] \"National\" \"National\" \"National\" \"Subnational-National\" ...\n $ notes             : chr [1:42608] \"On 30 June 2024, near Aung Tha Pyay village (Patheingyi township, Mandalay district, Mandalay region), a combin\"| __truncated__ \"On 30 June 2024, in Pin Lel Gyi village (Singu township, Pyinoolwin district, Mandalay region), the People's De\"| __truncated__ \"On 30 June 2024, in Thabeikkyin township (Pyinoolwin district, Mandalay region), the People's Defense Force - M\"| __truncated__ \"Change to armed group: On 30 June 2024, in Khin-U town (Khin-U township, Shwebo district, Sagaing region), a mi\"| __truncated__ ...\n $ fatalities        : num [1:42608] 0 0 0 0 0 0 0 2 0 0 ...\n $ tags              : chr [1:42608] NA NA NA NA ...\n $ timestamp         : num [1:42608] 1.72e+09 1.72e+09 1.72e+09 1.72e+09 1.72e+09 ...\n $ geometry          :sfc_POINT of length 42608; first list element:  'XY' num [1:2] 214961 2452068\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"event_id_cnty\" \"event_date\" \"year\" \"time_precision\" ...\n\n\nHere is a visual overview of the 4 different types of Armed Conflict (based on event_types) :\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(state_region_sf) + \n  tm_borders(col = \"black\") + \n  tm_shape(armed_conflict) + \n  tm_dots(col = \"event_type\", palette = \"Set1\", size = 0.01, alpha = 0.5) +\n  tm_facets(by = \"event_type\") + \n  tm_layout(title = \"Armed Conflict in Myanmar (Jan 2021 - Jun 2024)\", \n            legend.outside = TRUE) +\n  tm_legend(title = \"Event Type\")\n\n\n\n\n\n\n\n\nFrom the plots above, we see that armed conflict even types seem to concentrate in the North-west region, particularly at the boundary of Sagaing, Mandalay and Magwe state, which we will zoom in on.\nIn order to group and have a sensing of the effects of armed conflict, we will aggregate based on fatalities to see a quick overview as well as their state (administrative boundary 1) :\n\narmed_conflict_fatalities &lt;- armed_conflict %&gt;% \n  group_by(admin1, event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Summarize fatalities based on the administrative boundary (stateRegion)\n  group_by(admin1) %&gt;% \n  mutate(total_fatalities_admin1 = sum(total_fatalities)) %&gt;% \n  ungroup() %&gt;% \n  \n  #Arrange admin1 by descending order of fatalities and then the event type \n  arrange(desc(total_fatalities_admin1), admin1, desc(total_fatalities)) \n\n`summarise()` has grouped output by 'admin1'. You can override using the\n`.groups` argument.\n\narmed_conflict_fatalities\n\nSimple feature collection with 72 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 72 × 5\n   admin1   event_type                total_fatalities                  geometry\n   &lt;chr&gt;    &lt;chr&gt;                                &lt;dbl&gt;          &lt;MULTIPOINT [m]&gt;\n 1 Sagaing  Battles                              11225 ((-16397.05 2576482), (-…\n 2 Sagaing  Explosions/Remote violen…             5161 ((-13753.92 2572123), (-…\n 3 Sagaing  Violence against civilia…             2513 ((-13808.2 2533298), (-1…\n 4 Sagaing  Strategic developments                  40 ((-16397.05 2576482), (-…\n 5 Magway   Battles                               3910 ((-14448.48 2310133), (-…\n 6 Magway   Explosions/Remote violen…             1701 ((-11811.97 2503484), (-…\n 7 Magway   Violence against civilia…              544 ((-9822.857 2409014), (-…\n 8 Magway   Strategic developments                  17 ((-11256.98 2417070), (-…\n 9 Mandalay Battles                               1658 ((69197.66 2321843), (84…\n10 Mandalay Explosions/Remote violen…             1051 ((75228.96 2349261), (96…\n# ℹ 62 more rows\n# ℹ 1 more variable: total_fatalities_admin1 &lt;dbl&gt;\n\n\nBased on the above result, we see that the fatalities are concentrated in are concentrated in these 3 states: Sagaing, Magway and Mandalay.\nThe code chunk below explores the data further:\n\narmed_conflict_fatalities_by_event_type &lt;- armed_conflict %&gt;% \n  group_by(event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\narmed_conflict_fatalities_by_event_type\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 4\n  event_type              total_fatalities event_count                  geometry\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;int&gt;          &lt;MULTIPOINT [m]&gt;\n1 Battles                            35924       12049 ((-207135 2358896), (-20…\n2 Explosions/Remote viol…            11562       12208 ((-208804.4 2357274), (-…\n3 Violence against civil…             6478        6225 ((-206931.7 2359490), (-…\n4 Strategic developments               127       12126 ((-206931.7 2359490), (-…\n\n\nBefore doing so, let’s explore the nuances in the naming convention to understand a potential reason why conflict arises:\n\narea_names &lt;- state_region_sf %&gt;% \n  distinct(ST_RG) %&gt;% \n  pull(ST_RG)\n\narea_names\n\n[1] \"Region\"          \"State\"           \"Union Territory\"\n\n\n\nKey Differences\n\nState:\n\nRepresents areas predominantly inhabited by ethnic minorities, each with their own cultural and historical significance.\nOften involved in ethnic conflicts, seeking more autonomy.\n\nRegion:\n\nRepresents the Bamar-majority areas, which have more economic and political power.\nTypically less conflict-prone compared to states.\n\nUnion Territory:\n\nA special administrative area directly controlled by the central government (e.g., the capital region).\nNo local parliament or legislative autonomy."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#subsetting-the-data",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#subsetting-the-data",
    "title": "Take-Home Exercise 1",
    "section": "3.3 Subsetting the data:",
    "text": "3.3 Subsetting the data:\n\n3.3.1 Data Processing of subsetted dataset - MYANMAR.CSV\nWe’ll now process the data to see the corresponding fatalities with the different event types mentioned above, Battles, Explosions/Remote violence, Strategic developments and Violence against civilians.\nFrom this point forward, we will focus on the event_type of ‘Battles’ and sub_event_type of ‘Armed Clash’ as it would be interesting to analyse given that it has the most event counts and fatalities as aggregated in the code above:\n\nSince we are interested in deriving the quarterly KDE layers, we will convert the event_date column (currently in [chr] format), into a Date object that can be used for further analysis.\n\n\narmed_conflict_sf &lt;- armed_conflict %&gt;%\n  filter(event_type == \"Battles\") %&gt;% \n  filter(admin1 %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  dplyr::select(1:3, 5:8, 11, 15, 19, 20, 27, 29, 30)\n\nSave the intermediate dataset to rds:\n\nwrite_rds(armed_conflict_sf, \"data/rds/armed_conflict_sf.rds\")\n\nWe change the CRS to 32647 given that it is in the North Western Zone of Myanmar:\n\narmed_conflict_sf &lt;- read_rds(\"data/rds/armed_conflict_sf.rds\") %&gt;% \n  st_transform(crs = 32647) \n\n\nhead(armed_conflict_sf)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 146213 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 14\n  event_id_cnty event_date   year disorder_type event_type sub_event_type actor1\n  &lt;chr&gt;         &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n1 MMR64313      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n2 MMR64320      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n3 MMR64321      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n4 MMR64323      30 June 20…  2024 Political vi… Battles    Armed clash    PKDF …\n5 MMR64314      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n6 MMR64319      30 June 20…  2024 Political vi… Battles    Armed clash    Peopl…\n# ℹ 7 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\narmed_conflict_sf &lt;- armed_conflict_sf %&gt;% \n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) %&gt;% \n  mutate(quarter = paste0(\"Q\", quarter(event_date), \" \", year(event_date)))\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_conflict_battles &lt;- armed_conflict_sf %&gt;% \n  group_by(event_type, sub_event_type) %&gt;% \n  summarize(total_fatalities = sum(fatalities, na.rm=TRUE), \n            event_count = n()) %&gt;% \n    filter(event_type == \"Battles\") %&gt;% \n    ungroup() \n\n`summarise()` has grouped output by 'event_type'. You can override using the\n`.groups` argument.\n\narmed_conflict_battles\n\nSimple feature collection with 3 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 5\n  event_type sub_event_type                      total_fatalities event_count\n  &lt;chr&gt;      &lt;chr&gt;                                          &lt;dbl&gt;       &lt;int&gt;\n1 Battles    Armed clash                                    16750        4681\n2 Battles    Government regains territory                       0           1\n3 Battles    Non-state actor overtakes territory               43          15\n# ℹ 1 more variable: geometry &lt;GEOMETRY [m]&gt;\n\n\n\ntotal_deaths &lt;- armed_conflict %&gt;% summarize(total_fatalities = sum(fatalities, na.rm=TRUE),\n            event_count = n())\n\ntotal_deaths\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 3\n  total_fatalities event_count                                          geometry\n             &lt;dbl&gt;       &lt;int&gt;                                  &lt;MULTIPOINT [m]&gt;\n1            54091       42608 ((-208804.4 2357274), (-207135 2358896), (-20693…\n\n\nOut of 54091 deaths for the whole of Myanmar for Jan 2021 - Jun 2024, encompassing all event_types and sub_event_types recorded, deaths from event_type == “Battles” , specifically the sub_event_type of “Armed clash” has lead to 34581 deaths in the states of Myanmar alone, accounting for ~63.9% of deaths.\n\n\n3.3.1 Data Processing of subsetted dataset - State_Region_sf\n\nstate3_sf &lt;- state_region_sf %&gt;% \n  filter(ST %in% c(\"Sagaing\", \"Magway\", \"Mandalay\")) %&gt;% \n  st_transform(crs = 32647)\n\nstate3_sf\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -37628.21 ymin: 2086865 xmax: 308341.4 ymax: 3029739\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID       ST ST_PCODE  ST_RG          ST_MMR PCode_V\n1        8   Magway   MMR009 Region   မကွေးတိုင်းဒေသကြီး     9.4\n2        9 Mandalay   MMR010 Region မန္တလေးတိုင်းဒေသကြီး     9.4\n3       13  Sagaing   MMR005 Region  စစ်ကိုင်းတိုင်းဒေသကြီး     9.4\n                        geometry\n1 MULTIPOLYGON (((-1717.607 2...\n2 MULTIPOLYGON (((208184.3 26...\n3 MULTIPOLYGON (((275295.6 30...\n\n\n\nplot(state3_sf)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#filtering-down-to-battles-armed-clash",
    "title": "Take-Home Exercise 1",
    "section": "3.4 Filtering down to Battles, Armed Clash",
    "text": "3.4 Filtering down to Battles, Armed Clash\n\n3.4.1 Analyzing Densities based on fatalities and event_count\nCalculating area of each state in km^2:\n\nstate3_sf &lt;- state3_sf %&gt;% \n  mutate(area_km2 = st_area(geometry) / 1e6)\n\nDensity for Fatalities & Event_count in the area:\n\nevent_density_data &lt;- armed_conflict_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    total_events = n(),               \n    total_fatalities = sum(fatalities, na.rm = TRUE)  \n  ) %&gt;% \n  ungroup()\n\nMerge the event data with the state-level area data\n\nevent_density_data\n\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3 × 4\n  admin1   total_events total_fatalities                                geometry\n  &lt;chr&gt;           &lt;int&gt;            &lt;dbl&gt;                        &lt;MULTIPOINT [m]&gt;\n1 Magway           1115             3910 ((-14448.48 2310133), (-11778.42 23314…\n2 Mandalay          602             1658 ((69197.66 2321843), (84966.22 2353705…\n3 Sagaing          2980            11225 ((-16397.05 2576482), (-13816.45 25496…\n\n\n\nevent_density_data &lt;- state3_sf %&gt;%\n  st_join(event_density_data, by = \"admin1\")\n\n\ncolnames(event_density_data)\n\n [1] \"OBJECTID\"         \"ST\"               \"ST_PCODE\"         \"ST_RG\"           \n [5] \"ST_MMR\"           \"PCode_V\"          \"area_km2\"         \"admin1\"          \n [9] \"total_events\"     \"total_fatalities\" \"geometry\"        \n\n\n\nevent_density_data &lt;- event_density_data %&gt;%\n  mutate(\n    event_density = total_events / area_km2,         \n    fatality_density = total_fatalities / area_km2    \n  )\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Plot event density\ntm_shape(event_density_data) +\n  tm_polygons(\"event_density\", title = \"Event Density (Events/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n# Plot fatality density\ntm_shape(event_density_data) +\n  tm_polygons(\"fatality_density\", title = \"Fatality Density (Fatalities/km²)\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.1 Subsetting the data:\n\narmed_conflict_sf\n\nSimple feature collection with 4697 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,697 × 15\n   event_id_cnty event_date  year disorder_type event_type sub_event_type actor1\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt; \n 1 MMR64313      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 2 MMR64320      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 3 MMR64321      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 4 MMR64323      2024-06-30  2024 Political vi… Battles    Armed clash    PKDF …\n 5 MMR64314      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 6 MMR64319      2024-06-30  2024 Political vi… Battles    Armed clash    Peopl…\n 7 MMR64317      2024-06-30  2024 Political vi… Battles    Armed clash    PSLF/…\n 8 MMR64286      2024-06-29  2024 Political vi… Battles    Armed clash    Peopl…\n 9 MMR64288      2024-06-29  2024 Political vi… Battles    Non-state act… PSLF/…\n10 MMR64293      2024-06-29  2024 Political vi… Battles    Armed clash    Na Ga…\n# ℹ 4,687 more rows\n# ℹ 8 more variables: actor2 &lt;chr&gt;, civilian_targeting &lt;chr&gt;, admin1 &lt;chr&gt;,\n#   admin2 &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   quarter &lt;chr&gt;\n\n\n\narmed_clash_sf &lt;- armed_conflict_sf %&gt;% \n  filter(event_type == \"Battles\", sub_event_type ==\"Armed clash\") %&gt;% \n  group_by(quarter, event_type, sub_event_type, admin1, geometry, event_date) %&gt;% \n  summarize(\n      `FATALITIES` = sum(fatalities, na.rm=TRUE), \n      event_count = n()\n  ) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'quarter', 'event_type', 'sub_event_type',\n'admin1', 'geometry'. You can override using the `.groups` argument.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-object-to-sp-object",
    "title": "Take-Home Exercise 1",
    "section": "3.5 Converting sf Object to sp Object",
    "text": "3.5 Converting sf Object to sp Object\n\narmed_clash_sp &lt;- as(armed_clash_sf, \"Spatial\")\nstate3_sp &lt;- as(state3_sf, \"Spatial\")\n\n\ncolnames(armed_clash_sf)\n\n[1] \"quarter\"        \"event_type\"     \"sub_event_type\" \"admin1\"        \n[5] \"geometry\"       \"event_date\"     \"FATALITIES\"     \"event_count\"   \n\n\n\nunique_coordinates &lt;- armed_clash_sf %&gt;%\n  summarise(unique_count = n_distinct(geometry))  # Directly on geometry column\n\n# For total event count\ntotal_armed_clash_count &lt;- armed_clash_sf %&gt;% \n  summarise(event_count = sum(event_count, na.rm = TRUE))\n\n# Print results\nprint(unique_coordinates)\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  unique_count                                                          geometry\n         &lt;int&gt;                                                  &lt;MULTIPOINT [m]&gt;\n1         1547 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), …\n\nprint(total_armed_clash_count)  \n\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 2\n  event_count                                                           geometry\n        &lt;int&gt;                                                   &lt;MULTIPOINT [m]&gt;\n1        4681 ((-16397.05 2576482), (-14448.48 2310133), (-13816.45 2549666), (…\n\n\nOut of 4681 Armed Clash conflict events, only 1547 unique coordinate points are recorded, indicating the that armed clashes occurred more than once for the coordinate points in general."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sp-object-to-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "3.6 Converting sp Object to spatstat’s ppp Format",
    "text": "3.6 Converting sp Object to spatstat’s ppp Format\n\nglimpse(armed_clash_sp)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 4594 obs. of  7 variables:\n  .. ..$ quarter       : chr [1:4594] \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" \"Q1 2021\" ...\n  .. ..$ event_type    : chr [1:4594] \"Battles\" \"Battles\" \"Battles\" \"Battles\" ...\n  .. ..$ sub_event_type: chr [1:4594] \"Armed clash\" \"Armed clash\" \"Armed clash\" \"Armed clash\" ...\n  .. ..$ admin1        : chr [1:4594] \"Magway\" \"Magway\" \"Magway\" \"Mandalay\" ...\n  .. ..$ event_date    : Date[1:4594], format: \"2021-03-30\" \"2021-03-31\" ...\n  .. ..$ FATALITIES    : num [1:4594] 1 1 4 1 2 4 6 1 2 5 ...\n  .. ..$ event_count   : int [1:4594] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:4594, 1:2] -4389 -4389 -6592 97374 101220 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -16397 2108023 255317 2987342\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\narmed_clash_ppp &lt;- as.ppp(armed_clash_sf)\n\nWarning in as.ppp.sf(armed_clash_sf): only first attribute column is used for\nmarks\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\nplot(armed_clash_ppp)\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#handling-duplicated-points",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#handling-duplicated-points",
    "title": "Take-Home Exercise 1",
    "section": "3.7 Handling Duplicated Points",
    "text": "3.7 Handling Duplicated Points\nWe check for duplication in the ppp object using the code chunk below. Before processing, we need to account for the fact that we have divided the data into quarters, which would result in the event_types at the same location being treated as separate points, but spatstat recognizing them as duplicates as they share the exact same coordinates.\n\nany(duplicated(armed_clash_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(armed_clash_ppp) &gt; 1)\n\n[1] 2503\n\n\nTo account for the number of locations which have more than one point event, we can use the code chunk below:\n\ncoords &lt;- st_coordinates(armed_clash_sf)\ncoords_df &lt;- as.data.frame(coords)\n\nlocation_counts &lt;- coords_df %&gt;% \n  group_by(X,Y) %&gt;% \n  summarize(count = n()) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'X'. You can override using the `.groups`\nargument.\n\nlocations_with_multiple_events &lt;- location_counts %&gt;% \n  filter(count &gt; 1)\n\ncount_locations_with_multiple_events &lt;- nrow(locations_with_multiple_events)\ncount_locations_with_multiple_events\n\n[1] 607\n\n\nOut of 1547 unique coordinate points, 515 have more than one conflict events occuring throughout the time period of Jan 2021 - Jun 2024, which could account for the 2503 duplicate count above.\n\ntmap_mode('view')\n\ntm_shape(armed_clash_sf) + \n  tm_dots(alpha = 0.7, size = 0.01)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#spotting-duplicate-points-from-the-map-shown",
    "title": "Take-Home Exercise 1",
    "section": "3.8 Spotting Duplicate points from the map shown",
    "text": "3.8 Spotting Duplicate points from the map shown\nTo address the duplicate points, which largely arises due to the temporal aspect of the data we will use Jittering (adding a small perturbation to the duplicate points so that they do not occupy the exact same space)\nThe code chunk below implements the jittering approach.\n\narmed_clash_jitter &lt;- rjitter(armed_clash_ppp, \n                                 retry=TRUE, \n                                 nsim=1, \n                                 drop=TRUE)\n\nCheck for duplicated points in the data:\n\nany(duplicated(armed_clash_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Combining point events object and owin object",
    "text": "4.1 Combining point events object and owin object\nIn the next step of geospatial data wrangling, we extract armed conflict (armed clash as a subset of Battles) events located within Myanmar using this code chunk:\n\narmed_clash_myn_ppp &lt;- armed_clash_ppp[states3_owin]\n\nThe output combined both the point and polygon feature in one ppp object class as shown below:\n\nplot(armed_clash_myn_ppp, cex = 0.4, main=\"Spatial Distribution of Battles (Armed Clash) in Myanmar\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(armed_clash_myn_ppp)\n\nMarked planar point pattern:  4594 points\nAverage intensity 2.703969e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     4594 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 10179 vertices\nenclosing rectangle: [-37628.21, 308341.37] x [2086865.1, 3029739.1] units\n                     (346000 x 942900 units)\nWindow area = 1.69898e+11 square units\nFraction of frame area: 0.521"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#kernel-density-estimation",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nThis section with perform first-order SPPA and focus on :\n\nDeriving KDE for visualizing and exploring the intensity of point processes\nPerform Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour Statistics\n\n\n5.1.1 Computing KDE using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n\nkde_armed_clash_myn_bw &lt;- density(armed_clash_myn_ppp, \n                                     sigma=bw.diggle, \n                                     edge=TRUE,\n                                     kernel=\"gaussian\")\n\n\nplot(kde_armed_clash_myn_bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp)\nsigma_diggle\n\n   sigma \n84.63052 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, we need to rescale.ppp() unit from meter to kilometer to prevent interference in the scale as well as the distortion of the bandwith values:\n\narmed_clash_myn_ppp.km &lt;- rescale.ppp(armed_clash_myn_ppp, 1000, \"km\")\n\nWe re-run density() using the rescaled data and plot the output KDE map: (Note the difference between _bw and .bw to denote scaled data)\n\nkde_armed_clash_myn.bw &lt;- density(armed_clash_myn_ppp.km,\n                                     sigma=bw.diggle, \n                                     edge=TRUE, \n                                     kernel=\"gaussian\")\n\nplot(kde_armed_clash_myn.bw)\n\n\n\n\n\n\n\n\n\nsigma_diggle &lt;- bw.diggle(armed_clash_myn_ppp.km)\nsigma_diggle\n\n     sigma \n0.08463052"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-automatic-bandwidth-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Working with different automatic bandwidth methods",
    "text": "6.1 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(armed_clash_myn_ppp.km)\n\n   sigma \n32.05992 \n\n\n\nbw.scott(armed_clash_myn_ppp.km)\n\n sigma.x  sigma.y \n16.84732 26.63314 \n\n\n\nbw.ppl(armed_clash_myn_ppp.km)\n\n   sigma \n3.674435 \n\n\n\nbw.diggle(armed_clash_myn_ppp.km)\n\n     sigma \n0.08463052 \n\n\nThe code chunk beow will be used to compare the output of using the different methods.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States CvL\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States Scott\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States ppl\"))\n\nplot(density(armed_clash_myn_ppp.km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\", \n             main=\"3 States diggleL\"))\n\n\n\n\n\n\n\n\nInterpretation: To summarize given the expectation of multiple clusters in th Myanmar conflict data, I’ll be predominantly utilizing bw.ppl(), well-suited for capturing multiple clusters without overfitting or underfitting, Baddeley et al. (2016). In the case where tighter, isolated clusters are preferred, bw.diggle() will be the sigma used."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-kernel-methods",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#working-with-different-kernel-methods",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Working with different kernel methods",
    "text": "6.2 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(armed_clash_myn_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(armed_clash_myn_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-vs-adaptive-bandwidth-for-kde",
    "title": "Take-Home Exercise 1",
    "section": "6.2 Fixed vs Adaptive bandwidth for KDE",
    "text": "6.2 Fixed vs Adaptive bandwidth for KDE\nThe choice between automatic and adaptive bandwidth depends on the objectives and nature of our analysis.\n\n6.2.1 Computing KDE by using fixed bandwidth\n\n\n\n\n\n\nFixed Bandwidth\nAdaptive Bandwidth\n\n\n\n\nOffers Consistency across Space: Uniform smoothing across the entire study area.\nVarying Spatial Densities: Showing significant differences in conflict event densities (urban, rural ares), adaptive bandwidth could give a more nuanced understanding\n\n\nGeneral Hotspot Detection: To identify overall hotspots or conflict zones without too much detail\nLocal Hotspot Detection\n\n\n\nBased on our earlier analysis, we received a sigma value of 6. which results in minimal smoothing, meaning the KDE will show more localized patterns, however, this could lead to overfitting, where small clusters are exaggerated and conflict points are more prone to misinterpretation.\nCurrently, as I am unsure of what sigma degree to use, a good starting point would be to calculate the average or median Nearest Neighbour distance between points and use that as an initial value:\n\nmean_distance &lt;- mean(nndist(armed_clash_myn_ppp.km))\n\npar(mfrow=c(1,2))\nkde_diggle &lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.diggle)\nkde_ppl&lt;- density.ppp(armed_clash_myn_ppp.km, sigma=bw.ppl)\nplot(kde_diggle)\nplot(kde_ppl)\n\n\n\n\n\n\n\n\n\n6.2.2 Computing KDE by using adaptive bandwidth\n\nkde_armed_clash_myn_adaptive &lt;- adaptive.density(armed_clash_myn_ppp.km, \n                                                 method=\"kernel\")\nplot(kde_armed_clash_myn_adaptive)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#fixed-bandwith-for-quarterly-kde-analysis",
    "title": "Take-Home Exercise 1",
    "section": "6.3 Fixed Bandwith for Quarterly KDE Analysis",
    "text": "6.3 Fixed Bandwith for Quarterly KDE Analysis\n\nKey Considerations for KDE Comparison Across Quarters:\n\nConsistency: For the KDEs to be comparable across different quarters, you need to use the same sigma for all quarters. This ensures that the degree of smoothing is consistent across the time periods, allowing you to make fair comparisons of density patterns over time.\nScale of Patterns: The chosen sigma should be large enough to reveal the relevant spatial patterns without introducing too much noise (from a very small sigma) or losing too much detail (from a very large sigma).\n\n\n\n\n\n\n\n\n\n\nInitial Sigma Value (0.07)\n\nMean Distance (1.6)\n\n\n\n\n\nAdvantages\nDisadvantages\nAdvantages\nDisadvantages\n\n\nCaptures local detail: This smaller sigma will emphasize fine-grained, local patterns, showing small clusters of events that may otherwise be smoothed over with a larger sigma.\nToo small for larger trends: A sigma of 0.18 may result in overfitting, where the KDE highlights every small cluster or isolated event.\nGood balance of local and global patterns: A sigma of 1.6 km (based on average nearest neighbor distance) strikes a balance between capturing local clusters and revealing broader spatial trends. It smooths out small noise while still showing meaningful clusters.\nLess local detail: While the 1.6 km sigma is a good balance, it may not capture very small-scale, localized patterns that might be relevant in specific analyses.\n\n\nGood for high-detail analysis: If your goal is to observe very specific spatial variations within each quarter, this smaller sigma might be more suitable.\nDifficult for comparisons: A very small sigma might highlight differences in individual points rather than overall trends, making it harder to compare the general distributions across quarters.\nBetter for comparisons: Since this sigma is derived from the overall spacing of points in your dataset, it reflects a more general spatial structure. This makes it more suitable for comparing KDE patterns across different quarters, as it ensures that the bandwidth is appropriate for both sparse and dense data, without overemphasizing small differences.\n\n\n\n\nContent adapted from Luc Anselin Spatial Econometrics.\nBased on this analysis, I am more inclined to go with the mean distance calculated for a Fixed Bandwidth, which we will use to compare Battles (Armed clash) across different quarters.\nSimple visualizations through graphs can help us get a better sense of the temporal aspect of when these armed clashes occurred. Since we are dealing with time:\n\narmed_clash_long &lt;- armed_clash_sf %&gt;%\n  arrange(desc(FATALITIES)) %&gt;% \n  pivot_longer(cols = c(FATALITIES, event_count), \n               names_to = \"measure\",             \n               values_to = \"value\")\n\n\nggplot(armed_clash_long, aes(x = value, \n                             y = factor(quarter, levels = sort(unique(quarter))))) + \n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"black\") +  \n  geom_text(data = armed_clash_long %&gt;%\n              group_by(quarter, measure) %&gt;% \n              filter(value == max(value)),  \n            aes(label = round(value, 1)),  \n            position = position_dodge(width = 0.9), \n            vjust = 0.5,  \n            hjust = 4.0,  \n            size = 3,    \n            color = \"white\") + \n  facet_wrap(~measure, scales = \"free_x\") + \n  labs(title = \"Total Fatalities and Event Count by Event Type per Quarter\", \n       x = \"Value\", \n       y = \"Quarter\") + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nquarters &lt;- unique(marks(armed_clash_myn_ppp))\n\npar(mfrow = c(2,2))\n\nfor (q in quarters){\n  quarter_ppp &lt;- armed_clash_myn_ppp[marks(armed_clash_myn_ppp)==q]\n  plot(quarter_ppp, main=paste(\"Spatial Distribution for\", q), cex = 0.5)\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#combining-quarterly-armed-conflict-points-and-with-the-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object",
    "text": "7.1 Combining Quarterly Armed Conflict Points and with the owin Object\n\nq1_2021_ppp &lt;- q1_2021_jitter[states3_owin]\nq2_2021_ppp &lt;- q2_2021_jitter[states3_owin]\nq3_2021_ppp &lt;- q3_2021_jitter[states3_owin]\nq4_2021_ppp &lt;- q4_2021_jitter[states3_owin]\n\n# For 2022\nq1_2022_ppp &lt;- q1_2022_jitter[states3_owin]\nq2_2022_ppp &lt;- q2_2022_jitter[states3_owin]\nq3_2022_ppp &lt;- q3_2022_jitter[states3_owin]\nq4_2022_ppp &lt;- q4_2022_jitter[states3_owin]\n\n# For 2023\nq1_2023_ppp &lt;- q1_2023_jitter[states3_owin]\nq2_2023_ppp &lt;- q2_2023_jitter[states3_owin]\nq3_2023_ppp &lt;- q3_2023_jitter[states3_owin]\nq4_2023_ppp &lt;- q4_2023_jitter[states3_owin]\n\n# For 2024\nq1_2024_ppp &lt;- q1_2024_jitter[states3_owin]\nq2_2024_ppp &lt;- q2_2024_jitter[states3_owin]"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#rescale.ppp",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#rescale.ppp",
    "title": "Take-Home Exercise 1",
    "section": "7.2 Rescale.ppp()",
    "text": "7.2 Rescale.ppp()\n\n# For 2021\nq1_2021_ppp.km = rescale.ppp(q1_2021_ppp, 1000, \"km\")\nq2_2021_ppp.km = rescale.ppp(q2_2021_ppp, 1000, \"km\")\nq3_2021_ppp.km = rescale.ppp(q3_2021_ppp, 1000, \"km\")\nq4_2021_ppp.km = rescale.ppp(q4_2021_ppp, 1000, \"km\")\n\n# For 2022\nq1_2022_ppp.km = rescale.ppp(q1_2022_ppp, 1000, \"km\")\nq2_2022_ppp.km = rescale.ppp(q2_2022_ppp, 1000, \"km\")\nq3_2022_ppp.km = rescale.ppp(q3_2022_ppp, 1000, \"km\")\nq4_2022_ppp.km = rescale.ppp(q4_2022_ppp, 1000, \"km\")\n\n# For 2023\nq1_2023_ppp.km = rescale.ppp(q1_2023_ppp, 1000, \"km\")\nq2_2023_ppp.km = rescale.ppp(q2_2023_ppp, 1000, \"km\")\nq3_2023_ppp.km = rescale.ppp(q3_2023_ppp, 1000, \"km\")\nq4_2023_ppp.km = rescale.ppp(q4_2023_ppp, 1000, \"km\")\n\n# For 2024\nq1_2024_ppp.km = rescale.ppp(q1_2024_ppp, 1000, \"km\")\nq2_2024_ppp.km = rescale.ppp(q2_2024_ppp, 1000, \"km\")\n\nIn the code chunk below, we will compute the KDE of each quarter of each year. bw.diggle method is used to derive the bandwidth of each KDE:\n\npar(mfrow = c(4, 4), mar = c(2, 2, 2, 2)) \n\n# 2021 plots\nplot(density(q1_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2021\")\n\nplot(density(q2_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2021\")\n\n\nplot(density(q3_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2021\")\n\nplot(density(q4_2021_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2021\")\n\n\n# 2022 plots\nplot(density(q1_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2022\")\n\nplot(density(q2_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2022\")\n\n\nplot(density(q3_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2022\")\n\nplot(density(q4_2022_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2022\")\n\n# 2023 plots\nplot(density(q1_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2023\")\n\nplot(density(q2_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2023\")\n\n\nplot(density(q3_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q3 2023\")\n\nplot(density(q4_2023_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q4 2023\")\n\n# 2024 plots\nplot(density(q1_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q1 2024\")\n\nplot(density(q2_2024_ppp.km, \n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"), \n     main=\"Q2 2024\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Take-Home Exercise 1",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(armed_clash_myn_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  armed_clash_myn_ppp.km\nR = 0.26742, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nInterpretation:\n\nThe R-value (0.37315) suggests that the points (armed clashes) are clustered—events tend to occur near each other.\nThe p-value (extremely low) provides very strong evidence against the null hypothesis of randomness. Thus, we conclude that the distribution of armed clashes is not random but instead shows a statistically significant clustered pattern.\n\n\n8.1.1 Clark and Evans Test: Q2 2021\n\nclarkevans.test(q2_2021_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2021_ppp.km\nR = 0.39442, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.2 Clark and Evans Test: Q2 2022\n\nclarkevans.test(q2_2022_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2022_ppp.km\nR = 0.41705, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.3 Clark and Evans Test: Q2 2023\n\nclarkevans.test(q2_2023_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2023_ppp.km\nR = 0.42746, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n8.1.4 Clark and Evans Test: Q2 2024\n\nclarkevans.test(q2_2024_ppp.km,\n                correction=\"none\",\n                clipregion=\"states3_owin\",\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  q2_2024_ppp.km\nR = 0.34215, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nReasons to account for the observed pattern:\nBased on the R-value, where lower R values indicate strong clustering, it follows the reasons below:\n\nEscalation of Conflict in the hotspot Area: From 2021 onwards, the area of study has recently experience a military coup in February 2021, which was concentrated as the Tatmadaw (military) cracked down on urban areas and strategic areas. These mentioned states were areas where civilian resistance was particularly strong.\nImplication of Dispersion: This observation is further evidence by the quarterly summation of the deaths by state, where for the same quarters observed below: Q4 2021 - Q2 2022, there was a stark increase in the total_fatalities and event_count, marking the amplification of armed clash battles in the region, accounting for the strong clustering patterns observed from Q2 2021 which showed the strongest clustering out of the 4 quarters assessed and eventual distribution of the conflict towards other areas.\n\n\nquarterly_summary %&gt;% \n  arrange(desc(total_fatalities))\n\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   quarter total_fatalities event_count                                 geometry\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                         &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022             2494         504 ((-11051.37 2410853), (-10908.92 256130…\n 2 Q1 2022             1759         410 ((-13816.45 2549666), (-12383.46 255035…\n 3 Q4 2021             1674         340 ((-12383.46 2550351), (-10581.74 255763…\n 4 Q3 2022             1649         414 ((-14448.48 2310133), (-12383.46 255035…\n 5 Q4 2023             1502         432 ((-13753.92 2572123), (-10781.63 257609…\n 6 Q1 2023             1335         429 ((-9542.333 2376489), (-8200.325 237117…\n 7 Q2 2023             1291         372 ((-10160.54 2446554), (-8954.966 256734…\n 8 Q4 2022             1264         377 ((-10226.14 2411015), (-8954.966 256734…\n 9 Q3 2023              998         428 ((-10171.84 2571422), (-10106 2331539),…\n10 Q3 2021              759         179 ((-13645.89 2571086), (-9197.246 255207…\n11 Q1 2024              757         292 ((-16397.05 2576482), (-13753.92 257212…\n12 Q2 2024              726         279 ((-11281.63 2583340), (-10452.13 257881…\n13 Q2 2021              522         130 ((-13808.2 2533298), (-10226.14 2411015…\n14 Q1 2021               20           8 ((-10581.74 2557635), (-9197.246 255207…\n\n\n\nquarterly_summary_by_state &lt;- armed_clash_sf %&gt;%\n  group_by(quarter, admin1) %&gt;%  # Group by quarter\n  summarise(\n    total_fatalities = sum(FATALITIES, na.rm = TRUE), \n    event_count = n()                               \n  ) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(total_fatalities))\n\n`summarise()` has grouped output by 'quarter'. You can override using the\n`.groups` argument.\n\nprint(quarterly_summary_by_state)\n\nSimple feature collection with 42 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 42 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q2 2022 Magway               726         134 ((-11051.37 2410853), (-10745.5…\n10 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n# ℹ 32 more rows"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-to-owin-objects",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#converting-sf-to-owin-objects",
    "title": "Take-Home Exercise 1",
    "section": "9.2 Converting sf to owin objects",
    "text": "9.2 Converting sf to owin objects\n\nsagaing_owin = as.owin(sagaing)\nmagway_owin = as.owin(magway)\nmandalay_owin = as.owin(mandalay)\n\n\npar(mfrow=c(1,3))\nplot(sagaing_owin)\nplot(magway_owin)\nplot(mandalay_owin)\n\n\n\n\n\n\n\n\n\n9.2.1 Combining armed clash points and the study area\nBy using the code chunk below, we are able to extract armed clashes that is within the specific region to do our analysis later on.\n\narmed_clash_sng_ppp = armed_clash_jitter[sagaing_owin]\narmed_clash_mgy_ppp = armed_clash_jitter[magway_owin]\narmed_clash_mnd_ppp = armed_clash_jitter[mandalay_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\narmed_clash_sng.km = rescale(armed_clash_sng_ppp, 1000, \"km\")\narmed_clash_mgy.km = rescale(armed_clash_mgy_ppp, 1000, \"km\")\narmed_clash_mnd.km = rescale(armed_clash_mnd_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these 3 study areas and the locations of the battles (armed clashes).\n\npar(mfrow=c(1,3))\nplot(armed_clash_sng.km, main=\"Sagaing\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mgy.km, main=\"Magway\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map\n\nplot(armed_clash_mnd.km, main=\"Mandalay\")\n\nWarning: Only 10 out of 14 symbols are shown in the symbol map"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "9.6 Analysing Spatial Point Process Using G-Function",
    "text": "9.6 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, I compute the G-function estimation by using Gest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n9.6.1 Computing G-function estimation\n\nG_SNG = Gest(armed_clash_sng_ppp, correction = \"best\")\nplot(G_SNG)\n\n\n\n\n\n\n\n\n\n\n9.6.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_SNG.csr)\n\n\n\n\n\n\n\n\n\n\n9.7 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.In this section, I compute the F-function estimation by using Fest() of spatstat package. Additionally, I perform Monte Carlo simulation test using envelope() of spatstat package.\n\n\n9.7.1 Computing F-function estimation\n\nF_SNG = Fest(armed_clash_sng_ppp, correction=\"best\")\nplot(F_SNG)\n\n\n\n\n\n\n\n\n\n\n9.7.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Fest, correction = \"all\", nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(F_SNG.csr)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Exercise 1",
    "section": "9.8 Analysing Spatial Point Process Using K-Function",
    "text": "9.8 Analysing Spatial Point Process Using K-Function\n\n9.8.1 Computing K-function estimation\n\nK_SNG = Kest(armed_clash_sng_ppp, correction = \"Ripley\")\nplot(K_SNG, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with K-fucntion\n\nK_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Kest, nsim = 30, rank = 1, glocal=TRUE)\n\n\nplot(K_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Exercise 1",
    "section": "9.9 Analysing Spatial Point Process Using L-Function",
    "text": "9.9 Analysing Spatial Point Process Using L-Function\n\n9.9.1 Computing L-function estimation\n\nL_SNG = Lest(armed_clash_sng_ppp, correction = \"Ripley\")\nplot(L_SNG, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n ### 9.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of armed clashes in Sagaing are randomly distributed.\nH1= The distribution of armed clashes in Sagaing are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with L-fucntion\n\nL_SNG.csr &lt;- envelope(armed_clash_sng_ppp, Lest, nsim = 30, rank = 1, glocal=TRUE)\n\n\nplot(L_SNG.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n # 10. Spatio-Temporal Point Pattern Analysis\n\nhealthcare_sng &lt;- st_intersection(poi_sf,sagaing)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\nclass(armed_clash_sagaing)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nclass(healthcare_sng)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_basemap(server=\"OpenStreetMap.HOT\") + \ntm_basemap(server=\"Esri.WorldImagery\") + \n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \n\ntm_shape(armed_clash_sagaing) + \n  tm_dots(col = \"red\", size = 0.01, alpha = 0.6, title = \"Armed Battles\") + \n\ntm_shape(healthcare_sng) + \n  tm_dots(col = \"darkgreen\", size = 0.2, alpha = 0.7, title = \"Hospitals\") + \n\ntm_layout(\n  main.title = \"Depiction of Armed Clashes in Sagaing\",  # Title text\n  main.title.position = c(\"center\", \"top\"),  \n  legend.position = c(\"right\", \"bottom\"),  \n  legend.outside = TRUE,  \n  legend.outside.position = \"bottom\"  \n) + \n\n#\ntm_view(bbox = st_bbox(sagaing)) \n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#visualizing-geographic-distribution-of-armed-clashes-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:",
    "text": "10.1 Visualizing geographic distribution of Armed Clashes by Quarter:\n\ntm_shape(sagaing) + \n  tm_polygons(alpha=0.3) + \ntm_shape(armed_clash_sagaing) + \n  tm_dots(size = 0.1, alpha = 0.5) + \ntm_facets(by=\"quarter\", \n          free.coords=FALSE,\n          drop.units = TRUE)"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#interesting-points-to-note-article-by-think-global-health-healthcare-has-become-a-battleground",
    "title": "Take-Home Exercise 1",
    "section": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground",
    "text": "Interesting points to note: Article by Think Global Health: Healthcare has become a Battleground\nAlong with the quarterly visualization of the armed clashes, we see a corresponding fixation of attacks on the Southern point of the Sagaing, near the border of two other states in conflict (Madway and Mandalay). According to the article by Think Global Health:\n\nAttacks on Health Care in Myanmar, 2021 – 2023\nMyanmar’s health system is under attack countrywide, with the greatest number of attacks taking place in the Sagaing, Mandalay, and Yangon regions.\nAccording to Insecurity Insight, a nonprofit group collecting data on conflicts worldwide, nearly 1,200 attacks on health-care workers and facilities have taken place in the three years since the coup. Doctors, aid workers, and other medical personnel have been detained and arrested, targeted for allegedly taking care of protestors or participating in the civil disobedience movement (CDM).  \n\n\nquarterly_summary_sagaing &lt;- quarterly_summary_by_state %&gt;% \n  filter(admin1 == \"Sagaing\")\nquarterly_summary_sagaing  \n\nSimple feature collection with 14 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 5\n   quarter admin1  total_fatalities event_count                         geometry\n * &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;       &lt;int&gt;                 &lt;MULTIPOINT [m]&gt;\n 1 Q2 2022 Sagaing             1657         318 ((-10908.92 2561302), (-10547 2…\n 2 Q1 2022 Sagaing             1332         278 ((-13816.45 2549666), (-12383.4…\n 3 Q4 2021 Sagaing             1242         235 ((-12383.46 2550351), (-10581.7…\n 4 Q3 2022 Sagaing             1235         288 ((-12383.46 2550351), (-10581.7…\n 5 Q4 2023 Sagaing              917         260 ((-13753.92 2572123), (-10781.6…\n 6 Q1 2023 Sagaing              847         254 ((-3597.044 2590143), (275.0944…\n 7 Q2 2023 Sagaing              823         218 ((-8954.966 2567347), (-7718.17…\n 8 Q4 2022 Sagaing              814         255 ((-8954.966 2567347), (-7770.60…\n 9 Q3 2023 Sagaing              602         250 ((-10171.84 2571422), (-9948.45…\n10 Q3 2021 Sagaing              521         130 ((-13645.89 2571086), (-9197.24…\n11 Q1 2024 Sagaing              451         190 ((-16397.05 2576482), (-13753.9…\n12 Q2 2021 Sagaing              387          90 ((-13808.2 2533298), (-9514.18 …\n13 Q2 2024 Sagaing              348         133 ((-11281.63 2583340), (-10452.1…\n14 Q1 2021 Sagaing               13           4 ((-10581.74 2557635), (-9197.24…\n\n\nCoincidentally (or not), the quarters with the higest number of recorded fatalities fall between Q4 2021 - Q3 2022, where we will focus the computation of STKDE\n\narmed_clash_sagaing\n\nSimple feature collection with 2903 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6 Q1 2022 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9 Q1 2022 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10 Q1 2022 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-day-of-year",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Day of Year",
    "text": "10.2 Computing STKDE by Day of Year\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;% \n  filter(admin1 == \"Sagaing\") %&gt;% \n  filter(quarter %in% c(\"Q4 2021\", \"Q1 2022\", \"Q2 2022\", \"Q3 2022\")) %&gt;% \n  mutate(dayYear = yday(event_date)) %&gt;% \n  mutate(monthNum = month(event_date)) %&gt;% \n  mutate(monthFac = month(event_date,\n                          label=TRUE,\n                          abbr=FALSE))\narmed_clash_year_sf\n\nSimple feature collection with 1119 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2863190\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,119 × 11\n   quarter event_type sub_event_type admin1           geometry event_date\n * &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;         &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-02-01\n 2 Q1 2022 Battles    Armed clash    Sagai…   (146213 2428487) 2022-03-24\n 3 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-15\n 4 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-02-23\n 5 Q1 2022 Battles    Armed clash    Sagai… (103325.1 2480979) 2022-03-18\n 6 Q1 2022 Battles    Armed clash    Sagai…    (95831 2496973) 2022-01-11\n 7 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-01-24\n 8 Q1 2022 Battles    Armed clash    Sagai… (115044.9 2432742) 2022-02-04\n 9 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-01-12\n10 Q1 2022 Battles    Armed clash    Sagai… (73729.59 2431272) 2022-02-05\n# ℹ 1,109 more rows\n# ℹ 5 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, dayYear &lt;dbl&gt;,\n#   monthNum &lt;dbl&gt;, monthFac &lt;ord&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\narmed_clash_yday_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(dayYear) %&gt;% \n  as.ppp()\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_yday_owin &lt;- armed_clash_yday_ppp[sagaing_owin]\nsummary(sagaing_yday_owin)\n\nMarked planar point pattern:  1119 points\nAverage intensity 1.192011e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    91.0   172.0   176.3   260.5   365.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_yday_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp(sagaing_yday_owin)\n\nInitialising...Done.\nOptimising...\nh = 26068.43 \b; lambda = 29.14375 \nh = 28675.27 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 2635.987 \nh = 26720.14 \b; lambda = 1332.565 \nh = 27371.85 \b; lambda = 29.14375 \nh = 26068.43 \b; lambda = 1332.565 \nh = 26394.29 \b; lambda = 680.8545 \nh = 26557.21 \b; lambda = 354.9991 \nh = 26638.68 \b; lambda = 192.0715 \nh = 26679.41 \b; lambda = 110.6076 \nh = 26699.78 \b; lambda = 69.87568 \nDone.\n\n\n          h      lambda \n26699.77626    69.87568 \n\n\n\nkde_yday &lt;- spattemp.density(sagaing_yday_owin,\n                             h=26699.77626,\n                             lambda=69.87568)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 26699.78 (spatial)\n  lambda = 69.8757 (temporal)\n\nNo. of observations\n  1119 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 365]\n\nEvaluation\n  128 x 128 x 365 trivariate lattice\n  Density range: [1.553021e-30, 1.912896e-13]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:365\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#saving-intermediate-datasets",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#saving-intermediate-datasets",
    "title": "Take-Home Exercise 1",
    "section": "10.3 Saving Intermediate Datasets:",
    "text": "10.3 Saving Intermediate Datasets:\n\nwrite_rds(healthcare_sng, \"data/rds/healthcare_sng.rds\")\nwrite_rds(quarterly_summary, \"data/rds/quarterly_summary.rds\")\nwrite_rds(quarterly_summary_by_state, \"data/rds/quarterly_summary_by_state.rds\")\nwrite_rds(state3_sf, \"data/rds/state3_sf.rds\")\nwrite_rds(event_density_data, \"data/rds/event_density_data.rds\")"
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#key-findings",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#key-findings",
    "title": "Take-Home Exercise 1",
    "section": "Key Findings:",
    "text": "Key Findings:\n\nClustering of Armed Clashes:\n\nWithin Q4 2021 to Q2 2022, with R-values indicating a highly clustered distribution of conflict events. This clustering is particularly evident in Sagaing, Mandalay, and Magway, where much of the conflict was concentrated.\nThe clustering can be attributed to the ongoing civil resistance following the military coup in Myanmar in 2021, with Sagaing experiencing heavily intense conflicts. This has prompted me to research further, finding that: \n\nThe area is prone to natural disasters, being located at the ‘Sagaing fault’ and is already a natural hotspot for refugee / displaced individuals due to the socio-economic plight it has faced, as part of the ‘Dry Zone’ \nMilitary Conscription drives has ‘provoked reverse migration, pushing young men who fled Myanmar’s war-torn Dry Zone to give up their livellihoods and risk their lives to return home’ \n\n\nKernel Density Estimation:\n\nKDE analysis allowed us to visualize the intensity of conflict over time. Using fixed bandwidth (e.g., bw.ppl()), we observed that while the intensity of conflict was concentrated in certain regions, particularly in Sagaing, there was a gradual dispersion of conflict events over time into neighboring regions such as Magway and Mandalay.\nThe choice of bandwidth (sigma) and kernel function was important for interpreting both local and broader trends in armed clashes. The Gaussian kernel was effective in showing overall trends, while smaller sigmas captured finer details, especially in high-density areas. Initially, I actually went with bw.diggle instead of bw.ppl bandwidth as I thought bw.diggle() is always the best choice for detecting clusters, and bw.ppl is better for smoothing over broader areas. However, this interpretation may be overly simplistic. \n\nGoing by bw.diggle, I obtained a really small sigma value which might have been a sign of overfitting. Furthermore, because of the plotting and the movement of the conflict over time, we ought to expect multiple clsuter, which implied bw.ppl was a better fit. \n\n\nSpatio-temporal KDE:\n\nThe STKDE provided a nuanced view of how conflict events evolved quarter by quarter, confirming that some periods saw a stark increase in fatalities, such as Q4 2021 through Q2 2022.\nThe temporal analysis highlighted the cyclical nature of the conflict, with periods of intense violence followed by temporary dispersions or shifts in conflict zones.\n\n2nd-Order Spatial Point Pattern Analysis:\n\nThe use of G-, F-, K-, and L-functions provided further confirmation of the non-random distribution of armed clashes. These functions indicated significant spatial interaction among the conflict points, suggesting that the locations of armed clashes were influenced by proximity to other events, reflecting the complex nature of the conflict. 2nd Point Pattern Analysis allowed me to research further on the conflicting factors that affected (random) spatial distribution of armed conflict, and found the unfortunate but deliberate choice to target civilian institutions like hospitals.\n\nHealthcare as a Battleground:\n\nBy overlaying points of interest (POI) such as hospitals and healthcare facilities onto the map, we observed that many clashes occurred near key civilian infrastructure. This aligns with findings that healthcare has become a battleground in Myanmar, particularly in Sagaing and surrounding regions. Attacks on healthcare facilities have not only disrupted medical services but also contributed to the broader humanitarian crisis in the region."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "import geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\nQuestion: If the spatial pattern of a selected development indicator (GDP per capita) of Hunan Province, PRC is randomly geographically distribute. If the answer is no, then we investigate for\n\nSigns of spatial clustering. If there are signs, we ask:\nWhere are these Clusters located?\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#objectives",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#objectives",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#the-analytical-question",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#the-analytical-question",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "1.2 The analytical question",
    "text": "1.2 The analytical question\nQuestion: If the spatial pattern of a selected development indicator (GDP per capita) of Hunan Province, PRC is randomly geographically distribute. If the answer is no, then we investigate for\n\nSigns of spatial clustering. If there are signs, we ask:\nWhere are these Clusters located?\n\n\n1.2.1 The Study Area and the Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n1.2.2 Setting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-shapefile-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-shapefile-into-r-environment",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.1 Import shapefile into R environment",
    "text": "2.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-csv-file-into-r-environment",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#import-csv-file-into-r-environment",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.2 Import csv file into R environment",
    "text": "2.2 Import csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ncolnames(hunan2012)\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\n\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\""
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#performing-relational-join",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#performing-relational-join",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.3 Performing Relational Join",
    "text": "2.3 Performing Relational Join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, hunan2012)\n\nJoining with `by = join_by(County)`\n\n\n\ncolnames(hunan)\n\n [1] \"NAME_2\"      \"ID_3\"        \"NAME_3\"      \"ENGTYPE_3\"   \"Shape_Leng\" \n [6] \"Shape_Area\"  \"County\"      \"City\"        \"avg_wage\"    \"deposite\"   \n[11] \"FAI\"         \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"      \n[16] \"GIO\"         \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"        \n[21] \"EmpR\"        \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"  \n[26] \"Household_R\" \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"      \n[31] \"Agri\"        \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n[36] \"geometry\"   \n\n\n\nhunan &lt;- hunan %&gt;% \n    select(1:3, 7, 15, 16, 31, 32, 33)\n\n\ncolnames(hunan)\n\n [1] \"NAME_2\"   \"ID_3\"     \"NAME_3\"   \"County\"   \"GDPPC\"    \"GIO\"     \n [7] \"Agri\"     \"Service\"  \"Disp_Inc\" \"geometry\""
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualizing-regional-development-indicator",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualizing-regional-development-indicator",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.4 Visualizing Regional Development Indicator",
    "text": "2.4 Visualizing Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) + \n  tm_fill(\"GDPPC\", \n          n = 5,\n          style = \"equal\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) + \n  tm_fill(\"GDPPC\", \n          n = 5, \n          style=\"quantile\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Equal quantile classfication\")\n\ntmap_arrange(equal, quantile,\n             asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "3.1 Computing Contiguity Spatial Weights",
    "text": "3.1 Computing Contiguity Spatial Weights\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nweight_matrix_queen &lt;- poly2nb(hunan, queen=TRUE)\nsummary(weight_matrix_queen)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\ncentroids &lt;- st_centroid(st_geometry(hunan))\ncoords &lt;- st_coordinates(centroids)\n\nnb_lines &lt;- nb2lines(weight_matrix_queen, coords = coords, as_sf = TRUE)\n\ntm_shape(hunan) + \n  tm_borders(\"grey\") + \n  tm_shape(nb_lines) + \n  tm_lines(col = \"blue\", lwd = 2) + \n  tm_layout(title = \"Queen Contiguity Neighbors\", frame = FALSE)\n\nWarning: Currect projection of shape nb_lines unknown. Long-lat (WGS84) is\nassumed."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "3.2 Row-standardised weights matrix",
    "text": "3.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrow_standardised_weight_matrix &lt;- nb2listw(weight_matrix_queen,\n                                           style=\"W\",\n                                           zero.policy=TRUE)\nrow_standardised_weight_matrix\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#morans-i-test",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#morans-i-test",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.1 Moran’s I test",
    "text": "4.1 Moran’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran_result &lt;- moran.test(hunan$GDPPC,\n           list=row_standardised_weight_matrix,\n           zero.policy=TRUE,\n           na.action=na.omit)\n\n\nStatistical Conclusion:\nGiven the positive Moran’s I value of 0.3007 and the extremely small p-value of 1.095×10−61.095 ^{-6}1.095×10−6, we can reject the null hypothesis of no spatial autocorrelation. This means:\n\nConclusion: There is statistically significant evidence of positive spatial autocorrelation in GDP per capita across counties in Hunan Province.\nInterpretation: Regions (counties) with similar GDP per capita tend to cluster geographically. In other words, high GDP per capita regions are near other high GDP per capita regions, and similarly for low GDP per capita regions."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-morans-i",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-morans-i",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Computing Monte Carlo Moran’s I",
    "text": "4.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nb_permutation = moran.mc(hunan$GDPPC,\n                        listw = row_standardised_weight_matrix,\n                        nsim = 999, \n                        zero.policy = TRUE, \n                        na.action = na.omit)\n\nb_permutation\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: row_standardised_weight_matrix  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nThe use of set.seed(1234) in your code is important for ensuring reproducibility of the results, especially when performing random simulations, such as a permutation test in Moran’s I analysis. If you omit set.seed(), every time you run moran.mc() (or any function involving randomness), you may get slightly different results because the random number generator will start from a different point each time. This can make it difficult to reproduce results exactly."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-morans-i",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-morans-i",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.3 Visualising Monte Carlo Moran’s I",
    "text": "4.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(b_permutation$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(b_permutation$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(b_permutation$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(b_permutation$res,\n     freq=TRUE,\n     breaks=20,\n     xlab=\"Simulated Moran's I\")\nabline(v=0, col=\"red\")\n\n\n\n\n\n\n\n\n\nStatistical Observation from the Histogram\nThe histogram represents the distribution of Moran’s I statistics that were generated through a Monte Carlo permutation test. Here’s what we can observe from the plot:\n\nSimulated Moran’s I Distribution:\n\nThe majority of the simulated Moran’s I values fall near zero, indicating that in the absence of spatial autocorrelation (under random permutations), the expected Moran’s I is close to zero. This makes sense because a Moran’s I value close to zero typically indicates no spatial autocorrelation (random distribution of the data).\n\nRed Line (Observed Moran’s I):\n\nThe red vertical line represents the observed Moran’s I statistic from the actual data (before the random permutations). If this value is far from zero, it suggests evidence of spatial autocorrelation.\nIn this case, the observed Moran’s I is positive and relatively large compared to the values in the simulated distribution, which suggests significant positive spatial autocorrelation in the data.\n\nSince the observed Moran’s I is far from the distribution’s center (near zero) and falls outside the simulated distribution, it is statistically unlikely that the observed spatial autocorrelation is due to random chance. This implies significant positive spatial autocorrelation in the data (i.e., similar values are spatially clustered together).\n\n\n\nPlotting with ggplot2:\n\nsimulated_values &lt;- b_permutation$res  # Replace with actual data\n\ndf &lt;- data.frame(simulated_moransI = simulated_values)\nobserved_moransI &lt;- b_permutation$observed  # Extract the single observed Moran's I\n\nggplot(df, aes(x = simulated_moransI)) +\n  geom_histogram(binwidth = 0.02, fill = \"grey\", color = \"black\") +\n  geom_vline(xintercept = observed_moransI,  # Use only the observed Moran's I value\n             color = \"red\", linetype = \"solid\", size = 1.5) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gearys-c-test",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gearys-c-test",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.1 Geary’s C test",
    "text": "5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=row_standardised_weight_matrix)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: row_standardised_weight_matrix   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nStatistical Interpretation:\nConclusion:\n\nSince Geary’s C is less than 1 and the p-value is very small, we reject the null hypothesis of random spatial distribution.\nConclusion: There is statistically significant evidence of positive spatial autocorrelation in GDP per capita across counties in Hunan Province. This means that neighboring regions tend to have similar GDP per capita values, with little local variation between them.\nThe clustering of similar values suggests that the GDP per capita is not randomly distributed but forms spatial clusters, with high GDP regions close to other high GDP regions, and similarly for low GDP regions."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-gearys-c",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-gearys-c",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.2 Computing Monte Carlo Geary’s C",
    "text": "5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nb_permutation&lt;-geary.mc(hunan$GDPPC,\n                        listw=row_standardised_weight_matrix,\n                        nsim=999)\nb_permutation\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: row_standardised_weight_matrix  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nStatistical Interpretation:\n\nObserved Geary’s C statistic:\n\nThe observed Geary’s C value is 0.690720.690720.69072, which is less than 1 (the expected value under spatial randomness). This indicates positive spatial autocorrelation — neighboring regions tend to have similar GDP per capita values.\n\nMonte Carlo Simulations:\n\nThe Monte Carlo test was performed by generating 999 random permutations of the data to simulate Geary’s C under the null hypothesis (spatial randomness).\nThe observed rank = 1 means that the observed Geary’s C is lower than all the values generated from the random permutations. This suggests that the observed spatial clustering is stronger than what would be expected by random chance.\n\np-value:\n\nThe p-value of 0.001 is very small, indicating that the likelihood of obtaining an observed Geary’s C value this extreme under the null hypothesis of spatial randomness is extremely low (1 in 1000).\nThis very small p-value provides strong evidence to reject the null hypothesis of no spatial autocorrelation.\n\n\n\n\nConclusion:\n\nConclusion: The Monte Carlo simulation confirms that the observed Geary’s C statistic is statistically significant and provides strong evidence of positive spatial autocorrelation in GDP per capita across Hunan Province.\nThis result indicates that neighboring regions tend to have similar GDP per capita values, and this clustering pattern is unlikely to have occurred by chance.\nThe observed Geary’s C value being ranked 1st out of 1000 simulations further reinforces the conclusion that there is a strong and statistically significant clustering of similar GDP values in space."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-gearys-c",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-gearys-c",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.3 Visualising Monte Carlo Geary’s C",
    "text": "5.3 Visualising Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(b_permutation$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(b_permutation$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(b_permutation$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(b_permutation$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"blue\") \n\n\n\n\n\n\n\n\n\nStatistical Interpretation:\n\nConclusion: The Monte Carlo simulation confirms that the observed Geary’s C statistic is statistically significant and provides strong evidence of positive spatial autocorrelation in GDP per capita across Hunan Province.\nThis result indicates that neighboring regions tend to have similar GDP per capita values, and this clustering pattern is unlikely to have occurred by chance.\nThe observed Geary’s C value being ranked 1st out of 1000 simulations further reinforces the conclusion that there is a strong and statistically significant clustering of similar GDP values in space."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-morans-i-correlogram",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-morans-i-correlogram",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "6.1 Compute Moran’s I Correlogram",
    "text": "6.1 Compute Moran’s I Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\n\nmoran_i_corr &lt;- sp.correlogram(weight_matrix_queen,\n                               hunan$GDPPC, \n                               order=6,\n                               method=\"I\",\n                               style=\"W\")\nplot(moran_i_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(moran_i_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nStatistical Observation: General Patterns\n\nLags 1-3: At closer spatial lags, there is significant positive spatial autocorrelation, indicating clustering of similar GDP per capita values in neighboring regions.\nLag 4: By the fourth lag, the spatial autocorrelation weakens and becomes insignificant, suggesting a loss of spatial dependence at this distance.\nLags 5-6: At further distances, significant negative spatial autocorrelation emerges, indicating that regions far apart from one another tend to have dissimilar GDP per capita values (high GDP regions tend to be surrounded by low GDP regions, and vice versa).\n\nThe spatial correlogram for Moran’s I shows that GDP per capita in Hunan Province exhibits positive spatial autocorrelation at shorter distances (neighboring regions), while negative spatial autocorrelation is observed at larger distances. This suggests that GDP per capita is clustered in space at close range but becomes dissimilar as the distance between regions increases."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-gearys-c-correlogram",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#compute-gearys-c-correlogram",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "6.2 Compute Geary’s C Correlogram",
    "text": "6.2 Compute Geary’s C Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\ngeary_c_corr &lt;- sp.correlogram(weight_matrix_queen,\n                               hunan$GDPPC,\n                               order=6, \n                               method=\"C\",\n                               style=\"W\")\n\nplot(geary_c_corr)\n\n\n\n\n\n\n\n\n\nprint(geary_c_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nSummary of Spatial Patterns:\n\nLags 1 and 2: Show significant positive spatial autocorrelation, meaning neighboring regions are similar in terms of GDP per capita.\nLags 3 and 4: Show no significant spatial autocorrelation, indicating that the similarity of GDP values between regions fades as the distance increases.\nLag 5: Shows significant negative spatial autocorrelation, meaning that regions farther apart tend to have dissimilar GDP per capita values.\nLag 6: The negative autocorrelation weakens and becomes insignificant."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html",
    "title": "Chapter 10: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data.\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package.\n\n\n\n\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#objectives",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#objectives",
    "title": "Chapter 10: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data.\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#analysis-question",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex065.html#analysis-question",
    "title": "Chapter 10: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-local-morans-i",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-local-morans-i",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "1.1 Mapping the Local Moran’s I",
    "text": "1.1 Mapping the Local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\ncolnames(local_moran_i)\n\n[1] \"Ii\"             \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"          \n[5] \"Pr(z != E(Ii))\"\n\n\n\nhunan.local_moran_i &lt;- cbind(hunan,local_moran_i) %&gt;%\n  rename(Pr.Ii = `Pr.z....E.Ii..`)\n\n\n1.1.1 Mapping the Local Moran’s I Values\n\ntm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n1.1.2 Mapping the Local Moran’s p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n1.1.3 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocal_moran_i.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col=\"Ii\",\n          style=\"pretty\",\n          title=\"local moran statistics\") + \n  tm_borders(alpha = 0.3)\n\npvalue.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col = \"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(local_moran_i.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-lisa-cluster-map",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-lisa-cluster-map",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "2.0 Creating LISA Cluster Map",
    "text": "2.0 Creating LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n2.1 Plotting Moran Scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, row_standardised_weight_matrix,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n2.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, row_standardised_weight_matrix,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n2.3 Preparing LISA map classes\nSteps to prepare a LISA cluster map\n\nInitalize quadrant into vector\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\nCenter the local Moran’s around the mean\nSet a statistical significance for the local Moran\nThe next four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\nLastly, places non-significant Moran in the category 0.\n\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(local_moran_i))\nhunan$lag_GDPPC &lt;- lag.listw(row_standardised_weight_matrix, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- local_moran_i[,1]   \nsignif &lt;- 0.05      \n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[local_moran_i[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#plotting-lisa-map",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#plotting-lisa-map",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "3.0 Plotting LISA Map",
    "text": "3.0 Plotting LISA Map\n\nhunan.local_moran_i$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.local_moran_i$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.local_moran_i) +\n  tm_fill(col = \"quadrant\", \n          style = \"pretty\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\nlocal_moran_i.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col=\"Ii\",\n          style=\"pretty\",\n          title=\"local moran statistics\") + \n  tm_borders(alpha = 0.3)\n\npvalue.map &lt;- tm_shape(hunan.local_moran_i) + \n  tm_fill(col = \"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(local_moran_i.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#getis-and-ords-g-statistics",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#getis-and-ords-g-statistics",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.1 Getis and Ord’s G-Statistics",
    "text": "4.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#deriving-distance-based-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#deriving-distance-based-weight-matrix",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Deriving distance-based weight matrix",
    "text": "4.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n4.2.1 Deriving the centroid\nObtain longtitude & latitude\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n4.2.2 Determine the cut-off distance\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n4.2.3 Computing fixed distance weight matrix\n\nweight_matrix_d62 &lt;- dnearneigh(coords, 0,62, longlat=TRUE)\nweight_matrix_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(weight_matrix_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Computing adaptive distance weight matrix",
    "text": "4.2 Computing adaptive distance weight matrix\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-fixed-distance",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-fixed-distance",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.1 Gi Statistics using fixed distance",
    "text": "5.1 Gi Statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.2 Mapping Gi values with fixed distance weights",
    "text": "5.2 Mapping Gi values with fixed distance weights\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-adaptive-distance",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-adaptive-distance",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.3 Gi statistics using adaptive distance",
    "text": "5.3 Gi statistics using adaptive distance\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "Hands-On_Exercise/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "Chapter 9: Global Measures of Spatial Autocorrelation",
    "section": "5.4 Mapping Gi values with adaptive distance weights",
    "text": "5.4 Mapping Gi values with adaptive distance weights\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-quarter",
    "href": "Take-Home_Exercise/TakeHomeEx01/TakeHomeEx01.html#computing-stkde-by-quarter",
    "title": "Take-Home Exercise 1",
    "section": "10.2 Computing STKDE by Quarter",
    "text": "10.2 Computing STKDE by Quarter\nCreating: Q1 2021 - Q2 2024 using the interval() function\nBecause ppp object only accept numerical or character as mark. The code chunk below is used to convert data type of acq_date to numeric.\n\narmed_clash_sf\n\nSimple feature collection with 4594 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2108023 xmax: 255317.2 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4,594 × 8\n   quarter event_type sub_event_type admin1            geometry event_date\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-30\n 2 Q1 2021 Battles    Armed clash    Magway  (-4389.39 2508271) 2021-03-31\n 3 Q1 2021 Battles    Armed clash    Magway (-6592.469 2521443) 2021-03-30\n 4 Q1 2021 Battles    Armed clash    Manda…  (97374.02 2309557) 2021-03-20\n 5 Q1 2021 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 6 Q1 2021 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 7 Q1 2021 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 8 Q1 2021 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 9 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-02-16\n10 Q1 2022 Battles    Armed clash    Magway   (46315.1 2379549) 2022-03-26\n# ℹ 4,584 more rows\n# ℹ 2 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;\n\n\n\nnrow(armed_clash_sf)\n\n[1] 4594\n\n\n\nreference_date &lt;- min(armed_clash_sf$event_date, na.rm = TRUE)\n\narmed_clash_year_sf &lt;- armed_clash_sf %&gt;%\n  mutate(quarter = quarter(event_date)) %&gt;%  \n  mutate(year = year(event_date)) %&gt;% \n  mutate(quarterInterval = (year - 2021) * 4 + quarter) %&gt;%   \n  filter(admin1 == \"Sagaing\")\n\n\narmed_clash_year_sf\n\nSimple feature collection with 2903 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16397.05 ymin: 2393568 xmax: 252995.5 ymax: 2987342\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,903 × 10\n   quarter event_type sub_event_type admin1            geometry event_date\n *   &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          &lt;POINT [m]&gt; &lt;date&gt;    \n 1       1 Battles    Armed clash    Sagai…  (101220.3 2449914) 2021-03-25\n 2       1 Battles    Armed clash    Sagai…  (23645.25 2686213) 2021-03-26\n 3       1 Battles    Armed clash    Sagai… (-10581.74 2557635) 2021-03-30\n 4       1 Battles    Armed clash    Sagai… (-9197.246 2552076) 2021-03-31\n 5       1 Battles    Armed clash    Sagai…    (146213 2428487) 2022-02-01\n 6       1 Battles    Armed clash    Sagai…    (146213 2428487) 2022-03-24\n 7       1 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-15\n 8       1 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-02-23\n 9       1 Battles    Armed clash    Sagai…  (103325.1 2480979) 2022-03-18\n10       1 Battles    Armed clash    Sagai…     (95831 2496973) 2022-01-11\n# ℹ 2,893 more rows\n# ℹ 4 more variables: FATALITIES &lt;dbl&gt;, event_count &lt;int&gt;, year &lt;dbl&gt;,\n#   quarterInterval &lt;dbl&gt;\n\n\n\n10.2.1 Creating ppp object\nIn the code chunk below, dayYear field is included in the output ppp object.\n\nsummary(armed_clash_year_sf$quarterInterval)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   8.107  11.000  14.000 \n\n\n\narmed_clash_quarter_ppp &lt;- armed_clash_year_sf %&gt;% \n  dplyr::select(quarterInterval) \n\n\narmed_clash_quarter_ppp &lt;- as.ppp(armed_clash_quarter_ppp)\narmed_clash_quarter_ppp\n\nMarked planar point pattern: 2903 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-16397.05, 252995.48] x [2393568.1, 2987342.4] units\n\n\n\n\n10.2.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nsagaing_quarter_owin &lt;- armed_clash_quarter_ppp[sagaing_owin]\nsummary(sagaing_quarter_owin)\n\nMarked planar point pattern:  2903 points\nAverage intensity 3.09241e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   8.107  11.000  14.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\n\nplot(sagaing_quarter_owin)\n\n\n\n\n\n\n\n\nBefore proceeding, we can utilize BOOT.spattemp(). It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\nCode chunk below uses BOOT.spattemp() to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\nset.seed(1234)\nBOOT.spattemp_result &lt;- BOOT.spattemp(sagaing_quarter_owin)\n\nInitialising...Done.\nOptimising...\nh = 22600.7 \b; lambda = 0.765522 \nh = 24860.77 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 2260.835 \nh = 23165.71 \b; lambda = 1130.8 \nh = 23730.73 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 1130.8 \nh = 22883.21 \b; lambda = 565.7829 \nh = 23165.71 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 565.7829 \nh = 22741.95 \b; lambda = 283.2742 \nh = 22883.21 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 283.2742 \nh = 22671.32 \b; lambda = 142.0199 \nh = 22741.95 \b; lambda = 0.765522 \nh = 22600.7 \b; lambda = 142.0199 \nh = 22636.01 \b; lambda = 71.3927 \nh = 22653.67 \b; lambda = 36.07911 \nh = 22662.5 \b; lambda = 18.42232 \nh = 22666.91 \b; lambda = 9.593919 \nh = 22669.12 \b; lambda = 5.179721 \nh = 22670.22 \b; lambda = 2.972621 \nh = 22670.77 \b; lambda = 1.869072 \nh = 22671.05 \b; lambda = 1.317297 \nh = 22671.6 \b; lambda = 0.2137472 \nh = 22671.19 \b; lambda = 1.041409 \nh = 22671.46 \b; lambda = 0.4896346 \nh = 22671.26 \b; lambda = 0.9034657 \nh = 22671.39 \b; lambda = 0.6275783 \nh = 22671.36 \b; lambda = 0.6965502 \nh = 22671.29 \b; lambda = 0.8344939 \nh = 22671.34 \b; lambda = 0.7310361 \nh = 22530.09 \b; lambda = 0.7310361 \nh = 22424.15 \b; lambda = 0.7137931 \nh = 22353.51 \b; lambda = 0.7482791 \nh = 22194.59 \b; lambda = 0.7569005 \nh = 22018.05 \b; lambda = 0.7051716 \nh = 21726.73 \b; lambda = 0.6749965 \nh = 21497.17 \b; lambda = 0.7181039 \nh = 21033.68 \b; lambda = 0.7202592 \nh = 20565.81 \b; lambda = 0.6383552 \nh = 20973.01 \b; lambda = 0.6679915 \nh = 19872.76 \b; lambda = 0.6836179 \nh = 18945.78 \b; lambda = 0.6879287 \nh = 19413.64 \b; lambda = 0.7698328 \nh = 18837.56 \b; lambda = 0.8355716 \nh = 16749.66 \b; lambda = 0.803241 \nh = 14607.65 \b; lambda = 0.8447319 \nh = 14499.43 \b; lambda = 0.9923748 \nh = 12276.25 \b; lambda = 1.144598 \nh = 8046.338 \b; lambda = 1.153758 \nh = 10744.14 \b; lambda = 1.074211 \nh = 8412.744 \b; lambda = 1.374077 \nh = 9961.47 \b; lambda = 1.241741 \nh = 8429.365 \b; lambda = 1.171355 \nh = 11314.53 \b; lambda = 1.151287 \nh = 10531.85 \b; lambda = 1.318817 \nh = 10584.93 \b; lambda = 1.257665 \nh = 9231.869 \b; lambda = 1.348119 \nh = 10793.86 \b; lambda = 1.200495 \nDone.\n\nBOOT.spattemp_result\n\n           h       lambda \n10793.863014     1.200495 \n\n\n\nkde_quarter &lt;- spattemp.density(sagaing_quarter_owin,\n                             h=BOOT.spattemp_result[1] ,\n                             lambda=BOOT.spattemp_result[2])\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_quarter)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 10793.86 (spatial)\n  lambda = 1.2005 (temporal)\n\nNo. of observations\n  2903 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [1.577878e-45, 1.108189e-11]\n\n\n\n\n10.2.3 Plotting the output spatio-temporal KDE\n\ntims &lt;- 1:14\n\nquarter_labels &lt;- c(\"Q1 2021\", \"Q2 2021\", \"Q3 2021\", \"Q4 2021\",\n                    \"Q1 2022\", \"Q2 2022\", \"Q3 2022\", \"Q4 2022\",\n                    \"Q1 2023\", \"Q2 2023\", \"Q3 2023\", \"Q4 2023\",\n                    \"Q1 2024\", \"Q2 2024\")\n\nn_cols &lt;-4 \nbatch_size &lt;- 2\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_quarter, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste(quarter_labels[i]))\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemp_gif &lt;- \"armed_clash.gif\"\n\n# Check if the GIF already exists\nif (!file.exists(temp_gif)) {\n  # If the GIF doesn't exist, create and save it\n  saveGIF({\n    for(i in tims){\n      plot(kde_quarter, i, \n           override.par=FALSE, \n           fix.range=TRUE,\n           main=paste('KDE at', quarter_labels[i]))\n    }\n  }, movie.name = temp_gif, interval = 0.01, ani.width=700, ani.height=500)\n} else {\n  # If the GIF already exists, skip the saving process\n  message(\"GIF already exists, skipping save.\")\n}"
  }
]