[
  {
    "objectID": "In-Class_Exercise/InClassEx03/InClassEx03.html",
    "href": "In-Class_Exercise/InClassEx03/InClassEx03.html",
    "title": "In-class Exercise 03",
    "section": "",
    "text": "pacman::p_load(arrow,lubridate,tidyverse,tmap,sf)\n\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\nacled_sf&lt;- read_csv(\"data/aspatial/ACLED_Myanmar.csv\") %&gt;% \n  #convert into sf\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs=4326) %&gt;% \n  st_transform(crs = 32647) %&gt;% \n  mutate(event_date = dmy(event_date))\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLook at the date-field specifically, without conversion, the event_date is converted into character instead of retaining DD-MMM-YYYY format. To fix this, add the mutate function and transform into sf"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx03/InClassEx03.html#importing-geospatial-data",
    "href": "In-Class_Exercise/InClassEx03/InClassEx03.html#importing-geospatial-data",
    "title": "In-class Exercise 03",
    "section": "2.1 Importing Geospatial Data",
    "text": "2.1 Importing Geospatial Data\nIn this section, st_read() of sf package will be used to import the three geospatial data sets mentioned in previous section into R environment./r\n\nchildcare_sf &lt;- st_read(\"data/aspatial/child-care-services-geojson.geojson\")\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx03/data/aspatial/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx03/InClassEx03.html#assigning-standard-crs",
    "href": "In-Class_Exercise/InClassEx03/InClassEx03.html#assigning-standard-crs",
    "title": "In-class Exercise 03",
    "section": "3.1 Assigning Standard CRS",
    "text": "3.1 Assigning Standard CRS\n\nchildcare_sf &lt;- st_transform(childcare_sf, crs = 3414)\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\n\n\nsg_sf &lt;- mpsz_sf %&gt;% \n  st_union()\n\n\nplot(sg_sf)\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nacled_sf %&gt;% \n  filter(year == 2023 | event_type == \"Political Violence\") %&gt;% \n  tm_shape() + \n  tm_dots() \n\n\n\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "data/MPSZ-2019.html",
    "href": "data/MPSZ-2019.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx02/InClassEx02.html",
    "href": "In-Class_Exercise/InClassEx02/InClassEx02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx02/InClassEx02.html#importing-data-from-mpsz_2019",
    "href": "In-Class_Exercise/InClassEx02/InClassEx02.html#importing-data-from-mpsz_2019",
    "title": "Hands-on Exercise 2",
    "section": "2. 1 Importing Data from MPSZ_2019",
    "text": "2. 1 Importing Data from MPSZ_2019\nThis code chunk imports the MPSSZ-2019 shapefile:\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\") %&gt;% \n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx02/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx02/data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThis code chunk imports the preschool data:\n\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;% \n  st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx02/data/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThis code chunk loads the population data:\n\npopdata &lt;- read_csv(\"data/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nStep 1: Segregate the df showing the planning subzone and area\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;% \n  summarise(`POP` = sum(`Pop`)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from=AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nStep 1(a) : Alternative; Break down the code step by step:\n\n#Group By Function \npopdata_step1 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) \n\n#Summarize & Ungroup Function \npopdata_step2 &lt;- popdata_step1 %&gt;% \n  summarise(`POP` = sum(`Pop`)) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n#Pivot_Wider - transpose the selected columns \npopdata2023 &lt;- popdata_step2 %&gt;% \n  pivot_wider(names_from=AG, values_from = POP)\n\n\nCheck the columns :\n\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\nProcess the code for popdata2023 :\n\npopdata2023 &lt;- popdata2023 %&gt;% \n  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;% \n  mutate(`AGED` = rowSums(.[16:21])) %&gt;% \n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;% \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\nJoining popdata2023 and mpsz19_shp, we first convert the names to_upper(), as r is case sensitive.\n\npopdata2023 &lt;- popdata2023 %&gt;% \n  mutate_at(.vars = vars(PA,SZ), \n            .funs = list(toupper))\n\n\nmpsz_pop2023 &lt;- left_join(popdata2023, mpsz19_shp,\n                          by = c(\"SZ\" = \"SUBZONE_N\"))\n\nThings to note:\n\nmutate_at vs mutate\n\nmutate() allows you to create new variables for specific variables\nmutate_at() allows to you to create new variables for a group of variables that match the criteria\n\nmpsz_pop2023 : conduct a left join where the ‘left’ dataset needs to contain the geometric dataset"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "",
    "text": "As the introductory session, here are some references for useful materials outlined in the course syllabus:"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-1",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-1",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 1",
    "text": "Chapter 1\n\n“Spatial Data, Spatial Analysis, Spatial Data Science” by Prof. Luc Anselin. (This is a long lecture 1hr 15minutes but don’t turn away just because it is lengthy.)\nXie, Yiqun et. al. (2017) “Transdisciplinary Foundations of Geospatial Data Science” ISPRS International Journal of Geo-information, 2017, Vol.6 (12), p.395.\nPaez, A., and Scott, D.M. (2004) “Spatial statistics for urban analysis: A review of techniques with examples”, GeoJournal, 61: 53-67. Available in SMU eLibrary.\n“Geospatial Analytics Will Eat The World, And You Won’t Even Know It”."
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-2",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-2",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 2",
    "text": "Chapter 2\nSELF-READING:\n\nProportional Symbols\nChoropleth Maps\nThe Basics of Data Classification\nChoropleth Mapping with Exploratory Data Analysis\nTennekes, M. (2018) “tmap: Thematic Maps in R”, Journal of Statistical Software, Vol 84:6, 1-39.\n\nREFERENCES:\n\nThe Concept of Map Symbols\nChoropleth map\nChoropleth Maps – A Guide to Data Classification\nBivariate Choropleth\nValue-by-alpha maps\nWhat to consider when creating choropleth maps"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-3",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-3",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 3",
    "text": "Chapter 3"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-4",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-4",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 4",
    "text": "Chapter 4"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-5",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-5",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 5",
    "text": "Chapter 5"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-6",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-6",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 6",
    "text": "Chapter 6"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-7",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-7",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 7",
    "text": "Chapter 7"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-8",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-8",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 8",
    "text": "Chapter 8"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-9",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-9",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 9",
    "text": "Chapter 9"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-10",
    "href": "In-Class_Exercise/InClassEx01/InClassEx01.html#chapter-10",
    "title": "In-Class Exercise 01: Geospatial Data Science",
    "section": "Chapter 10",
    "text": "Chapter 10"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base Rand sf functions,\nassigning or transforming coordinate systems by using using appropriate sffunctions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package.\n\n\nNote: Students are encouraged to read the reference guide of each function, especially the input data requirements, syntax and argument option before using them."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "title": "Hands-on Exercise 1",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nData is key to data analytics including geospatial analytics. In this hands-on exercise, I extracted the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n2.1.1 File Structure\nHandsOnExercise\n|-- HandsOnEx01\n|   |-- Hands-on_Ex01.qmd\n|   |-- data\n|   |   |-- aspatial\n|   |   |   |-- listings.csv\n|   |   |-- geospatial\n|   |   |   |-- CyclingPath_Jul2024\n|   |   |   |-- MP14_SUBZONE_WEB_PL\n|   |   |   |-- PreSchoolsLocation.kml"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#installing-r-packages",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#installing-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "2.2 Installing R Packages",
    "text": "2.2 Installing R Packages\nIn this hands-on exercise, two R packages will be used. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\n\n\nreader\nfor importing csv data\n\n\nreadxl\nfor importing Excel worksheet,\n\n\ntidyr\nfor manipulating data,\n\n\ndplyr\nfor transforming data, and\n\n\nggplot2\nfor visualising data\n\n\n\nThe required packages were installed using the code chunk below:\n\npacman::p_load(sf,tidyverse)\n\n\nLearning Point:\n\np_load function pf pacman package is used to install and load sf and tidyverse packages into R environment."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-polygon-feature-data-in-shapefile-format",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-polygon-feature-data-in-shapefile-format",
    "title": "Hands-on Exercise 1",
    "section": "3.1 Importing polygon feature data in shapefile format",
    "text": "3.1 Importing polygon feature data in shapefile format\nDataset used: MP14_SUBZONE_WEB_PL\nFile Format: shapefile (shp) | Data Frame Type: polygon feature\n\nmpsz = st_read(dsn = \"data/geospatial\"\n               , layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nInterpretation : In the mpsz data frame, there are 323 multipolygon features and 15 fields, and is in the svy21 projected coordinates systems."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-polyline-feature-data-in-shapefile-format",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-polyline-feature-data-in-shapefile-format",
    "title": "Hands-on Exercise 1",
    "section": "3.2 Importing polyline feature data in shapefile format",
    "text": "3.2 Importing polyline feature data in shapefile format\nDataset used: CyclingPath\nFile Format: shapefile (shp) | Data Frame Type: line feature\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nInterpretation : In the cyclingpath linestring feature data frame, there are 3138 features and 2 fields, and is in the svy21 projected coordinates systems too."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "title": "Hands-on Exercise 1",
    "section": "3.3 Importing GIS data in kml format",
    "text": "3.3 Importing GIS data in kml format\nDataset used: PreSchool\nFile Format: kml | Data Frame Type: line feature\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nInterpretation : In the preschool point feature data frame, there are 2290 features and 2 fields, and is in the wgs84 coordinates systems."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "title": "Hands-on Exercise 1",
    "section": "4.1 Working with st_geometry()",
    "text": "4.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nNote:  The print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "title": "Hands-on Exercise 1",
    "section": "4.2 Working with glimpse()",
    "text": "4.2 Working with glimpse()\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nInterpretation: glimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "title": "Hands-on Exercise 1",
    "section": "4.2 Working with head()",
    "text": "4.2 Working with head()\nTo reveal complete information of a feature object, use the head()  function of Base R\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\nNote: One of the useful argument of head() is it allows user to select the numbers of record to display (i.e. the n argument)."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1",
    "section": "6.1 Assigning EPSG code to a simple feature data frame",
    "text": "6.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nTo check the coordinate system of mpsz simple feature data frame, I use st_crs() of sf package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nTo assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "title": "Hands-on Exercise 1",
    "section": "6.2 Transforming the projection of preschool from wgs84 to svy21.",
    "text": "6.2 Transforming the projection of preschool from wgs84 to svy21.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nTake preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\nNext, let us display the content of preschool3414 sf data frame as shown below.\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-aspatial-data",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-aspatial-data",
    "title": "Hands-on Exercise 1",
    "section": "7.1 Importing the aspatial data",
    "text": "7.1 Importing the aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (38): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (6): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Ensu… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2024-06-29   city … B&B … &lt;NA&gt;       \n 3  71903 https://www.airbnb.co…   2.02e13 2024-06-29   city … Room… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2024-06-29   city … 10mi… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2024-06-29   city … 15 m… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Book… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2024-06-29   city … 5 mi… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2024-06-29   city … Comf… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2024-06-29   city … Rela… **IMPORTAN…\n10 344803 https://www.airbnb.co…   2.02e13 2024-06-29   city … Budg… Direct bus…\n# ℹ 3,530 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\nInterpretation: The output reveals that listing tibble data frame consists of 3540 rows and 75 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1",
    "section": "7.2 Creating a simple feature data frame from an aspatial data frame",
    "text": "7.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n#pipe function\n\nLearning Points from the arguments above:\n\n\n\ncoords argument\nrequires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n\n\ncrs argument \nrequires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n\n\n%&gt;% (pipe)\nis used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\n\nI will examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometryhas been added into the data frame. On the other hand, the longitude and latitudecolumns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Exercise 1",
    "section": "8.1 Buffering",
    "text": "8.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\nAnswer differs from ‘1774367 [m^2]’ due to updated data (CyclingPath_Jul2024)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "href": "Hands-On_Exercise/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1",
    "section": "8.2 Point-in-polygon count",
    "text": "8.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nWarning: You should not confuse with st_intersection().\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyrpackage is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of pre-school by planning subzone:\nThe code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nis.numeric(mpsz3414$Pre)\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/test.html",
    "href": "Hands-On_Exercise/Hands-on_Ex03/test.html",
    "title": "test",
    "section": "",
    "text": "pacman::p_load(sf, raster, spatstat, tmap, tidyverse, dplyr, devtools, sp, tidyr, stringr, rvest, xml2)\n\n\nchildcare_sf &lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% \nst_transform(crs=3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex03/data/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nglimpse(childcare_sf)\n\nRows: 1,545\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [m]&gt; POINT Z (27976.73 45716.7 0), POINT Z (25824 29900.0…\n\n\n\nclean_html &lt;- function(html_content) {\n\n  parsed_html &lt;- read_html(html_content)\n  rows &lt;- parsed_html %&gt;%\n    html_nodes(\"tr\")\n  \n  headers &lt;- c()\n  data &lt;- c()\n  \n\n  for (row in rows) {\n    row_headers &lt;- row %&gt;% html_nodes(\"th\") %&gt;% html_text(trim = TRUE)\n    row_data &lt;- row %&gt;% html_nodes(\"td\") %&gt;% html_text(trim = TRUE)\n    \n    if (length(row_headers) &gt; 0) {\n      headers &lt;- c(headers, row_headers)\n    }\n    \n    if (length(row_data) &gt; 0) {\n      data &lt;- c(data, row_data)\n    }\n  }\n  \n\n  table_df &lt;- data.frame(\n    Header = rep(headers, length.out = length(data)),\n    Data = data,\n    stringsAsFactors = FALSE\n  )\n  \n  table_df$Data &lt;- ifelse(table_df$Data == \"\", NA, table_df$Data)\n  \n\n  cleaned_data &lt;- table_df %&gt;%\n    tidyr::pivot_wider(names_from = Header, values_from = Data, values_fill = list(Data = NA))\n  \n  return(cleaned_data)\n}\n\nchildcare_sf_clean &lt;- childcare_sf %&gt;% \n  rowwise() %&gt;% \n  mutate(Cleaned_Description = list(clean_html(Description))) %&gt;% \n  unnest(Cleaned_Description) %&gt;% # Correct function name here\n  ungroup()\n\n#print(childcare_sf_clean)\n\n#===============\nchildcare_sf_cleaned &lt;- childcare_sf_clean %&gt;% select(-Attributes) %&gt;%  select(-Description)\n\n# Shift the column names 2 positions up starting from the 3rd column\ncolnames(childcare_sf_cleaned)[3:(ncol(childcare_sf_cleaned)-3)] &lt;- colnames(childcare_sf_cleaned)[4:ncol(childcare_sf_cleaned)]\n\nWarning in colnames(childcare_sf_cleaned)[3:(ncol(childcare_sf_cleaned) - :\nnumber of items to replace is not a multiple of replacement length\n\n# Remove the last 2 columns, which are now empty after shifting\nchildcare_sf_cleaned &lt;- childcare_sf_cleaned[, 1:(ncol(childcare_sf_cleaned))]\n\n# View the cleaned and shifted data\n#print(childcare_sf_cleaned)\n\n\nglimpse(childcare_sf_cleaned)\n\nRows: 1,545\nColumns: 16\n$ Name                &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_…\n$ geometry            &lt;POINT [m]&gt; POINT Z (27976.73 45716.7 0), POINT Z (25824…\n$ ADDRESSBUILDINGNAME &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ ADDRESSPOSTALCODE   &lt;chr&gt; \"760742\", \"159053\", \"556912\", \"569139\", \"467961\", …\n$ ADDRESSSTREETNAME   &lt;chr&gt; \"742, YISHUN AVENUE 5, #01 - 470, SINGAPORE 760742…\n$ ADDRESSTYPE         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ DESCRIPTION         &lt;chr&gt; \"Child Care Services\", \"Child Care Services\", \"Chi…\n$ HYPERLINK           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ LANDXADDRESSPOINT   &lt;chr&gt; \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", …\n$ LANDYADDRESSPOINT   &lt;chr&gt; \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", …\n$ NAME                &lt;chr&gt; \"AVERBEL CHILD DEVELOPMENT CENTRE PTE LTD\", \"AWWA …\n$ PHOTOURL            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ ADDRESSFLOORNUMBER  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ ADDRESSFLOORNUMBER  &lt;chr&gt; \"AEA27114446235CE\", \"86B24416FB1663C6\", \"F971CBBA9…\n$ INC_CRC             &lt;chr&gt; \"20200826094036\", \"20200826094036\", \"2020082609403…\n$ FMEL_UPD_D          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\nstr(childcare_sf_cleaned)\n\nsf [1,545 × 16] (S3: sf/tbl_df/tbl/data.frame)\n $ Name               : chr [1:1545] \"kml_1\" \"kml_2\" \"kml_3\" \"kml_4\" ...\n $ geometry           :sfc_POINT of length 1545; first list element:  'XYZ' num [1:3] 27977 45717 0\n $ ADDRESSBUILDINGNAME: chr [1:1545] NA NA NA NA ...\n $ ADDRESSPOSTALCODE  : chr [1:1545] \"760742\" \"159053\" \"556912\" \"569139\" ...\n $ ADDRESSSTREETNAME  : chr [1:1545] \"742, YISHUN AVENUE 5, #01 - 470, SINGAPORE 760742\" \"20, LENGKOK BAHRU, #02 - 05, SINGAPORE 159053\" \"22, LI HWAN VIEW, GOLDEN HILL ESTATE, SINGAPORE 556912\" \"3, ANG MO KIO STREET 62, #01 - 36, LINK@AMK, SINGAPORE 569139\" ...\n $ ADDRESSTYPE        : chr [1:1545] NA NA NA NA ...\n $ DESCRIPTION        : chr [1:1545] \"Child Care Services\" \"Child Care Services\" \"Child Care Services\" \"Child Care Services\" ...\n $ HYPERLINK          : chr [1:1545] NA NA NA NA ...\n $ LANDXADDRESSPOINT  : chr [1:1545] \"0\" \"0\" \"0\" \"0\" ...\n $ LANDYADDRESSPOINT  : chr [1:1545] \"0\" \"0\" \"0\" \"0\" ...\n $ NAME               : chr [1:1545] \"AVERBEL CHILD DEVELOPMENT CENTRE PTE LTD\" \"AWWA LTD.\" \"BABIES BY-THE-PARK PTE. LTD.\" \"Baby Elk Infant Care Pte Ltd\" ...\n $ PHOTOURL           : chr [1:1545] NA NA NA NA ...\n $ ADDRESSFLOORNUMBER : chr [1:1545] NA NA NA NA ...\n $ ADDRESSFLOORNUMBER : chr [1:1545] \"AEA27114446235CE\" \"86B24416FB1663C6\" \"F971CBBA973E1AE5\" \"86A4F25D1C7C9D85\" ...\n $ INC_CRC            : chr [1:1545] \"20200826094036\" \"20200826094036\" \"20200826094036\" \"20200826094036\" ...\n $ FMEL_UPD_D         : chr [1:1545] NA NA NA NA ...\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:14] \"Name\" \"ADDRESSBUILDINGNAME\" \"ADDRESSPOSTALCODE\" \"ADDRESSSTREETNAME\" ...\n\n\nFrom the structure of the childcare_sf_cleaned(), we can further improve how the data is shown by renaming the first column to KML_ID, and shifting the ‘Name’ Column to the second column, to accurately reflect the information in the data. In the code above we’ve removed ‘ADDRESSBLOCKHOUSENUMBER’ , so we will add it back in its respective position\n\nnames(childcare_sf_cleaned)[1] &lt;- \"kml_id\"\n\nchildcare_sf_cleaned &lt;- childcare_sf_cleaned[, c(1, 11, 2:10, 12:ncol(childcare_sf_cleaned))]\n\nchildcare_sf_cleaned$ADDRESSBLOCKHOUSENUMBER &lt;- NA \n\nchildcare_sf_cleaned &lt;- childcare_sf_cleaned[, c(1:3, ncol(childcare_sf_cleaned), 4:(ncol(childcare_sf_cleaned)-1))]\n\nhead(childcare_sf_cleaned)\n\nSimple feature collection with 6 features and 16 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 20644.07 ymin: 29900.09 xmax: 41217.74 ymax: 45716.7\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 17\n  kml_id NAME                                  geometry ADDRESSBLOCKHOUSENUMBER\n  &lt;chr&gt;  &lt;chr&gt;                              &lt;POINT [m]&gt; &lt;lgl&gt;                  \n1 kml_1  AVERBEL CHILD DEVELOP…  Z (27976.73 45716.7 0) NA                     \n2 kml_2  AWWA LTD.                 Z (25824 29900.09 0) NA                     \n3 kml_3  BABIES BY-THE-PARK PT… Z (31399.04 37416.36 0) NA                     \n4 kml_4  Baby Elk Infant Care …  Z (29268.43 40942.1 0) NA                     \n5 kml_5  BABYPLANET MONTESSORI… Z (41217.74 33554.94 0) NA                     \n6 kml_6  BAMBINI CHILDCARE LLP  Z (20644.07 36118.78 0) NA                     \n# ℹ 13 more variables: ADDRESSBUILDINGNAME &lt;chr&gt;, ADDRESSPOSTALCODE &lt;chr&gt;,\n#   ADDRESSSTREETNAME &lt;chr&gt;, ADDRESSTYPE &lt;chr&gt;, DESCRIPTION &lt;chr&gt;,\n#   HYPERLINK &lt;chr&gt;, LANDXADDRESSPOINT &lt;chr&gt;, LANDYADDRESSPOINT &lt;chr&gt;,\n#   PHOTOURL &lt;chr&gt;, ADDRESSFLOORNUMBER &lt;chr&gt;, ADDRESSFLOORNUMBER &lt;chr&gt;,\n#   INC_CRC &lt;chr&gt;, FMEL_UPD_D &lt;chr&gt;"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#datasets-used",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#datasets-used",
    "title": "Hands-on Exercise 2",
    "section": "2.1 Datasets Used",
    "text": "2.1 Datasets Used\n\n\n\nMaster Plan 2014 Subzone Boundary (Web)\nMP14_SUBZONE_WEB_PL)\nIt consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020\nrespopagesextod2011to2020.csv\nThis is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-into-r",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-into-r",
    "title": "Hands-on Exercise 2",
    "section": "2.2 Importing Geospatial Data into R",
    "text": "2.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\"\n                 , layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\nR’s default printing behaviour, where it displays the first 10 rows by default, due to the ‘tibble’ package."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#importing-attribute-data-into-r",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#importing-attribute-data-into-r",
    "title": "Hands-on Exercise 2",
    "section": "2.3 Importing Attribute Data into R",
    "text": "2.3 Importing Attribute Data into R\nNext, I will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read.csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\nhead(popdata)\n\n          PA                     SZ     AG   Sex\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n                                      TOD Pop Time\n1                 HDB 1- and 2-Room Flats   0 2011\n2                        HDB 3-Room Flats  10 2011\n3                        HDB 4-Room Flats  30 2011\n4          HDB 5-Room and Executive Flats  50 2011\n5 HUDC Flats (excluding those privatised)   0 2011\n6                       Landed Properties   0 2011"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "title": "Hands-on Exercise 2",
    "section": "2.4 Data preparation",
    "text": "2.4 Data preparation\nI will prepare a data table with year 2020 values, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n\n\n\n\n\n\nYoung\nage group 0 to 4 until age group 20 to 24\n\n\nEconomy Active\nage group 25-29 until age group 60-64\n\n\nAged\nage group 65 and above,\n\n\nTotal\nall age groups\n\n\nDependency\nthe ratio between young and aged against economy active group\n\n\n\n\n2.4.1 Data wrangling\nThe following functions will be used:\n\n\n\npivot_wider()\ntidyr package\n\n\nmutate(),filter(),group_by(),select()\ndplyr package\n\n\n\n\n#Filter to 2020\npopdata2020_step1 &lt;- popdata %&gt;% \n  filter(Time == 2020)\n#print(popdata2020_step1)\n\n#Group by PA, SZ, AG & summarise. Ungroup to ensure the aggregated statistic is not mistakenly used later on \npopdata2020_step2 &lt;- popdata2020_step1 %&gt;% \n  group_by(PA, SZ, AG) %&gt;% \n  summarise (`POP` = sum(`Pop`)) %&gt;% \n  ungroup()\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n#pivot wider \npopdata2020_step3 &lt;- popdata2020_step2 %&gt;% \n  pivot_wider(names_from = AG, values_from = POP)\n\n\n#calculate YOUNG population \npopdata2020_step4 &lt;- popdata2020_step3 %&gt;% \n  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14]))\n\n\n#calculate ECONOMY ACTIVE \npopdata2020_step5 &lt;- popdata2020_step4 %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15]))\n\n#calculate AGED \npopdata2020_step6 &lt;- popdata2020_step5 %&gt;% \n  mutate(`AGED` = rowSums(.[16:21]))\n\n\n#calculate TOTAL\npopdata2020_total &lt;- popdata2020_step6 %&gt;% \n  mutate(`TOTAL` = rowSums(.[3:21]))\n\n#calculate DEPENDENCY RATIO\npopdata2020 &lt;- popdata2020_total %&gt;% \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) /`ECONOMY ACTIVE`) %&gt;% select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\nprint(popdata2020)\n\n# A tibble: 332 × 7\n   PA         SZ                   YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n   &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Cen…  1290             2760   760  4810      0.743\n 2 Ang Mo Kio Cheng San             5640            16460  6050 28150      0.710\n 3 Ang Mo Kio Chong Boon            5100            15000  6470 26570      0.771\n 4 Ang Mo Kio Kebun Bahru           4620            13010  5120 22750      0.749\n 5 Ang Mo Kio Sembawang Hills       1880             3630  1310  6820      0.879\n 6 Ang Mo Kio Shangri-La            3330             9050  3610 15990      0.767\n 7 Ang Mo Kio Tagore                1940             4480  1530  7950      0.775\n 8 Ang Mo Kio Townsville            4190            11950  5100 21240      0.777\n 9 Ang Mo Kio Yio Chu Kang             0                0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East     1110             2410   750  4270      0.772\n# ℹ 322 more rows\n\n\n\nTo see an overview of the column headers, we use the colnames() function after the pivot_wider() function has been implemented:\n\ncol_names &lt;- colnames(popdata2020_step3)\n\nfor (i in seq_along(col_names)){\n  cat(i, col_names[i], \"\\n\")\n}\n\n1 PA \n2 SZ \n3 0_to_4 \n4 10_to_14 \n5 15_to_19 \n6 20_to_24 \n7 25_to_29 \n8 30_to_34 \n9 35_to_39 \n10 40_to_44 \n11 45_to_49 \n12 50_to_54 \n13 55_to_59 \n14 5_to_9 \n15 60_to_64 \n16 65_to_69 \n17 70_to_74 \n18 75_to_79 \n19 80_to_84 \n20 85_to_89 \n21 90_and_over \n\n\n\n\n2.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;% \n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %&gt;%   filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nLearning points:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\ndir.create(\"data/rds\", recursive = TRUE, showWarnings = FALSE)\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-quickly-using-qtm",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-quickly-using-qtm",
    "title": "Hands-on Exercise 2",
    "section": "3.1 Plotting a choropleth map quickly using qtm()",
    "text": "3.1 Plotting a choropleth map quickly using qtm()\nDraw a cartographic standard choropleth map as shown below:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points :\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 2",
    "section": "3.2 Creating a choropleth map by using tmap’s elements",
    "text": "3.2 Creating a choropleth map by using tmap’s elements\nThe disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To counter this, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Dependency ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", \n                                                  main.title.position = \"center\",\n                                                  main.title.size=1.5,\n                                                  legend.height=0.45,\n                                                  legend.width=0.35,\n                                                  frame=TRUE) + \n  tm_borders(alpha = 0.3) + \n  tm_compass(type=\"4star\", size = 3) +\n  tm_scale_bar() + \n  tm_grid(alpha = 0.2) + \n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Population data from Department of Statistics (DOS)\", position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-a-base-map",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-a-base-map",
    "title": "Hands-on Exercise 2",
    "section": "3.3 Drawing a base map",
    "text": "3.3 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons()"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-a-choropleth-map-using-tm_polygons",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-a-choropleth-map-using-tm_polygons",
    "title": "Hands-on Exercise 2",
    "section": "3.4 Drawing a choropleth map using tm_polygons()",
    "text": "3.4 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, I will assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nLearning Pints from tm_polygons():\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "title": "Hands-on Exercise 2",
    "section": "3.5 Drawing a choropleth map using tm_fill() and tm_border()",
    "text": "3.5 Drawing a choropleth map using tm_fill() and tm_border()\ntm_polygons() is a wraper of tm_fill() and tm_border().\nThe following code chunk draws the choropleth map using tm_fill() alone.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nNote: Planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\") + \n  tm_borders(lwd = 0.5, alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNote: Light-gray border lines have been added on the choropleth map.\n\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "title": "Hands-on Exercise 2",
    "section": "5.0 Colour Scheme",
    "text": "5.0 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n5.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          n = 6, \n          style=\"quantile\", \n          palette = \"RdPu\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNote : The colour scheme is shaded in red-purple.\n\nTo reverse the color shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+ \n  tm_fill(\"DEPENDENCY\", \n          style=\"quantile\",\n          palette = \"-RdPu\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNote: The colour scheme has been reversed"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "title": "Hands-on Exercise 2",
    "section": "6.0 Map Layouts",
    "text": "6.0 Map Layouts\n\n6.1 Map Legend\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style=\"jenks\", \n          palette = \"BuPu\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE, \n          legend.hist.z = 0.1) + \n  tm_layout(main.title = \"Distribution of Dependency Ration by planning subzone \\n(Jenks classification)\", \n            main.title.position = \"center\", \n            main.title.size = 1, \n            legend.height = 0.45, \n            legend.width = 0.35, \n            legend.outside = FALSE, \n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) + \n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n6.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the natural style is used.\n\ntm_shape(mpsz_pop2020)+ \n  tm_fill(\"DEPENDENCY\", \n          style=\"quantile\",\n          palette = \"-YlGnBu\")+\n  tm_borders(alpha = 0.3) + \n  tmap_style(\"natural\")\n\ntmap style set to \"natural\"\n\n\nother available styles are: \"white\", \"gray\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n6.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"YlGnBu\", \n          title = \"No. of persons\") + \n  tm_layout(main.title = \"Distribution of Dependency Ratio \\n by planning subzone \", \n            main.title.position=\"center\", \n            legend.height = 0.45, \n            legend.width = 0.35, \n            frame = TRUE) + \n  tm_borders(alpha = 0.3) + \n  tm_compass(type=\"4star\", size = 3)+\n  tm_scale_bar(width = 0.15) + \n  tm_grid(lwd = 0.2, alpha = 0.1) + \n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 2",
    "section": "7.0 Drawing Small Multiple Choropleth Maps",
    "text": "7.0 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n7.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(c(\"YOUNG\", \"AGED\"), \n          style = \"equal\", \n          palette = \"RdPu\") + \n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.3) + \n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(c(\"DEPENDENCY\", \"AGED\"),\n              style=c(\"equal\", \"quantile\"), \n              palette=list(\"Blues\", \"Purples\"))+\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n7.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE)+\n  tm_layout(legend.show = FALSE, \n            title.position = c(\"center\", \"center\"), \n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n\n7.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\", \n              style=\"quantile\",\n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\", \n              style=\"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 2",
    "section": "8.0 Mapping Spatial Object Meeting a Selection Criterion",
    "text": "8.0 Mapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.\n\nmap_north &lt;- tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"NORTH REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE) + \n  tm_layout(title = 'NORTH Region', \n            title.position = c('center', 'top'), \n            legend.outside = TRUE, \n            legend.height = 0.45, \n            legend.width = 5.0, \n            legend.position = c(\"center\", \"bottom\"), \n            frame = FALSE) +\n  tm_borders(alpha = 0.3)\n\nmap_central &lt;- tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE) + \n  tm_layout(title = 'CENTRAL Region', \n            title.position = c('right', 'top'), \n            legend.outside = TRUE, \n            legend.height = 0.45, \n            legend.width = 5.0, \n            legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE) +\n  tm_borders(alpha = 0.3)\n\ntmap_arrange(map_north, map_central)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59, 0.59, 0.59. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59, 0.59, 0.59. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "href": "Hands-On_Exercise/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "title": "Hands-on Exercise 2",
    "section": "9.0 References",
    "text": "9.0 References\n\n9.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n9.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n9.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx01/data/MPSZ-2019.html",
    "href": "In-Class_Exercise/InClassEx01/data/MPSZ-2019.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx02/data/MPSZ-2019.html",
    "href": "In-Class_Exercise/InClassEx02/data/MPSZ-2019.html",
    "title": "IS415-GA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#importing-spatial-data",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#importing-spatial-data",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Importing Spatial Data",
    "text": "4.1 Importing Spatial Data\nUsing the st_read() of sf package.\n\nChildcare Dataset\n\n\nchildcare_sf &lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% \nst_transform(crs=3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex03/data/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nCoastal Outline Dataset. *It is spelled ‘Costal’ from the imported files.\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex03/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nMaster Plan Planning Subzone Dataset\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex03/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\n\n4.1.1 Using the appropriate sf function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\n4.1.2 Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\n\nsg_sf &lt;- sg_sf %&gt;% st_transform(crs = 3414)\nmpsz_sf &lt;- mpsz_sf %&gt;% st_transform(crs = 3414)\n\nCheck CRS of sg_sf and mpsz_sg:\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#mapping-the-geospatial-data-sets",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#mapping-the-geospatial-data-sets",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Mapping the geospatial data sets",
    "text": "4.2 Mapping the geospatial data sets\n\n4.2.1 Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(mpsz_sf) + tm_polygons() +\n  tm_shape(childcare_sf) + \n  tm_dots(size= 0.001) \n\n\n\n\n\n\n\n\nNote: All the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nReminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Converting sf data frames to sp’s Spatial* class",
    "text": "5.1 Converting sf data frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\n5.1.1 Using appropriate function, display the information of these three Spatial* classes as shown below.\n\nsummary(childcare)\n\nObject of class SpatialPointsDataFrame\nCoordinates:\n               min      max\ncoords.x1 11203.01 45404.24\ncoords.x2 25667.60 49300.88\ncoords.x3     0.00     0.00\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 1545\nData attributes:\n     Name           Description       \n Length:1545        Length:1545       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n\n\n\nsummary(mpsz)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2667.538 56396.44\ny 15748.721 50256.33\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    OBJECTID       SUBZONE_NO      SUBZONE_N          SUBZONE_C        \n Min.   :  1.0   Min.   : 1.000   Length:323         Length:323        \n 1st Qu.: 81.5   1st Qu.: 2.000   Class :character   Class :character  \n Median :162.0   Median : 4.000   Mode  :character   Mode  :character  \n Mean   :162.0   Mean   : 4.625                                        \n 3rd Qu.:242.5   3rd Qu.: 6.500                                        \n Max.   :323.0   Max.   :17.000                                        \n    CA_IND           PLN_AREA_N         PLN_AREA_C          REGION_N        \n Length:323         Length:323         Length:323         Length:323        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   REGION_C           INC_CRC            FMEL_UPD_D             X_ADDR     \n Length:323         Length:323         Min.   :2014-12-05   Min.   : 5093  \n Class :character   Class :character   1st Qu.:2014-12-05   1st Qu.:21864  \n Mode  :character   Mode  :character   Median :2014-12-05   Median :28465  \n                                       Mean   :2014-12-05   Mean   :27257  \n                                       3rd Qu.:2014-12-05   3rd Qu.:31674  \n                                       Max.   :2014-12-05   Max.   :50425  \n     Y_ADDR        SHAPE_Leng        SHAPE_Area      \n Min.   :19579   Min.   :  871.5   Min.   :   39438  \n 1st Qu.:31776   1st Qu.: 3709.6   1st Qu.:  628261  \n Median :35113   Median : 5211.9   Median : 1229894  \n Mean   :36106   Mean   : 6524.4   Mean   : 2420882  \n 3rd Qu.:39869   3rd Qu.: 6942.6   3rd Qu.: 2106483  \n Max.   :49553   Max.   :68083.9   Max.   :69748299  \n\n\n\nsummary(sg)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2663.926 56047.79\ny 16357.981 50244.03\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    GDO_GID          MSLINK          MAPID    COSTAL_NAM       \n Min.   : 1.00   Min.   : 1.00   Min.   :0   Length:60         \n 1st Qu.:15.75   1st Qu.:17.75   1st Qu.:0   Class :character  \n Median :30.50   Median :33.50   Median :0   Mode  :character  \n Mean   :30.50   Mean   :33.77   Mean   :0                     \n 3rd Qu.:45.25   3rd Qu.:49.25   3rd Qu.:0                     \n Max.   :60.00   Max.   :67.00   Max.   :0                     \n\n\nNote: The geospatial data have been converted into their respective sp’s Spatial* classes now."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Converting the Spatial* class into generic sp format",
    "text": "5.2 Converting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nDisplay the sp objects properties as shown below:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n5.2.1 Differences between Spatial* classes and generic sp object"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Converting the generic sp format into spatstat’s ppp format",
    "text": "5.3 Converting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\nUsing st_coordinates and st_bbox:\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\nWithout these functions:\n\nchildcare_ppp_toClean &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\n\nPlot childcare_ppp and examine the difference.\n\npar(mfrow=c(1,2))\nplot(childcare_ppp)\nplot(childcare_ppp_toClean)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nQuestion to address:\nWhy is there a difference in the data presented for childcare_ppp?\nUpon further exploration, using st_coordinates and the st_bbox limits the data extracted to that of the spatial data. We see that due the warning\n only first attribute column is used for marks\n, further processing of the data is needed as the Description Column actually embeds the data and needs parsing before it is usable.\n\nSummary statistics of created ppp object:\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nsummary(childcare_ppp_toClean)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nWarning: (Regarding duplicates) In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n5.3.1 Parsing HTML to make the data more readable\n\nglimpse(childcare_sf)\n\nRows: 1,545\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [m]&gt; POINT Z (27976.73 45716.7 0), POINT Z (25824 29900.0…\n\n\nHere, we will process the HTML string per column\n\nclean_html &lt;- function(html_content){\n  parsed_html &lt;- read_html(html_content)\n  rows &lt;- parsed_html %&gt;% \n    html_nodes(\"tr\")\n  \n  headers &lt;- c()\n  data &lt;- c()\n  \n  for (row in rows){\n    row_headers &lt;- row %&gt;% html_nodes(\"th\") %&gt;% html_text(trim = TRUE)\n    row_data &lt;- row %&gt;% html_nodes(\"td\") %&gt;%  html_text(trim = TRUE)\n    \n    if (length(row_headers) &gt; 0){\n      headers &lt;- c(headers, row_headers)\n    }\n    \n    if (length(row_data) &gt; 0){\n      data &lt;- c(data, row_data)\n    }\n  }\n  \n  table_df &lt;- data.frame(\n    Header = rep(headers, length.out = length(data)),\n    Data = data, \n    stringsAsFactors = FALSE\n  )\n  \n  table_df$Data &lt;- ifelse(table_df$Data == \"\", NA, table_df$Data)\n  \n  cleaned_data &lt;- table_df %&gt;% \n    tidyr::pivot_wider(names_from = Header, values_from = Data, values_fill = list(Data = NA))\n  \n  return(cleaned_data)\n}\n\nchildcare_sf_clean &lt;- childcare_sf %&gt;% \n  rowwise() %&gt;% \n  mutate(Cleaned_Description = list(clean_html(Description))) %&gt;% \n  unnest(Cleaned_Description) %&gt;% \n  ungroup()\n\n#Remove redundant attributes row, redundant Description Row with HTML string\nchildcare_sf_cleaned &lt;- childcare_sf_clean %&gt;% select(-Attributes) %&gt;% \n  select(-Description)\n\ncolnames(childcare_sf_cleaned)[3:(ncol(childcare_sf_cleaned)-3)] &lt;- colnames(childcare_sf_cleaned)[4:ncol(childcare_sf_cleaned)]\n\nWarning in colnames(childcare_sf_cleaned)[3:(ncol(childcare_sf_cleaned) - :\nnumber of items to replace is not a multiple of replacement length\n\nchildcare_sf_cleaned &lt;- childcare_sf_cleaned[, 1:(ncol(childcare_sf_cleaned))]\n\n\nstr(childcare_sf_cleaned)\n\nsf [1,545 × 16] (S3: sf/tbl_df/tbl/data.frame)\n $ Name               : chr [1:1545] \"kml_1\" \"kml_2\" \"kml_3\" \"kml_4\" ...\n $ geometry           :sfc_POINT of length 1545; first list element:  'XYZ' num [1:3] 27977 45717 0\n $ ADDRESSBUILDINGNAME: chr [1:1545] NA NA NA NA ...\n $ ADDRESSPOSTALCODE  : chr [1:1545] \"760742\" \"159053\" \"556912\" \"569139\" ...\n $ ADDRESSSTREETNAME  : chr [1:1545] \"742, YISHUN AVENUE 5, #01 - 470, SINGAPORE 760742\" \"20, LENGKOK BAHRU, #02 - 05, SINGAPORE 159053\" \"22, LI HWAN VIEW, GOLDEN HILL ESTATE, SINGAPORE 556912\" \"3, ANG MO KIO STREET 62, #01 - 36, LINK@AMK, SINGAPORE 569139\" ...\n $ ADDRESSTYPE        : chr [1:1545] NA NA NA NA ...\n $ DESCRIPTION        : chr [1:1545] \"Child Care Services\" \"Child Care Services\" \"Child Care Services\" \"Child Care Services\" ...\n $ HYPERLINK          : chr [1:1545] NA NA NA NA ...\n $ LANDXADDRESSPOINT  : chr [1:1545] \"0\" \"0\" \"0\" \"0\" ...\n $ LANDYADDRESSPOINT  : chr [1:1545] \"0\" \"0\" \"0\" \"0\" ...\n $ NAME               : chr [1:1545] \"AVERBEL CHILD DEVELOPMENT CENTRE PTE LTD\" \"AWWA LTD.\" \"BABIES BY-THE-PARK PTE. LTD.\" \"Baby Elk Infant Care Pte Ltd\" ...\n $ PHOTOURL           : chr [1:1545] NA NA NA NA ...\n $ ADDRESSFLOORNUMBER : chr [1:1545] NA NA NA NA ...\n $ ADDRESSFLOORNUMBER : chr [1:1545] \"AEA27114446235CE\" \"86B24416FB1663C6\" \"F971CBBA973E1AE5\" \"86A4F25D1C7C9D85\" ...\n $ INC_CRC            : chr [1:1545] \"20200826094036\" \"20200826094036\" \"20200826094036\" \"20200826094036\" ...\n $ FMEL_UPD_D         : chr [1:1545] NA NA NA NA ...\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:14] \"Name\" \"ADDRESSBUILDINGNAME\" \"ADDRESSPOSTALCODE\" \"ADDRESSSTREETNAME\" ...\n\n\nFrom the sxtructure of the childcare_sf_cleaned(), we can further improve how the data is shown by renaming the first column to KML_ID, and shifting the ‘Name’ Column to the second column, to accurately reflect the information in the data. In the code above we’ve removed ‘ADDRESSBLOCKHOUSENUMBER’ , so we will add it back in its respective position.\n\nnames(childcare_sf_cleaned)[1] &lt;- \"kml_id\"\n\nchildcare_sf_cleaned &lt;- childcare_sf_cleaned[, c(1, 11, 2:10, 12:ncol(childcare_sf_cleaned))]\n\nchildcare_sf_cleaned$ADDRESSBLOCKHOUSENUMBER &lt;- NA \n\nchildcare_sf_cleaned &lt;- childcare_sf_cleaned[, c(1:3, ncol(childcare_sf_cleaned), 4:(ncol(childcare_sf_cleaned)-1))]\n\n\nhead(childcare_sf_cleaned)\n\nSimple feature collection with 6 features and 16 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 20644.07 ymin: 29900.09 xmax: 41217.74 ymax: 45716.7\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 17\n  kml_id NAME                                  geometry ADDRESSBLOCKHOUSENUMBER\n  &lt;chr&gt;  &lt;chr&gt;                              &lt;POINT [m]&gt; &lt;lgl&gt;                  \n1 kml_1  AVERBEL CHILD DEVELOP…  Z (27976.73 45716.7 0) NA                     \n2 kml_2  AWWA LTD.                 Z (25824 29900.09 0) NA                     \n3 kml_3  BABIES BY-THE-PARK PT… Z (31399.04 37416.36 0) NA                     \n4 kml_4  Baby Elk Infant Care …  Z (29268.43 40942.1 0) NA                     \n5 kml_5  BABYPLANET MONTESSORI… Z (41217.74 33554.94 0) NA                     \n6 kml_6  BAMBINI CHILDCARE LLP  Z (20644.07 36118.78 0) NA                     \n# ℹ 13 more variables: ADDRESSBUILDINGNAME &lt;chr&gt;, ADDRESSPOSTALCODE &lt;chr&gt;,\n#   ADDRESSSTREETNAME &lt;chr&gt;, ADDRESSTYPE &lt;chr&gt;, DESCRIPTION &lt;chr&gt;,\n#   HYPERLINK &lt;chr&gt;, LANDXADDRESSPOINT &lt;chr&gt;, LANDYADDRESSPOINT &lt;chr&gt;,\n#   PHOTOURL &lt;chr&gt;, ADDRESSFLOORNUMBER &lt;chr&gt;, ADDRESSFLOORNUMBER &lt;chr&gt;,\n#   INC_CRC &lt;chr&gt;, FMEL_UPD_D &lt;chr&gt;"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.4 Handling duplicated points",
    "text": "5.4 Handling duplicated points\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) + \n  tm_dots(alpha = 0.7, size = 0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\n5.4.1 How to spot the duplicate points from the map shown\n\n\n\n\n\n\n\n\nMethod\nDescription\nPossible Challenges\n\n\n\n\nDeleting Duplicates\nFiltering the duplicates and deleting them from the dataset\nSome useful points will be lost\n\n\nJittering\nAdd a small perturbation to the duplicate points so that they do not occupy the exact same space\n\n\n\nMarks\nMake each point ‘unique’ and then attach the duplicates of the points to the patterns as marks.\n\n\n\n\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jitter &lt;- rjitter(childcare_ppp, \n                                retry=TRUE, \n                                nsim=1, \n                                drop=TRUE)\n\nCheck for duplicated points in the geospatial data.\n\nany(duplicated(childcare_ppp_jitter))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.5 Creating owin object",
    "text": "5.5 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe output object can be displayed by using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-events-object-and-owin-object",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-events-object-and-owin-object",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.6 Combining point events object and owin object",
    "text": "5.6 Combining point events object and owin object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n5.6.1 Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Kernel Density Estimation",
    "text": "6.1 Kernel Density Estimation\nThis section focuses on the computation of the kernel density estimation (KDE) of childcare services in Singapore.\n\n6.1.1 Computing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, \n                              sigma=bw.diggle, \n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n6.1.2 Rescalling KDE values\nIn the code chunk below, rescale.ppp() is used to covert the unit of measurement from meter to kilometer.\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\nNow, we can re-run density() using the resale data set and plot the output kde map.\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG_bw)\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nNote: The output image looks identical to the earlier version, the only changes in the data values (refer to the legend)."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-automatic-bandwidth-methods",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-automatic-bandwidth-methods",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Working with different automatic bandwidth methods",
    "text": "6.2 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\nkde_childcareSG.bw.CvL &lt;- density(childcareSG_ppp.km, \n                                 sigma=bw.CvL,\n                                 edge=TRUE,\n                                 kernel=\"gaussian\")\nplot(kde_childcareSG.bw.CvL)\n\n\n\n\n\n\n\n\n\nkde_childcareSG.bw.scott &lt;- density(childcareSG_ppp.km,\n                                    sigma=bw.scott,\n                                    edge=TRUE,\n                                    kernel=\"gaussian\")\nplot(kde_childcareSG.bw.scott)\n\n\n\n\n\n\n\n\n\nkde_childcareSG.bw.ppl &lt;- density(childcareSG_ppp.km,\n                                  sigma=bw.ppl,\n                                  edge=TRUE,\n                                  kernel=\"gaussian\")\nplot(kde_childcareSG.bw.ppl)\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2), mar=c(3, 3, 2, 1)) \nplot(kde_childcareSG.bw, main=\"bw.diggle\")\nplot(kde_childcareSG.bw.CvL, main=\"bw.CvL\")\nplot(kde_childcareSG.bw.scott, main=\"bw.scott\")\nplot(kde_childcareSG.bw.ppl, main=\"bw.ppl\")\n\n\n\n\n\n\n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods.\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main=\"bw.diggle\")\nplot(kde_childcareSG.ppl, main=\"bw.ppl\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-kernel-methods",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-kernel-methods",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Working with different kernel methods",
    "text": "6.3 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2), mar=c(2,2,2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-fixed-bandwidth",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-fixed-bandwidth",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Computing KDE by using fixed bandwidth",
    "text": "7.1 Computing KDE by using fixed bandwidth\nI will compute a KDE layer by defining a bandwidth of 600 meters. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-adaptive-bandwidth",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-adaptive-bandwidth",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.2 Computing KDE by using adaptive bandwidth",
    "text": "7.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using adaptive.density() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nCompare the fixed and adaptive kernel density estimation outputs by using the code chunk below:\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main=\"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main=\"Adaptive bandwidth\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-kde-output-into-grid-object",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#converting-kde-output-into-grid-object",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.3 Converting KDE output into grid object",
    "text": "7.3 Converting KDE output into grid object\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\ngridded_kde_childcareSG_bw &lt;- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n7.3.1 Converting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\nNote : CRS property is NA\n\n\n7.3.2 Assigining Projection Systems\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\nprojection(kde_childcareSG_bw_raster) &lt;-(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\nNote: CRS Property is now updated and complete."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-output-in-tmap",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-output-in-tmap",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.4 Visualising the output in tmap",
    "text": "7.4 Visualising the output in tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette='viridis') + \n  tm_layout(legend.position = c(\"right\", \"bottom\", frame = FALSE))\n\nWarning in tolower(gt$title.position) == tolower(gt$legend.position): longer\nobject length is not a multiple of shorter object length\n\n\n\n\n\n\n\n\n\nNote: The raster values are encoded explicitly onto the raster pixel using the values in “v”” field."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.5 Comparing Spatial Point Patterns using KDE",
    "text": "7.5 Comparing Spatial Point Patterns using KDE\nIn this section, we compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\n7.5.1 Extracting Study Area\nThe code chunk below will be used to extract the target planning areas.\n\npg &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlotting target planning areas:\n\nplot(pg, main=\"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main=\"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main=\"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main=\"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\n7.5.2 Creating owin object\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n7.5.3 Combining childcare points and the study area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jitter[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jitter[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jitter[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jitter[jw_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2), mar=c(2,2,2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n7.5.4 Computing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\npar(mfrow=c(2,2), mar=c(2,2,2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n7.5.5 Computing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\npar(mfrow=c(2,2), mar=c(2,2,2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"), main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"), main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "8.1 Testing Spatial Point Patterns using Clark and Evans Test",
    "text": "8.1 Testing Spatial Point Patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\", \n                clipregion = \"sg_owin\", \n                alternative=c(\"clustered\"), \n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nWhat conclusion can you draw from the test result?\nWith a 95% confidence level and such a low p-value, you can reject the null hypothesis of complete spatial randomness. The conclusion is that the childcareSG_ppp data is significantly clustered."
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-choa-chu-kang-planning-area",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-choa-chu-kang-planning-area",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "8.2 Clark and Evans Test: Choa Chu Kang planning area",
    "text": "8.2 Clark and Evans Test: Choa Chu Kang planning area\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\nclarkevans.test(childcare_ck_ppp, \n                correction=\"none\", \n                clipregion=NULL, \n                alternative=c(\"two.sided\"), \n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.97133, p-value = 0.6684\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-tampines-planning-area",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-tampines-planning-area",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "8.3 Clark and Evans Test: Tampines planning area",
    "text": "8.3 Clark and Evans Test: Tampines planning area\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\nclarkevans.test(childcare_tm_ppp, \n                correction=\"none\", \n                clipregion=NULL, \n                alternative=c(\"two.sided\"), \n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.80344, p-value = 0.0003891\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "9.1 Choa Chu Kang Planning",
    "text": "9.1 Choa Chu Kang Planning\n\n9.1.1 Computing G-function estimation\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_CK &lt;- Gest(childcare_ck_ppp, correction=\"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n9.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "9.2 Tampines Planning Area",
    "text": "9.2 Tampines Planning Area\n\n9.2.1 Computing G-function estimation\n\nG_TM &lt;- Gest(childcare_tm_ppp, correction=\"best\")\nplot(G_TM)\n\n\n\n\n\n\n\n\n\n\n9.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nG_TM.csr &lt;- envelope(childcare_tm_ppp, Gest, correction=\"all\", nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_TM.csr)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "10.1 Choa Chu Kang Planning Area",
    "text": "10.1 Choa Chu Kang Planning Area\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\n10.1.1 Computing F-function Estimation\n\nF_CK &lt;- Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\n\n10.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nOnce the simulation is done, we will plot the results.\n\nplot(F_CK.csr)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-1",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-1",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "10.2 Tampines Planning Area",
    "text": "10.2 Tampines Planning Area\n\n10.2.1 Computing F-function Estimation\nMonte Carlo test with F-function:\n\nF_TM &lt;- Fest(childcare_tm_ppp, correction=\"best\")\nplot(F_TM)\n\n\n\n\n\n\n\n\n\n\n10.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nF_TM.csr &lt;- envelope(childcare_tm_ppp, Fest, correction=\"all\", nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_TM.csr)"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-1",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-1",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "11.1 Choa Chu Kang Planning Area",
    "text": "11.1 Choa Chu Kang Planning Area\n\n11.1.1 Computing K-function Estimation\n\nK_CK &lt;- Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_CK, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n10.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_CK.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim=999, rank = 1, glocal=TRUE)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(K_CK, . -r ~r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-2",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-2",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "11.2 Tampines Planning Area",
    "text": "11.2 Tampines Planning Area\n\n11.2.1 Computing K-function Estimation\n\nK_TM &lt;- Kest(childcare_tm_ppp, correction=\"Ripley\")\nplot(K_TM, . -r ~ r, xlab=\"d(m)\", ylab=\"K(d)-r\",xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n11.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_TM.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim=99, rank=1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_TM.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-2",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-2",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "12.1 Choa Chu Kang Planning Area",
    "text": "12.1 Choa Chu Kang Planning Area\n\n12.1.1 Computing L-function Estimation\n\nL_CK &lt;- Lest(childcare_ck_ppp, correction=\"Ripley\")\nplot(L_CK, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n12.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_CK.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim=99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_CK.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  },
  {
    "objectID": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-3",
    "href": "Hands-On_Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-3",
    "title": "Chapter 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "12.2 Tampines Planning Area",
    "text": "12.2 Tampines Planning Area\n\n12.2.1 Computing L-function Estimation\n\nL_TM &lt;- Lest(childcare_tm_ppp, correction=\"Ripley\")\nplot(L_TM, .-r~r, ylab= \"L(d)-r\", xlab = \"d(m)\", xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n12.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing.\n\nL_TM.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim=99, rank=1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_TM.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html",
    "title": "In-class Exercise 04",
    "section": "",
    "text": "The specific questions we would like to answer are:\n\nare the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?\nif the answer is NO, where and when the observed forest fire locations tend to cluster?"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#importing-study-area",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#importing-study-area",
    "title": "In-class Exercise 04",
    "section": "3.1 Importing study area",
    "text": "3.1 Importing study area\nIn this section, st_read() of sf package will be used to import the two geospatial data sets mentioned in previous section into R environment.\nKepulauan_Bangka_Belitung\n\nkbb &lt;- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") \n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nLooking further into the dataset, we notice that the coordinates have Polygon Z Feature.\n\nBefore proceeding, we need to dissolve the boundaries, and check for multi-polygon features. In this case, Polygon Z is not needed and may interfere with further analysis\n\nGroup Z boundaries up\nRemove the Z value\nTransform the projection\n\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;% \n  st_union() %&gt;% \n  st_zm(drop = TRUE, what=\"ZM\") %&gt;% \n  st_transform(crs=32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#convergint-to-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#convergint-to-owin-object",
    "title": "In-class Exercise 04",
    "section": "2.2 Convergint to owin object",
    "text": "2.2 Convergint to owin object\nNext, as.owin() is used to convert kbb into an owin object.\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\nNext, class() is used to confim if the output is indeed an owin object\n\nclass(kbb_owin)\n\n[1] \"owin\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#overall-plot",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#overall-plot",
    "title": "In-class Exercise 04",
    "section": "5.1 Overall Plot",
    "text": "5.1 Overall Plot\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_bubbles(alpha = 0.5, size = 0.05) + \n  tm_layout(main.title = \"Forest Fire Distribution in Kepulauan & Bangka Belitung\", \n            )"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#visualizing-geographic-distribution-of-forest-fires-by-month",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#visualizing-geographic-distribution-of-forest-fires-by-month",
    "title": "In-class Exercise 04",
    "section": "5.2 Visualizing Geographic Distribution of Forest Fires by Month",
    "text": "5.2 Visualizing Geographic Distribution of Forest Fires by Month\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_dots(alpha = 0.5, size = 0.1) + \n  tm_layout(main.title = \"Forest Fire Distribution by Month Factor in Kepulauan & Bangka Belitung\", \n            ) + \n  tm_facets(by=\"Month_fac\", \n            free.coords=FALSE,\n            drop.units=TRUE)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#extracting-forest-fires-by-month",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#extracting-forest-fires-by-month",
    "title": "In-class Exercise 04",
    "section": "6.1 Extracting Forest fires by month",
    "text": "6.1 Extracting Forest fires by month\nThe code chunk below is used to remofe the unwanted fields from fire_sf data.frame. This is because as.ppp() only need the mark field and geometry field from the input sf data.frame\n\nfire_month &lt;- fire_sf %&gt;% \n  select(Month_num)\nclass(fire_month)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp",
    "title": "In-class Exercise 04",
    "section": "6.2 Creating ppp",
    "text": "6.2 Creating ppp\nThe code chunk below is used to derive a ppp obect called fire_month from fire_month sf data.frame\n\nfire_month_ppp &lt;- as.ppp(fire_month)\n#marks(fire_month_ppp) &lt;- fire_sf$DayofYear\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nst_crs(kbb_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n\nst_crs(fire_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n\n\nThe code chunk is used to check the output is in the correct object class:\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\nIn the code chunk below, we check for duplicates.\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object",
    "title": "In-class Exercise 04",
    "section": "6.3 Including Owin object",
    "text": "6.3 Including Owin object\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\nplot(fire_month_owin)"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#computing-spatio-temporal-kde",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#computing-spatio-temporal-kde",
    "title": "In-class Exercise 04",
    "section": "6.4 Computing Spatio-temporal KDE",
    "text": "6.4 Computing Spatio-temporal KDE\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object",
    "title": "In-class Exercise 04",
    "section": "6.5 Plotting the spatio-temporal KDE Object",
    "text": "6.5 Plotting the spatio-temporal KDE Object\nIn the code chunk below, plot() of R base is used to the KDE for between July 2023 - December 2023.\n\npar(mfrow = c(2, 3), fig.width = 12, fig.height = 10)\n\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.width\"\nis not a graphical parameter\n\n\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.height\"\nis not a graphical parameter\n\ntims &lt;- c(7,8,9,10,11,12)\n\nfor(i in tims){\n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE,\n       main=paste(\"KDE at month\",i))\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#converging-to-owin-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#converging-to-owin-object",
    "title": "In-class Exercise 04",
    "section": "3.2 Converging to owin object",
    "text": "3.2 Converging to owin object\nNext, as.owin() is used to convert kbb into an owin object.\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\nNext, class() is used to confim if the output is indeed an owin object\n\nclass(kbb_owin)\n\n[1] \"owin\""
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object",
    "title": "In-class Exercise 04",
    "section": "7.1 Creating ppp object",
    "text": "7.1 Creating ppp object\nIn the code chunk below, DayofYear field is included in the output ppp object.\n\nfire_yday_ppp &lt;- fire_sf %&gt;% \n  select(DayofYear) %&gt;% \n  as.ppp()"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#including-owin-object-1",
    "title": "In-class Exercise 04",
    "section": "7.2 Including Owin object",
    "text": "7.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-1",
    "title": "In-class Exercise 04",
    "section": "7.3 Plotting the Spatio-temporal KDE object",
    "text": "7.3 Plotting the Spatio-temporal KDE object\n\nkde_yday &lt;- spattemp.density(fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\n\ntims &lt;- 10:352\n\nn_cols &lt;-4 \nbatch_size &lt;- 12\nn_batches &lt;- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start &lt;- (b-1) * batch_size + 1\n  end &lt;- min(b * batch_size, length(tims))\n  \n  current_tims &lt;- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object-1",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#creating-ppp-object-1",
    "title": "In-class Exercise 04",
    "section": "8.1 Creating ppp object",
    "text": "8.1 Creating ppp object\nNow, the STKDE will be derived by using h and lambda values derive in previous step.\n\nkde_yday_plus &lt;- spattemp.density(\n  fire_yday_owin,\n  h = 9000,\n  lambda =19)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday_plus)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 9000 (spatial)\n  lambda = 19 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [2.001642e-19, 2.445724e-12]"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-2",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#plotting-the-spatio-temporal-kde-object-2",
    "title": "In-class Exercise 04",
    "section": "8.2 Plotting the Spatio-temporal KDE object",
    "text": "8.2 Plotting the Spatio-temporal KDE object\n\ntims &lt;- 10:352\n\ntemp_gif &lt;- tempfile(fileext = '.gif')\nsaveGIF({\n  for(i in tims){\n    plot(kde_yday, i, \n         override.par=FALSE, \n         fix.range=TRUE,\n         main=paste('KDE at Day',i))\n  }\n}, movie.name = \"forestFires.gif\", interval = 0.5, ani.width=800, ani.height=600)\n\nOutput at: forestFires.gif\n\n\n[1] TRUE"
  },
  {
    "objectID": "In-Class_Exercise/InClassEx04/InClassEx04.html#displaying-the-gif",
    "href": "In-Class_Exercise/InClassEx04/InClassEx04.html#displaying-the-gif",
    "title": "In-class Exercise 04",
    "section": "Displaying the GIF",
    "text": "Displaying the GIF"
  }
]