---
title: "Hands-on Exercise 2"
author: "Jezelei Manangan"
date: "August 20, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Thematic Mapping & GeoVisualization with R

In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.

Geovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.

# 1.0 Getting Started

------------------------------------------------------------------------

In this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

The code chunk below will be used to install and load these packages in RStudio.

```{r}
pacman::p_load(sf,tmap,tidyverse)
```

# 2.0 Importing Data into R

## 2.1 Datasets Used

|                                                                                                     |                                 |                                                                                                                                                                                                                                                                                           |
|------------------|------------------|-------------------------------------|
| Master Plan 2014 Subzone Boundary (Web)                                                             | `MP14_SUBZONE_WEB_PL`)          | It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.                                                                                                                                                           |
| Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 | `respopagesextod2011to2020.csv` | This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile. |

## 2.2 Importing Geospatial Data into R

The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn="data/geospatial"
                 , layer = "MP14_SUBZONE_WEB_PL")

```

```{r}
mpsz
```

Notice that only the first ten records will be displayed. Do you know why?

:   R's default printing behaviour, where it displays the first 10 rows by default, due to the 'tibble' package.

## 2.3 Importing Attribute Data into R

Next, I will import *`respopagsex2011to2020.csv`* file into RStudio and save the file into an R dataframe called *popdata*.

The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
popdata <- read.csv("data/aspatial/respopagesextod2011to2020.csv")
```

```{r}
head(popdata)
```

## 2.4 Data preparation

I will prepare a data table with year 2020 values, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

|                |                                                               |
|--------------------|----------------------------------------------------|
| Young          | age group 0 to 4 until age group 20 to 24                     |
| Economy Active | age group 25-29 until age group 60-64                         |
| Aged           | age group 65 and above,                                       |
| Total          | all age groups                                                |
| Dependency     | the ratio between young and aged against economy active group |

### 2.4.1 Data wrangling

The following functions will be used:

|                                         |                   |
|-----------------------------------------|-------------------|
| `pivot_wider()`                         | **tidyr** package |
| `mutate(),filter(),group_by(),select()` | **dplyr** package |

```{r}
#Filter to 2020
popdata2020_step1 <- popdata %>% 
  filter(Time == 2020)
#print(popdata2020_step1)

#Group by PA, SZ, AG & summarise. Ungroup to ensure the aggregated statistic is not mistakenly used later on 
popdata2020_step2 <- popdata2020_step1 %>% 
  group_by(PA, SZ, AG) %>% 
  summarise (`POP` = sum(`Pop`)) %>% 
  ungroup()


#pivot wider 
popdata2020_step3 <- popdata2020_step2 %>% 
  pivot_wider(names_from = AG, values_from = POP)


#calculate YOUNG population 
popdata2020_step4 <- popdata2020_step3 %>% 
  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14]))


#calculate ECONOMY ACTIVE 
popdata2020_step5 <- popdata2020_step4 %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15]))

#calculate AGED 
popdata2020_step6 <- popdata2020_step5 %>% 
  mutate(`AGED` = rowSums(.[16:21]))


#calculate TOTAL
popdata2020_total <- popdata2020_step6 %>% 
  mutate(`TOTAL` = rowSums(.[3:21]))

#calculate DEPENDENCY RATIO
popdata2020 <- popdata2020_total %>% 
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) /`ECONOMY ACTIVE`) %>% select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
print(popdata2020)
```

\
To see an overview of the column headers, we use the *colnames()* function after the *pivot_wider()* function has been implemented:

```{r}
col_names <- colnames(popdata2020_step3)

for (i in seq_along(col_names)){
  cat(i, col_names[i], "\n")
}
```

### 2.4.2 Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>% 
  mutate_at(.vars = vars(PA,SZ),
            .funs = list(toupper)) %>%   filter(`ECONOMY ACTIVE` > 0)
```

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
```

Learning points:

-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.

```{r}
dir.create("data/rds", recursive = TRUE, showWarnings = FALSE)
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# 3.0 Choropleth Mapping Geospatial Data Using *tmap*

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.

Approaches to prepare thematic map using *tmap*, they are:

1.  Plotting a thematic map quickly by using *qtm()*.
2.  Plotting highly customisable thematic map by using tmap elements.

## 3.1 Plotting a choropleth map quickly using *qtm()*

Draw a cartographic standard choropleth map as shown below:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

Learning points :

-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

## 3.2 Creating a choropleth map by using tmap's elements

The disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To counter this, **tmap**’s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          title = "Dependency ratio") + tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone", 
                                                  main.title.position = "center",
                                                  main.title.size=1.5,
                                                  legend.height=0.45,
                                                  legend.width=0.35,
                                                  frame=TRUE) + 
  tm_borders(alpha = 0.3) + 
  tm_compass(type="4star", size = 3) +
  tm_scale_bar() + 
  tm_grid(alpha = 0.2) + 
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Population data from Department of Statistics (DOS)", position = c("left", "bottom"))
  
```

## 3.3 Drawing a base map

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.

In the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons

```{r}
tm_shape(mpsz_pop2020) + 
  tm_polygons()
```

## 3.4 Drawing a choropleth map using tm_polygons()

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, I will assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020) + tm_polygons("DEPENDENCY")
```

Learning Pints from tm_polygons():

:   -   The default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.

    -   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.

    -   By default, Missing value will be shaded in grey.

## 3.5 Drawing a choropleth map using *tm_fill()* and *tm_border()*

*tm_polygons()* is a wraper of *tm_fill()* and *tm_border().*

The following code chunk draws the choropleth map using *tm_fill()* alone.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY")
```

> Note: Planning subzones are shared according to the respective dependecy values

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY") + 
  tm_borders(lwd = 0.5, alpha = 0.5)
```

> Note: Light-gray border lines have been added on the choropleth map.

The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside *alpha* argument, there are three other arguments for *tm_borders()*, they are:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is “solid”.

# 4.0 Data classification methods of tmap

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

### 4.1 Plotting choropleth maps with built-in classification methods

The code chunk below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          n = 5, 
          style = "quantile") + 
  tm_borders(alpha = 0.5)
```

> Note: The distribution of quantile data classification methods are more evenly distributed than equal data classification methods

### DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.

```{r}
map_equal <- tm_shape(mpsz_pop2020) + 
  tm_polygons("DEPENDENCY", 
          n = 5, 
          style = "equal", 
          title ="Equal Interval Classification") + 
  tm_borders(alpha = 0.3)

map_quantile <- tm_shape(mpsz_pop2020) + 
  tm_polygons("DEPENDENCY", 
          n = 5, 
          style = "quantile",
          title = "Quantile Classification") + 
  tm_borders(alpha = 0.3)

map_jenks <- tm_shape(mpsz_pop2020) + 
  tm_polygons("DEPENDENCY", 
          n = 5, 
          style = "jenks", 
          title = "Jenks Classification") + 
  tm_borders(alpha = 0.3)

tmap_arrange(map_equal, map_quantile, map_jenks)
```

### DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?

```{r}
map_2_classes <- tm_shape(mpsz_pop2020) + 
                    tm_fill("DEPENDENCY", 
                            n = 2, 
                            style = "quantile",
                            title = "2 Classes") + 
                    tm_borders(alpha = 0.5)

map_6_classes <- tm_shape(mpsz_pop2020) + 
                    tm_fill("DEPENDENCY", 
                            n = 6, 
                            style = "quantile",
                            title = "6 Classes") + 
                    tm_borders(alpha = 0.5)

map_10_classes <- tm_shape(mpsz_pop2020) + 
                    tm_fill("DEPENDENCY", 
                            n = 10, 
                            style = "quantile",
                            title = "10 Classes") + 
                    tm_borders(alpha = 0.5)

map_20_classes <- tm_shape(mpsz_pop2020) + 
                    tm_fill("DEPENDENCY", 
                            n = 20, 
                            style = "quantile",
                            title = "20 Classes") + 
                    tm_borders(alpha = 0.5)

tmap_arrange(map_2_classes, map_6_classes, map_10_classes, map_20_classes)
```

Learning point:

-   When creating choropleth maps, the number of classes can significantly impact visualisation or interpretation. Most notable in the figure with 2 classes, it emphasizes the difference between 2 broad categories, but oversimplifies the data such that Class 1 (0.00 to 0.70) actually accounts for much less of the data spectrum compared to (0.70 to 19.00)

-   Six classes is usually the widely used number for classes, providing optimal number and details for the user while making sure not to overwhelm them with the data (compared to 20 classes)

### 4.2 Plotting choropleth map with custom break

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

The code chunk below will compute the descriptive statistics of the **DEPENDENCY** field, a good practice

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
head(mpsz_pop2020)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00).

Now, I will plot the choropleth map using the code chunk below

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          breaks = c(0,0.60,0.70,0.80,0.90,1.00)) + 
  tm_borders(alpha = 0.8)
```

## 5.0 Colour Scheme

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

### 5.1 Using ColourBrewer palette

To change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          n = 6, 
          style="quantile", 
          palette = "RdPu") + 
  tm_borders(alpha = 0.5)
```

> Note : The colour scheme is shaded in red-purple.

To reverse the color shading, add a "-" prefix.

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_fill("DEPENDENCY", 
          style="quantile",
          palette = "-RdPu") + 
  tm_borders(alpha = 0.5)
```

> Note: The colour scheme has been reversed

## 6.0 Map Layouts

### 6.1 Map Legend

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style="jenks", 
          palette = "BuPu", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE, 
          legend.hist.z = 0.1) + 
  tm_layout(main.title = "Distribution of Dependency Ration by planning subzone \n(Jenks classification)", 
            main.title.position = "center", 
            main.title.size = 1, 
            legend.height = 0.45, 
            legend.width = 0.35, 
            legend.outside = FALSE, 
            legend.position = c("right", "bottom"),
            frame = FALSE) + 
  tm_borders(alpha=0.5)
```

### 6.2 Map style

**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.

The code chunk below shows the *natural* style is used.

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_fill("DEPENDENCY", 
          style="quantile",
          palette = "-YlGnBu")+
  tm_borders(alpha = 0.3) + 
  tmap_style("natural")
```

### 6.3 Cartographic Furniture

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "YlGnBu", 
          title = "No. of persons") + 
  tm_layout(main.title = "Distribution of Dependency Ratio \n by planning subzone ", 
            main.title.position="center", 
            legend.height = 0.45, 
            legend.width = 0.35, 
            frame = TRUE) + 
  tm_borders(alpha = 0.3) + 
  tm_compass(type="4star", size = 3)+
  tm_scale_bar(width = 0.15) + 
  tm_grid(lwd = 0.2, alpha = 0.1) + 
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset the default style, refer to the code chunk below.

```{r}
tmap_style("white")
```

## 7.0 Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in *tm_facets()*, and

-   by creating multiple stand-alone maps with *tmap_arrange()*.

### 7.1 By assigning multiple values to at least one of the aesthetic arguments

In this example, small multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill(c("YOUNG", "AGED"), 
          style = "equal", 
          palette = "RdPu") + 
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.3) + 
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons(c("DEPENDENCY", "AGED"),
              style=c("equal", "quantile"), 
              palette=list("Blues", "Purples"))+
  tm_layout(legend.position = c("right", "bottom"))
```

### 7.2 By defining a group-by variable in *tm_facets()*

In this example, multiple small choropleth maps are created by using **tm_facets()**.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          thres.poly = 0)+
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE)+
  tm_layout(legend.show = FALSE, 
            title.position = c("center", "center"), 
            title.size = 20)+
  tm_borders(alpha = 0.5)
```

### 7.3 By creating multiple stand-alone maps with *tmap_arrange()*

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.

```{r}
youngmap <- tm_shape(mpsz_pop2020)+
  tm_polygons("YOUNG", 
              style="quantile",
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+
  tm_polygons("AGED", 
              style="quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 8.0 Mapping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.

```{r}
map_north <- tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="NORTH REGION", ]) +
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Reds", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE) + 
  tm_layout(title = 'NORTH Region', 
            title.position = c('right', 'top'), 
            legend.outside = TRUE, 
            legend.height = 0.45, 
            legend.width = 5.0, 
            legend.position = c("right", "bottom"), 
            frame = FALSE) +
  tm_borders(alpha = 0.3)

map_central <- tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ]) +
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Greens", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE) + 
  tm_layout(title = 'CENTRAL Region', 
            title.position = c('right', 'top'), 
            legend.outside = TRUE, 
            legend.height = 0.45, 
            legend.width = 5.0, 
            legend.position = c("right", "bottom"), 
            frame = FALSE) +
  tm_borders(alpha = 0.3)

tmap_arrange(map_north, map_central)
```

## 9.0 References

### **9.1 All about tmap package**

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### **9.2 Geospatial data wrangling**

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### **9.3 Data wrangling**

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
