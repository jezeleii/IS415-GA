---
title: "Chapter 9: Global Measures of Spatial Autocorrelation"
author: "Jezelei Manangan"
date: "September 5, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Part I: Global Measures of Spatial Autocorrelation

# 1.0 Overview

## 1.1 Objectives

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

## **1.2 The analytical question**

Question: If the spatial pattern of a selected development indicator (GDP per capita) of Hunan Province, PRC is randomly geographically distribute. If the answer is no, then we investigate for

-   Signs of spatial clustering. If there are signs, we ask:

-   Where are these Clusters located?

### 1.2.1 The Study Area and the Data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

### 1.2.2 Setting the Analytical Tools

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in your R.

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

The code chunk below is used to perform the following tasks:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

# 2.0 Getting the Data into R Environment

## 2.1 **Import shapefile into R environment**

The code chunk below uses [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

## 2.2 Import csv file into R environment

Next, we will import *Hunan_2012.csv* into R by using [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
colnames(hunan2012)
```

```{r}
colnames(hunan)
```

## 2.3 Performing Relational Join

The code chunk below will be used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of **dplyr** package.

```{r}
hunan <- left_join(hunan, hunan2012)
```

```{r}
colnames(hunan)
```

```{r}
hunan <- hunan %>% 
    select(1:3, 7, 15, 16, 31, 32, 33)
```

```{r}
colnames(hunan)
```

## 2.4 Visualizing Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
equal <- tm_shape(hunan) + 
  tm_fill("GDPPC", 
          n = 5,
          style = "equal") + 
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) + 
  tm_fill("GDPPC", 
          n = 5, 
          style="quantile") + 
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Equal quantile classfication")

tmap_arrange(equal, quantile,
             asp = 1, ncol = 2)
```

# 3.0 Global Measures of Spatial Autocorrelation

## 3.1 **Computing Contiguity Spatial Weights**

In the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
weight_matrix_queen <- poly2nb(hunan, queen=TRUE)
summary(weight_matrix_queen)
```

```{r}
centroids <- st_centroid(st_geometry(hunan))
coords <- st_coordinates(centroids)

nb_lines <- nb2lines(weight_matrix_queen, coords = coords, as_sf = TRUE)

tm_shape(hunan) + 
  tm_borders("grey") + 
  tm_shape(nb_lines) + 
  tm_lines(col = "blue", lwd = 2) + 
  tm_layout(title = "Queen Contiguity Neighbors", frame = FALSE)
```

## 3.2 Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
row_standardised_weight_matrix <- nb2listw(weight_matrix_queen,
                                           style="W",
                                           zero.policy=TRUE)
row_standardised_weight_matrix
```

# 4.0 Global Measures of Spatial Autocorrelation: Moran's I

In this section, you will learn how to perform Moran’s I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

## 4.1 **Moran's I test**

The code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran_result <- moran.test(hunan$GDPPC,
           list=row_standardised_weight_matrix,
           zero.policy=TRUE,
           na.action=na.omit)
```

### Statistical Conclusion:

Given the **positive Moran's I value** of 0.3007 and the **extremely small p-value** of 1.095×10−61.095 \times 10\^{-6}1.095×10−6, we can reject the null hypothesis of no spatial autocorrelation. This means:

-   **Conclusion**: There is statistically significant evidence of **positive spatial autocorrelation** in GDP per capita across counties in Hunan Province.

-   **Interpretation**: Regions (counties) with similar GDP per capita tend to cluster geographically. In other words, high GDP per capita regions are near other high GDP per capita regions, and similarly for low GDP per capita regions.

## 4.2 Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran’s I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
b_permutation = moran.mc(hunan$GDPPC,
                        listw = row_standardised_weight_matrix,
                        nsim = 999, 
                        zero.policy = TRUE, 
                        na.action = na.omit)

b_permutation
```

-   The use of `set.seed(1234)` in your code is important for ensuring **reproducibility** of the results, especially when performing random simulations, such as a permutation test in Moran's I analysis. If you omit `set.seed()`, every time you run `moran.mc()` (or any function involving randomness), you may get slightly different results because the random number generator will start from a different point each time. This can make it difficult to reproduce results exactly.

## 4.3 Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(b_permutation$res[1:999])
```

```{r}
var(b_permutation$res[1:999])
```

```{r}
summary(b_permutation$res[1:999])
```

```{r}
hist(b_permutation$res,
     freq=TRUE,
     breaks=20,
     xlab="Simulated Moran's I")
abline(v=0, col="red")
```

### Statistical Observation from the Histogram

The histogram represents the distribution of Moran's I statistics that were generated through a **Monte Carlo permutation test**. Here's what we can observe from the plot:

1.  **Simulated Moran's I Distribution**:

    -   The majority of the simulated Moran’s I values fall near zero, indicating that in the absence of spatial autocorrelation (under random permutations), the expected Moran's I is close to zero. This makes sense because a Moran’s I value close to zero typically indicates no spatial autocorrelation (random distribution of the data).

2.  **Red Line (Observed Moran's I)**:

    -   The red vertical line represents the **observed Moran’s I statistic** from the actual data (before the random permutations). If this value is far from zero, it suggests evidence of spatial autocorrelation.

    -   In this case, the observed Moran’s I is **positive and relatively large** compared to the values in the simulated distribution, which suggests **significant positive spatial autocorrelation** in the data.

    Since the observed Moran’s I is far from the distribution's center (near zero) and falls outside the simulated distribution, it is statistically unlikely that the observed spatial autocorrelation is due to random chance. This implies significant **positive spatial autocorrelation** in the data (i.e., similar values are spatially clustered together).

### Plotting with ggplot2:

```{r}
simulated_values <- b_permutation$res  # Replace with actual data

df <- data.frame(simulated_moransI = simulated_values)
observed_moransI <- b_permutation$observed  # Extract the single observed Moran's I

ggplot(df, aes(x = simulated_moransI)) +
  geom_histogram(binwidth = 0.02, fill = "grey", color = "black") +
  geom_vline(xintercept = observed_moransI,  # Use only the observed Moran's I value
             color = "red", linetype = "solid", size = 1.5) +
  labs(title = "Histogram of Simulated Moran's I",
       x = "Simulated Moran's I",
       y = "Frequency") +
  theme_minimal()
```

# 5.0 Global Measures of Spatial Autocorrelation: Geary's C

## 5.1 **Geary's C test**

The code chunk below performs Geary’s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=row_standardised_weight_matrix)
```

### Statistical Interpretation:

**Conclusion**:

-   Since **Geary's C is less than 1** and the **p-value is very small**, we reject the null hypothesis of random spatial distribution.

-   **Conclusion**: There is statistically significant evidence of **positive spatial autocorrelation** in GDP per capita across counties in Hunan Province. This means that neighboring regions tend to have **similar GDP per capita values**, with little local variation between them.

-   The clustering of similar values suggests that the GDP per capita is not randomly distributed but forms spatial clusters, with high GDP regions close to other high GDP regions, and similarly for low GDP regions.

## 5.2 Computing Monte Carlo **Geary's C**

The code chunk below performs permutation test for Geary’s C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
b_permutation<-geary.mc(hunan$GDPPC,
                        listw=row_standardised_weight_matrix,
                        nsim=999)
b_permutation
```

### Statistical Interpretation:

1.  **Observed Geary’s C statistic**:

    -   The observed Geary’s C value is 0.690720.690720.69072, which is **less than 1** (the expected value under spatial randomness). This indicates **positive spatial autocorrelation** — neighboring regions tend to have similar GDP per capita values.

2.  **Monte Carlo Simulations**:

    -   The Monte Carlo test was performed by generating 999 random permutations of the data to simulate Geary’s C under the null hypothesis (spatial randomness).

    -   The **observed rank = 1** means that the observed Geary’s C is **lower** than all the values generated from the random permutations. This suggests that the observed spatial clustering is **stronger** than what would be expected by random chance.

3.  **p-value**:

    -   The **p-value of 0.001** is very small, indicating that the likelihood of obtaining an observed Geary’s C value this extreme under the null hypothesis of spatial randomness is extremely low (1 in 1000).

    -   This very small p-value provides **strong evidence to reject the null hypothesis** of no spatial autocorrelation.

### Conclusion:

-   **Conclusion**: The Monte Carlo simulation confirms that the observed Geary's C statistic is **statistically significant** and provides strong evidence of **positive spatial autocorrelation** in GDP per capita across Hunan Province.

-   This result indicates that neighboring regions tend to have **similar GDP per capita values**, and this clustering pattern is unlikely to have occurred by chance.

-   The observed Geary’s C value being ranked 1st out of 1000 simulations further reinforces the conclusion that there is a **strong and statistically significant clustering of similar GDP values** in space.

## 5.3 Visualising Monte Carlo **Geary's C**

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(b_permutation$res[1:999])
```

```{r}
var(b_permutation$res[1:999])
```

```{r}
summary(b_permutation$res[1:999])
```

```{r}
hist(b_permutation$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="blue") 
```

### Statistical Interpretation:

-   **Conclusion**: The Monte Carlo simulation confirms that the observed Geary's C statistic is **statistically significant** and provides strong evidence of **positive spatial autocorrelation** in GDP per capita across Hunan Province.

-   This result indicates that neighboring regions tend to have **similar GDP per capita values**, and this clustering pattern is unlikely to have occurred by chance.

-   The observed Geary’s C value being ranked 1st out of 1000 simulations further reinforces the conclusion that there is a **strong and statistically significant clustering of similar GDP values** in space.

# 6.0 Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals.

## 6.1 Compute Moran's I Correlogram

In the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The **plot()** of base Graph is then used to plot the output.\

```{r}
moran_i_corr <- sp.correlogram(weight_matrix_queen,
                               hunan$GDPPC, 
                               order=6,
                               method="I",
                               style="W")
plot(moran_i_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(moran_i_corr)
```

### Statistical Observation: General Patterns

-   **Lags 1-3**: At closer spatial lags, there is significant **positive spatial autocorrelation**, indicating clustering of similar GDP per capita values in neighboring regions.

-   **Lag 4**: By the fourth lag, the spatial autocorrelation weakens and becomes insignificant, suggesting a loss of spatial dependence at this distance.

-   **Lags 5-6**: At further distances, significant **negative spatial autocorrelation** emerges, indicating that regions far apart from one another tend to have dissimilar GDP per capita values (high GDP regions tend to be surrounded by low GDP regions, and vice versa).

The spatial correlogram for Moran's I shows that GDP per capita in Hunan Province exhibits **positive spatial autocorrelation** at shorter distances (neighboring regions), while **negative spatial autocorrelation** is observed at larger distances. This suggests that GDP per capita is clustered in space at close range but becomes dissimilar as the distance between regions increases.

## 6.2 Compute **Geary's C** Correlogram

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The **plot()** of base Graph is then used to plot the output.

```{r}
geary_c_corr <- sp.correlogram(weight_matrix_queen,
                               hunan$GDPPC,
                               order=6, 
                               method="C",
                               style="W")

plot(geary_c_corr)
```

```{r}
print(geary_c_corr)
```

### Summary of Spatial Patterns:

-   **Lags 1 and 2**: Show significant **positive spatial autocorrelation**, meaning neighboring regions are similar in terms of GDP per capita.

-   **Lags 3 and 4**: Show no significant spatial autocorrelation, indicating that the similarity of GDP values between regions fades as the distance increases.

-   **Lag 5**: Shows **significant negative spatial autocorrelation**, meaning that regions farther apart tend to have dissimilar GDP per capita values.

-   **Lag 6**: The negative autocorrelation weakens and becomes insignificant.

# Questions to Address:

1.  Why stop at order 6?

    There are a few reasons why the analysis might stop at order 6:

    1.  **Practical Significance**:

        -   In many spatial analyses, autocorrelation tends to diminish as the distance between regions increases. After a certain lag (in your case, lag 6), the influence of spatial autocorrelation might become negligible or meaningless. In your results, we see that spatial autocorrelation turns **negative** at lags 5 and 6, showing contrasting values between regions that are further apart.

        -   Going beyond lag 6 might not reveal useful insights, as spatial autocorrelation typically decreases with increasing distance.

    2.  **Study Area and Connectivity**:

        -   The number of orders considered depends on the **spatial structure of the study area** and the number of regions. If the study area is small or the connectivity between regions is limited, the number of meaningful lags may also be limited. In your case, the study likely considers 6 orders based on the structure of Hunan Province's administrative boundaries.

        -   Beyond lag 6, there might be fewer connections left between regions, which means Moran's I could be unreliable or less meaningful for higher lags.

    3.  **Diminishing Returns**:

        -   The correlogram shows that by the 4th lag, Moran’s I becomes insignificant, and by the 5th and 6th lags, negative spatial autocorrelation is observed. Stopping at lag 6 likely reflects the point where the analysis has captured the most important patterns in spatial relationships.

        -   Going beyond this would likely result in very weak or non-significant Moran's I values, adding little new information to the analysis.

    ### Why Choose **6**?

    The choice of 6 as the maximum order could be based on:

    -   **Trial and Error**: The analyst could have experimented with different numbers of lags and found that 6 captures the essential spatial relationships without overcomplicating the interpretation.

    -   **Size of Study Area**: In larger study areas with more regions, higher-order lags can still show meaningful patterns. In smaller or moderately-sized study areas like Hunan Province, 6 lags might be sufficient to capture the spatial dependencies.

Due credits to OpenAI Statistical Interpretations generated by ChatGPT

# Part II: Local Indicators of Spatial Association (LISA)

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of GDP per capita of Hunan Provice, People Republic of China, local clusters in GDP per capita mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, we will apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

From our earlier analysis, we have derived this graph:

```{r}
tm_shape(hunan) + 
  tm_borders("grey") + 
  tm_shape(nb_lines) + 
  tm_lines(col = "blue", lwd = 2) + 
  tm_layout(title = "Queen Contiguity Neighbors", frame = FALSE)
```

```{r}
weight_matrix_queen
row_standardised_weight_matrix
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

# 1.0 Computing Local Moran's I

To compute local Moran’s I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran’s I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
local_moran_i <- localmoran(hunan$GDPPC, row_standardised_weight_matrix)
head(local_moran_i)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran’s I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(
  local_moran_i[fips,], 
  row.names=hunan$County[fips]),
  check.names=TRUE)
```

## 1.1 Mapping the Local Moran's I

Before mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan.localMI*.

```{r}
colnames(local_moran_i)
```

```{r}
hunan.local_moran_i <- cbind(hunan,local_moran_i) %>%
  rename(Pr.Ii = `Pr.z....E.Ii..`)
```

### 1.1.1 Mapping the Local Moran's I Values

```{r}
tm_shape(hunan.local_moran_i) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

```

### 1.1.2 Mapping the Local Moran's p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.

The code chunks below produce a choropleth map of Moran’s I p-values by using functions of **tmap** package.

```{r}
tm_shape(hunan.local_moran_i) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### 1.1.3 Mapping both local Moran’s I values and p-values

For effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
local_moran_i.map <- tm_shape(hunan.local_moran_i) + 
  tm_fill(col="Ii",
          style="pretty",
          title="local moran statistics") + 
  tm_borders(alpha = 0.3)

pvalue.map <- tm_shape(hunan.local_moran_i) + 
  tm_fill(col = "Pr.Ii",
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(local_moran_i.map, pvalue.map, asp=1, ncol=2)
```

## 2.0 Creating LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### 2.1 Plotting Moran Scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(hunan$GDPPC, row_standardised_weight_matrix,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

### **2.2 Plotting Moran scatterplot with standardised variable**

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, row_standardised_weight_matrix,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### **2.3 Preparing LISA map classes**

Steps to prepare a LISA cluster map

1.  Initalize quadrant into vector
2.  Next, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.
3.  Center the local Moran's around the mean
4.  Set a statistical significance for the local Moran
5.  The next four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.
6.  Lastly, places non-significant Moran in the category 0.

```{r}
quadrant <- vector(mode="numeric",length=nrow(local_moran_i))
hunan$lag_GDPPC <- lag.listw(row_standardised_weight_matrix, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- local_moran_i[,1]   
signif <- 0.05      

quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[local_moran_i[,5]>signif] <- 0 
```

## 3.0 Plotting LISA Map

```{r}
hunan.local_moran_i$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.local_moran_i) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.local_moran_i$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.local_moran_i) +
  tm_fill(col = "quadrant", 
          style = "pretty", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

We can also include the local Moran’s I map and p-value map as shown below for easy comparison.

```{r}
local_moran_i.map <- tm_shape(hunan.local_moran_i) + 
  tm_fill(col="Ii",
          style="pretty",
          title="local moran statistics") + 
  tm_borders(alpha = 0.3)

pvalue.map <- tm_shape(hunan.local_moran_i) + 
  tm_fill(col = "Pr.Ii",
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(local_moran_i.map, pvalue.map, asp=1, ncol=2)
```

# 4.0 Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

## **4.1 Getis and Ord’s G-Statistics**

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

## **4.2 Deriving distance-based weight matrix**

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

### 4.2.1 Deriving the centroid

Obtain longtitude & latitude

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

#### 4.2.2 Determine the cut-off distance

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

#### 4.2.3 Computing fixed distance weight matrix

```{r}
weight_matrix_d62 <- dnearneigh(coords, 0,62, longlat=TRUE)
weight_matrix_d62
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(weight_matrix_d62, style = 'B')
summary(wm62_lw)
```

## **4.2 Computing adaptive distance weight matrix**

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

# 5.0 Computing Gi Statistics

## 5.1 Gi Statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

## **5.2 Mapping Gi values with fixed distance weights**

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

## **5.3 Gi statistics using adaptive distance**

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

## **5.4 Mapping Gi values with adaptive distance weights**

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
