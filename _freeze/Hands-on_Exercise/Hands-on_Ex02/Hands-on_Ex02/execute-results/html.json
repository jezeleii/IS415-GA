{
  "hash": "db20f4f1da1c45cdd412720522f572e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex02\"\nauthor: \"Jezelei Manangan\"\ndate: \"August 20, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# Thematic Mapping & GeoVisualization with R\n\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\n\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.\n\n# 1.0 Getting Started\n\n------------------------------------------------------------------------\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tmap,tidyverse)\n```\n:::\n\n\n# 2.0 Importing Data into R\n\n## 2.1 Datasets Used\n\n|                                                                                                     |                                 |                                                                                                                                                                                                                                                                                           |\n|----------------|----------------|----------------------------------------|\n| Master Plan 2014 Subzone Boundary (Web)                                                             | `MP14_SUBZONE_WEB_PL`)          | It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.                                                                                                                                                           |\n| Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 | `respopagesextod2011to2020.csv` | This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile. |\n\n## 2.2 Importing Geospatial Data into R\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/geospatial\"\n                 , layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n:   R's default printing behaviour, where it displays the first 10 rows by default, due to the 'tibble' package.\n\n## 2.3 Importing Attribute Data into R\n\nNext, I will import *`respopagsex2011to2020.csv`* file into RStudio and save the file into an R dataframe called *popdata*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read.csv(\"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          PA                     SZ     AG   Sex\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n                                      TOD Pop Time\n1                 HDB 1- and 2-Room Flats   0 2011\n2                        HDB 3-Room Flats  10 2011\n3                        HDB 4-Room Flats  30 2011\n4          HDB 5-Room and Executive Flats  50 2011\n5 HUDC Flats (excluding those privatised)   0 2011\n6                       Landed Properties   0 2011\n```\n\n\n:::\n:::\n\n\n## 2.4 Data preparation\n\nI will prepare a data table with year 2020 values, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n|                |                                                               |\n|-----------------|-------------------------------------------------------|\n| Young          | age group 0 to 4 until age group 20 to 24                     |\n| Economy Active | age group 25-29 until age group 60-64                         |\n| Aged           | age group 65 and above,                                       |\n| Total          | all age groups                                                |\n| Dependency     | the ratio between young and aged against economy active group |\n\n### 2.4.1 Data wrangling\n\nThe following functions will be used\n\n|                                         |                   |\n|-----------------------------------------|-------------------|\n| `pivot_wider()`                         | **tidyr** package |\n| `mutate(),filter(),group_by(),select()` | **dplyr** package |\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n### 2.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>% \n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %>%   filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nLearning points:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/rds\", recursive = TRUE, showWarnings = FALSE)\nwrite_rds(mpsz_pop2020, \"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n# 3.0 Choropleth Mapping Geospatial Data Using *tmap*\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\n\nApproaches to prepare thematic map using *tmap*, they are:\n\n1.  Plotting a thematic map quickly by using *qtm()*.\n2.  Plotting highly customisable thematic map by using tmap elements.\n\n## 3.1 Plotting a choropleth map quickly using *qtm()*\n\nDraw a cartographic standard choropleth map as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nLearning points :\n\n-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n## 3.2 Creating a choropleth map by using tmap's elements\n\nThe disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To counter this, **tmap**’s drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Dependency ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", \n                                                  main.title.position = \"center\",\n                                                  main.title.size=1.5,\n                                                  legend.height=0.45,\n                                                  legend.width=0.35,\n                                                  frame=TRUE) + \n  tm_borders(alpha = 0.3) + \n  tm_compass(type=\"4star\", size = 3) +\n  tm_scale_bar() + \n  tm_grid(alpha = 0.2) + \n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Population data from Department of Statistics (DOS)\", position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 3.3 Drawing a base map\n\nThe basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Drawing a choropleth map using tm_polygons() \n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, I will assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nLearning Pints from tm_polygons(): \n\n:   -   The default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n\n    -   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\n\n    -   By default, Missing value will be shaded in grey.\n\n## 3.5 Drawing a choropleth map using *tm_fill()* and *tm_border()*\n\n*tm_polygons()* is a wraper of *tm_fill()* and *tm_border().*\n\nThe following code chunk draws the choropleth map using *tm_fill()* alone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n> Note: Planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\") + \n  tm_borders(lwd = 0.5, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n> Note: Light-gray border lines have been added on the choropleth map.\n\nThe *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nBeside *alpha* argument, there are three other arguments for *tm_borders()*, they are:\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. The default is 1, and\n\n-   *lty* = border line type. The default is “solid”.\n\n# 4.0 Data classification methods of tmap \n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.\n\n### 4.1 Plotting choropleth maps with built-in classification methods \n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          n = 5, \n          style = \"quantile\") + \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n> Note: The distribution of quantile data classification methods are more evenly distributed than equal data classification methods\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n### 4.2 Plotting choropleth map with custom break \n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nThe code chunk below will compute the descriptive statistics of the **DEPENDENCY** field, a good practice\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz_pop2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area              PA YOUNG ECONOMY ACTIVE AGED\n1 29220.19   5267.381  1630379.3            <NA>    NA             NA   NA\n2 29782.05   3506.107   559816.2          OUTRAM  1200           2860 2120\n3 29974.66   1740.926   160807.5 SINGAPORE RIVER     0             40   10\n4 29933.77   3313.625   595428.9     BUKIT MERAH  3150           6900 3320\n5 30005.70   2825.594   387429.4     BUKIT MERAH  2900           6020 1740\n6 29991.38   4428.913  1030378.8     BUKIT MERAH  3340           6800 3420\n  TOTAL DEPENDENCY                       geometry\n1    NA         NA MULTIPOLYGON (((31495.56 30...\n2  6180  1.1608392 MULTIPOLYGON (((29092.28 30...\n3    50  0.2500000 MULTIPOLYGON (((29932.33 29...\n4 13370  0.9376812 MULTIPOLYGON (((27131.28 30...\n5 10660  0.7707641 MULTIPOLYGON (((26451.03 30...\n6 13560  0.9941176 MULTIPOLYGON (((25899.7 297...\n```\n\n\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00).\n\nNow, I will plot the choropleth map using the code chunk below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          breaks = c(0,0.60,0.70,0.80,0.90,1.00)) + \n  tm_borders(alpha = 0.8)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 5.0 Colour Scheme \n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n### 5.1 Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          n = 6, \n          style=\"quantile\", \n          palette = \"RdPu\") + \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n> Note : The colour scheme is shaded in red-purple.\n\nTo reverse the color shading, add a \"-\" prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_fill(\"DEPENDENCY\", \n          style=\"quantile\",\n          palette = \"-RdPu\") + \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n> Note: The colour scheme has been reversed\n\n## 6.0 Map Layouts \n\n### 6.1 Map Legend \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style=\"jenks\", \n          palette = \"BuPu\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE, \n          legend.hist.z = 0.1) + \n  tm_layout(main.title = \"Distribution of Dependency Ration by planning subzone \\n(Jenks classification)\", \n            main.title.position = \"center\", \n            main.title.size = 1, \n            legend.height = 0.45, \n            legend.width = 0.35, \n            legend.outside = FALSE, \n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) + \n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### 6.2 Map style \n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.\n\nThe code chunk below shows the *natural* style is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_fill(\"DEPENDENCY\", \n          style=\"quantile\",\n          palette = \"-YlGnBu\")+\n  tm_borders(alpha = 0.3) + \n  tmap_style(\"natural\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"natural\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 6.3 Cartographic Furniture \n\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\n\nIn the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"YlGnBu\", \n          title = \"No. of persons\") + \n  tm_layout(main.title = \"Distribution of Dependency Ratio \\n by planning subzone \", \n            main.title.position=\"center\", \n            legend.height = 0.45, \n            legend.width = 0.35, \n            frame = TRUE) + \n  tm_borders(alpha = 0.3) + \n  tm_compass(type=\"4star\", size = 3)+\n  tm_scale_bar(width = 0.15) + \n  tm_grid(lwd = 0.2, alpha = 0.1) + \n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nTo reset the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n:::\n\n\n## 7.0 Drawing Small Multiple Choropleth Maps \n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n\n-   by defining a group-by variable in *tm_facets()*, and\n\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n### 7.1 By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(c(\"YOUNG\", \"AGED\"), \n          style = \"equal\", \n          palette = \"RdPu\") + \n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.3) + \n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(c(\"DEPENDENCY\", \"AGED\"),\n              style=c(\"equal\", \"quantile\"), \n              palette=list(\"Blues\", \"Purples\"))+\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### 7.2 By defining a group-by variable in *tm_facets()*\n\nIn this example, multiple small choropleth maps are created by using **tm_facets()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE)+\n  tm_layout(legend.show = FALSE, \n            title.position = c(\"center\", \"center\"), \n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n### 7.3 By creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\", \n              style=\"quantile\",\n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\", \n              style=\"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n## 8.0 Mapping Spatial Object Meeting a Selection Criterion \n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_north <- tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"NORTH REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE, \n          legend.hist.z = 0.1) + \n  tm_layout(legend.outside = TRUE, \n            legend.height = 0.45, \n            legend.width = 5.0, \n            legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE)+\n  tm_borders(alpha = 0.3)\n\nmap_central <- tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE, \n          legend.hist.z = 0.1) + \n  tm_layout(legend.outside = TRUE, \n            legend.height = 0.45, \n            legend.width = 5.0, \n            legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE)+\n  tm_borders(alpha = 0.3)\n\ntmap_arrange(map_north, map_central)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59, 0.59, 0.59. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59, 0.59, 0.59. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## 9.0 References \n\n### **9.1 All about tmap package**\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### **9.2 Geospatial data wrangling**\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)\n\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### **9.3 Data wrangling**\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n\n-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}