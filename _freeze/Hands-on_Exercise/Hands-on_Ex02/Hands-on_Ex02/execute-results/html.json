{
  "hash": "fe9f3264b6096cd76b31ac53510f8a51",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex02\"\nauthor: \"Jezelei Manangan\"\ndate: \"August 20, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# Thematic Mapping & GeoVisualization with R\n\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\n\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.\n\n# 1.0 Getting Started\n\n------------------------------------------------------------------------\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tmap,tidyverse)\n```\n:::\n\n\n# 2.0 Importing Data into R\n\n## 2.1 Datasets Used\n\n|                                                                                                     |                                 |                                                                                                                                                                                                                                                                                           |\n|--------------|--------------|--------------------------------------------|\n| Master Plan 2014 Subzone Boundary (Web)                                                             | `MP14_SUBZONE_WEB_PL`)          | It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.                                                                                                                                                           |\n| Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 | `respopagesextod2011to2020.csv` | This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile. |\n\n## 2.2 Importing Geospatial Data into R\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/geospatial\"\n                 , layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n:   R's default printing behaviour, where it displays the first 10 rows by default, due to the 'tibble' package.\n\n## 2.3 Importing Attribute Data into R\n\nNext, I will import *`respopagsex2011to2020.csv`* file into RStudio and save the file into an R dataframe called *popdata*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read.csv(\"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          PA                     SZ     AG   Sex\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males\n                                      TOD Pop Time\n1                 HDB 1- and 2-Room Flats   0 2011\n2                        HDB 3-Room Flats  10 2011\n3                        HDB 4-Room Flats  30 2011\n4          HDB 5-Room and Executive Flats  50 2011\n5 HUDC Flats (excluding those privatised)   0 2011\n6                       Landed Properties   0 2011\n```\n\n\n:::\n:::\n\n\n## 2.4 Data preparation \n\nI will prepare a data table with year 2020 values, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Young          | age group 0 to 4 until age group 20 to 24                     |\n| Economy Active | age group 25-29 until age group 60-64                         |\n| Aged           | age group 65 and above,                                       |\n| Total          | all age groups                                                |\n| Dependency     | the ratio between young and aged against economy active group |\n\n### 2.4.1 Data wrangling \n\nThe following functions will be used\n\n|                                         |                   |\n|-----------------------------------------|-------------------|\n| `pivot_wider()`                         | **tidyr** package |\n| `mutate(),filter(),group_by(),select()` | **dplyr** package |\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n### 2.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>% \n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %>%   filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nLearning points:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/rds\", recursive = TRUE, showWarnings = FALSE)\nwrite_rds(mpsz_pop2020, \"/Users/jezelei/jezeleii/IS415-GA/Hands-on_Exercise/Hands-on_Ex02/data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n# 3.0 Choropleth Mapping Geospatial Data Using *tmap*\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\n\nApproaches to prepare thematic map using *tmap*, they are:\n\n1.  Plotting a thematic map quickly by using *qtm()*.\n2.  Plotting highly customisable thematic map by using tmap elements.\n\n## 3.1 Plotting a choropleth map quickly using *qtm()*\n\nDraw a cartographic standard choropleth map as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nLearning points :\n\n-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n## 3.2 Creating a choropleth map by using tmap's elements \n\nThe disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To counter this, **tmap**’s drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Dependency ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", \n                                                  main.title.position = \"center\",\n                                                  main.title.size=1.5,\n                                                  legend.height=0.45,\n                                                  legend.width=0.35,\n                                                  frame=TRUE) + \n  tm_borders(alpha = 0.3) + \n  tm_compass(type=\"4star\", size = 3) +\n  tm_scale_bar() + \n  tm_grid(alpha = 0.2) + \n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Population data from Department of Statistics (DOS)\", position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 3.3 Drawing a base map \n\nThe basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}