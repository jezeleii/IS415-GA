{
  "hash": "a76301c0a0cf299855b2a0e3ad136e4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Network Constrained Spatial Point Patterns Analysis\"\nsubtitle: \"Hands-on Exercise 4\"\nauthor: \"Jezelei Manangan\"\ndate: \"September 2, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1.0 Overview\n\n**Network constrained Spatial Point Patterns Analysis (NetSPAA)** is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\n\nWe will work with functions in the **spNetwork** package:\n\n-   to derive **network kernel density estimation (NKDE)**, and\n\n-   to perform network G-function and k-function analysis\n\n# 2.0 The Data\n\nIn this study, we will analyse the spatial distribution of childcare centre in [Punggol planning area](https://en.wikipedia.org/wiki/Punggol). For the purpose of this study, two geospatial data sets will be used. They are:\n\n-   *Punggol_St*, a line features geospatial data which store the road network within Punggol Planning Area.\n\n-   *Punggol_CC*, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.\n\nBoth data sets are in ESRI shapefile format.\n\n# 3.0 Installing and launching the R Packages\n\nIn this hands-on exercise, four R packages will be used, they are:\n\n|                                                                           |                                                                                                                                                                                                                                                                                                                                       |\n|---------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html) | which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances. |\n| [sf](https://r-spatial.github.io/sf/index.html)                           | package provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.                                                                                                          |\n| [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html)       | which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.                                                                                                                                                                             |\n\nThe code chunk below installs and launches the 4 R packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n\n# 4.0\n\nThe code chunk below uses `st_read()` of **sf** package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork <- st_read(dsn = \"data/geospatial\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMultiple layers are present in data source /Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex04/data/geospatial, reading layer `MP14_SUBZONE_WEB_PL'.\nUse `st_layers' to list all layer names and their type in a data source.\nSet the `layer' argument in `st_read' to read a particular layer.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, :\nautomatically selected the first layer in a data source containing more than\none.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/Hands-On_Exercise/Hands-on_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n# 5.0\n\n# 6.0\n\n## 6.1 Preparing the lixels objects\n\n## 6.2 Generating line centre points\n\n## 6.3 Performing NKDE\n\n# 7.0\n\n# 8.0\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}