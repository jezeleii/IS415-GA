{
  "hash": "23cbe0e56a03d5a144a0fd35a949c875",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 05\"\nauthor: \"Jezelei Manangan\"\ndate: \"September 16, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1.0 Objective & Overview\n\n## Spatial Weights & Applications \n\n-   There can be a lot of robust discussions surrounding statistical analysis of Spatial weights, which assesses the strength of interaction (combined effect of correlation coefficient and weights)\n\n# 1.0 Objective & Overview\n\nBy the end to this hands-on exercise, you will be able to:\n\n-   import geospatial data using appropriate function(s) of **sf** package,\n\n-   import csv file using appropriate function of **readr** package,\n\n-   perform relational join using appropriate join function of **dplyr** package,\n\n-   compute spatial weights using appropriate functions of **spdep** package, and\n\n-   calculate spatially lagged variables using appropriate functions of **spdep** package.\n\n-   GWModel\n\n# 2.0 The Study Area and Data\n\nTwo data sets will be used in this hands-on exercise, they are:\n\n-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\n\n-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\nBefore we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in your R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel )\n```\n:::\n\n\n# 3.0 Getting the Data into R Environment\n\n## 3.1 Import shapefile into R environment\n\nThe code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn=\"data/geospatial\", layer=\"Hunan\") %>% \n  st_transform(crs=4490)\n```\n:::\n\n\n## 3.2 Import csv file into R environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n## 3.3 Performing relational join \n\nThe code chunk below will be used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, hunan2012)\nnames(hunan)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- hunan %>% \n  select(1:3, 7, 15, 16, 31, 32)\n```\n:::\n\n\nTake note of the following when doing relational join\n\n-   Upper case, Lower case lettering\n\n-   Common columns for joining\n\n-   **Storing the dataset in rds**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(hunan, \"data/rds/hunan.rds\")\n```\n:::\n\n\nTo use this data for subsequent analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- read_rds(\"data/rds/hunan.rds\")\n```\n:::\n\n\nUseful rmarkdown:\n\n-   #\\| eval: false\n\n-   #\\| echo:false - does not show on the quarto document rendering\n\n## Mapping the GDPC \n\nConverting to SpatialPolygonDataFrame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>% \n  as_Spatial() \n```\n:::\n\n\n# Geographically Weighted Summary Statistics with adaptive bandwidth \n\n## Determine adaptive bandwidth \n\n#### AIC \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,  #same value as the GDP Per Capita (Function = 1)\n                 data=hunan_sp, \n                 approach=\"AIC\", \n                 adaptive=TRUE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n\n-   Cross Validation\n\n-   AIC\n\nUnusual cases here:\n\n-   LatLong = T -\\> will transform data into projected coordinate system (in kilometer) vs\n\n-   LongLat = T (Great Circle Transformation)\n\n#### Cross Validation \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                 data=hunan_sp, \n                 approach=\"CV\", \n                 adaptive=TRUE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n\n## Fixed bandwidth \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                 data=hunan_sp, \n                 approach=\"CV\", \n                 adaptive=FALSE, \n                 kernel=\"bisquare\", \n                 longlat = T)\n```\n:::\n\n\nYou can use fixed bandwidth (change adaptive=TRUE to adaptive=FALSE)\n\n### Computing Geographically Summary statistics \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp, \n               vars=\"GDPPC\", \n               bw = bw_AIC, \n               kernel=\"bisquare\", \n               adaptive=TRUE,\n               longlat = T)\n```\n:::\n\n\nView(gwstat\\[\\[\"SDF\"\\]\\]\\@data)\n\n### Preparing the output \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\ncbind() to append the newly derived data \\[cannot introduce sorting /arrange etc\\]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\nWhat is the difference between these neighbours and the sp data\n\n-   LM, LSD,LVar, LSKe, LCV - L for Local\n\nBased on the output, there is no unique identifier for the data\n\n## Visualising geographically weighted summary statistic\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) + \n  tm_fill(\"GDPPC_LM\", \n          n = 5, \n          style= \"quantile\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Distribution of geographically weighted mean\", \n            main.title.position = \"center\", \n            main.title.size = 2.0, \n            legend.text.size = 1.2,\n            legend.height=1.50, \n            legend.width=1.50,\n            frame=TRUE)\n```\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "InClassEx05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}