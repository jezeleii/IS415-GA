{
  "hash": "9e8f43e9398eeba6e012f006a5f9aa81",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 04\"\nauthor: \"Jezelei Manangan\"\ndate: \"September 9, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1.0 Objective & Overview\n\nThe specific questions we would like to answer are:\n\n-   are the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?\n\n-   if the answer is NO, where and when the observed forest fire locations tend to cluster?\n\n# 2.0 Installing Packages\n\nFor the purpose of this study, six R packages will be used. They are:\n\n-   [**sf**](https://r-spatial.github.io/sf/) provides functions for importing processing and wrangling geospatial data,,\n\n-   [**raster**](https://rspatial.org/raster/) for handling raster data in R,\n\n-   [**spatstat**](https://cran.r-project.org/web/packages/spatstat/index.html) for performing Spatial Point Patterns Analysis such as kcross, Lcross, etc.,\n\n-   [**sparr**](https://tilmandavies.github.io/sparr/index.html) provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n-   [**tmap**](https://r-tmap.github.io/tmap/) provides functions to produce cartographic quality thematic maps, and\n\n-   [**tidyverse**](https://www.tidyverse.org/), a family of R packages that provide functions to perform common data science tasks including and not limited to data import, data transformation, data wrangling and data visualisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,raster,spatstat,sparr,tmap,tidyverse,readr, dplyr, animation)\n```\n:::\n\n\n# 3.0 Importing and Preparing Study Area\n\nIn this exercise, we will use the following datasets:\n\n-   forestfires, a csv file provides locations of forest fire detected from the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data. The data are downloaded from [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). For the purpose of this exercise, only forest fires within Kepulauan Bangka Belitung will be used.\n\n-   Kepulauan_Bangka_Belitung, an ESRI shapefile showing the sub-district (i.e. [kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundary of Kepulauan Bangka Belitung. The data set was downloaded from [Indonesia Geospatial](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html) portal. The original data covers the whole Indonesia. For the purpose of this exercise, only sub-districts within Kepulauan Bangka Belitung are extracted.\n\n## 3.1 Importing study area\n\nIn this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import the two geospatial data sets mentioned in previous section into R environment.\n\n**Kepulauan_Bangka_Belitung**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb <- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nLooking further into the dataset, we notice that the coordinates have Polygon Z Feature.\n\n-   Before proceeding, we need to dissolve the boundaries, and check for multi-polygon features. In this case, Polygon Z is not needed and may interfere with further analysis\n\n    -   Group Z boundaries up\n\n    -   Remove the Z value\n\n    -   Transform the projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_sf <- st_read(dsn = \"data/rawdata/\", layer = \"Kepulauan_Bangka_Belitung\") %>% \n  st_union() %>% \n  st_zm(drop = TRUE, what=\"ZM\") %>% \n  st_transform(crs=32748)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/jezelei/jezeleii/IS415-GA/In-Class_Exercise/InClassEx04/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nst_as_s2(): dropping Z and/or M coordinate\n```\n\n\n:::\n:::\n\n\n## 3.2 Converging to owin object\n\nNext, `as.owin()` is used to convert *kbb* into an owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_owin <- as.owin(kbb_sf)\nkbb_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n```\n\n\n:::\n:::\n\n\nNext, `class()` is used to confim if the output is indeed an owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n:::\n\n\n# 4.0 Importing and Preparing Forest Fire Data\n\nNext, we will import the forest fire data set into the R environment\n\n**forestfire.csv**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- read_csv(\"data/rawdata/forestfires.csv\") %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs=4326 ) %>% \n  st_transform(crs=32748)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n```\n\n\n:::\n:::\n\n\nBecause **ppp** object only accepts numerical aor character as mark. The code chunk below is used to convert data type of *acq_date* to numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- fire_sf %>% \n  mutate(DayofYear = yday(acq_date)) %>% \n  mutate(Month_num = month(acq_date)) %>% \n  mutate(Month_fac = month(acq_date, \n         label = TRUE, \n         abbr = FALSE))\n```\n:::\n\n\n# 5.0 Visualizing the Fire Points\n\n## 5.1 Overall Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_bubbles(alpha = 0.5, size = 0.05) + \n  tm_layout(main.title = \"Forest Fire Distribution in Kepulauan & Bangka Belitung\", \n            ) \n```\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 5.2 Visualizing Geographic Distribution of Forest Fires by Month\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(kbb_sf) + \n  tm_polygons() + \n  tm_shape(fire_sf) + \n  tm_dots(alpha = 0.5, size = 0.1) + \n  tm_layout(main.title = \"Forest Fire Distribution by Month Factor in Kepulauan & Bangka Belitung\", \n            ) + \n  tm_facets(by=\"Month_fac\", \n            free.coords=FALSE,\n            drop.units=TRUE)\n```\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# 6.0 Computing STKDE By Month\n\nIn this section, you will learn how to compute STKDE by using [`spattemp.density()`](https://tilmandavies.github.io/sparr/reference/spattemp.density.html) of **sparr** package. Before using the function, it is highly recommended you read the function’s reference guide in detail in order to understand the input data requirements and the output object generated.\n\n## 6.1 Extracting Forest fires by month\n\nThe code chunk below is used to remofe the unwanted fields from fire_sf data.frame. This is because `as.ppp()` only need the mark field and geometry field from the input sf data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month <- fire_sf %>% \n  select(Month_num)\nclass(fire_month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n## 6.2 Creating ppp\n\nThe code chunk below is used to derive a ppp obect called fire_month from fire_month sf data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_ppp <- as.ppp(fire_month)\n#marks(fire_month_ppp) <- fire_sf$DayofYear\nfire_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(kbb_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n```\n\n\n:::\n:::\n\n\nThe code chunk is used to check the output is in the correct object class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fire_month_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n```\n\n\n:::\n:::\n\n\nIn the code chunk below, we check for duplicates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(fire_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n## 6.3 Including Owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_owin <- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n:::\n\n\nAs a good practice, `plot()` is used to plot *ff_owin* so that we can examine the correctness of the output object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fire_month_owin)\n```\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 6.4 Computing Spatio-temporal KDE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n```\n\n\n:::\n:::\n\n\n## 6.5 Plotting the spatio-temporal KDE Object\n\nIn the code chunk below, `plot()` of R base is used to the KDE for between July 2023 - December 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 3), fig.width = 12, fig.height = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.width\"\nis not a graphical parameter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in par(mfrow = c(2, 3), fig.width = 12, fig.height = 10): \"fig.height\"\nis not a graphical parameter\n```\n\n\n:::\n\n```{.r .cell-code}\ntims <- c(7,8,9,10,11,12)\n\nfor(i in tims){\n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE,\n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# 7.0 Computing STKDE By Day of Year\n\nIn this section, I will compute the STKDE of forest fires by day of year.\n\n## 7.1 Creating ppp object\n\nIn the code chunk below, DayofYear field is included in the output ppp object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_yday_ppp <- fire_sf %>% \n  select(DayofYear) %>% \n  as.ppp()\n```\n:::\n\n\n## 7.2 Including Owin object\n\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_yday_owin <- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n:::\n\n\n## 7.3 Plotting the Spatio-temporal KDE object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_yday <- spattemp.density(fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(kde_yday)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- 10:352\n\nn_cols <-4 \nbatch_size <- 12\nn_batches <- ceiling(length(tims)/batch_size)\n\nfor (b in 1:n_batches){\n  start <- (b-1) * batch_size + 1\n  end <- min(b * batch_size, length(tims))\n  \n  current_tims <- tims[start:end]\n  \n  par(mfrow=c(3,4), mar=c(2,2,2,2))\n  \n  for(i in current_tims){\n    plot(kde_yday, i,\n         override.par=FALSE,\n         fix.range=TRUE,\n         main = paste('KDE at Day',i))\n  }\n}\n```\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-15.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-17.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-19.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-20.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-21.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-22.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-23.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-24.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-25.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-26.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-27.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-28.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](InClassEx04_files/figure-html/unnamed-chunk-23-29.png){width=672}\n:::\n:::\n\n\n# 8.0 Computing STKDE By Day of Year: Improved Method\n\nOne of the nice function provides in sparr package is `BOOT.spattemp()`. It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.\n\nCode chunk below uses `BOOT.spattemp()` to determine both the spatial bandwidth and the scalar temporal bandwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nBOOT.spattemp(fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInitialising...Done.\nOptimising...\nh = 15102.47 \b; lambda = 16.84806 \nh = 16612.72 \b; lambda = 16.84806 \nh = 15102.47 \b; lambda = 1527.095 \nh = 15480.03 \b; lambda = 771.9715 \nh = 15668.81 \b; lambda = 394.4098 \nh = 15763.2 \b; lambda = 205.6289 \nh = 15810.4 \b; lambda = 111.2385 \nh = 15833.99 \b; lambda = 64.04328 \nh = 15845.79 \b; lambda = 40.44567 \nh = 15851.69 \b; lambda = 28.64687 \nh = 15863.49 \b; lambda = 5.049258 \nh = 15854.64 \b; lambda = 22.74746 \nh = 15860.54 \b; lambda = 10.94866 \nh = 15859.07 \b; lambda = 13.89836 \nh = 14348.82 \b; lambda = 13.89836 \nh = 13216.87 \b; lambda = 12.42351 \nh = 12460.27 \b; lambda = 15.37321 \nh = 10760.88 \b; lambda = 16.11064 \nh = 8875.282 \b; lambda = 11.68608 \nh = 10432.08 \b; lambda = 12.97658 \nh = 7976.084 \b; lambda = 16.66371 \nh = 9286.281 \b; lambda = 15.60366 \nh = 9615.08 \b; lambda = 18.73771 \nh = 9206.581 \b; lambda = 21.61828 \nh = 8140.483 \b; lambda = 18.23073 \nh = 8795.582 \b; lambda = 17.70071 \nh = 9124.381 \b; lambda = 20.83477 \nh = 9164.856 \b; lambda = 19.52699 \nh = 8345.358 \b; lambda = 18.48998 \nh = 9297.65 \b; lambda = 18.67578 \nh = 8928.375 \b; lambda = 16.8495 \nh = 9105.736 \b; lambda = 18.85762 \nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         h     lambda \n9105.73611   18.85762 \n```\n\n\n:::\n:::\n\n\n## 8.1 Creating ppp object\n\nNow, the STKDE will be derived by using h and lambda values derive in previous step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_yday_plus <- spattemp.density(\n  fire_yday_owin,\n  h = 9000,\n  lambda =19)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(kde_yday_plus)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 9000 (spatial)\n  lambda = 19 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [2.001642e-19, 2.445724e-12]\n```\n\n\n:::\n:::\n\n\n## 8.2 Plotting the Spatio-temporal KDE object\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_gif <- \"forestFires.gif\"\n\n# Check if the GIF already exists\nif (!file.exists(temp_gif)) {\n  # If the GIF doesn't exist, create and save it\n  saveGIF({\n    for(i in tims){\n      plot(kde_yday, i, \n           override.par=FALSE, \n           fix.range=TRUE,\n           main=paste('KDE at Day', i))\n    }\n  }, movie.name = temp_gif, interval = 0.5, ani.width=800, ani.height=600)\n} else {\n  # If the GIF already exists, skip the saving process\n  message(\"GIF already exists, skipping save.\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGIF already exists, skipping save.\n```\n\n\n:::\n:::\n\n\n![](forestFires.gif)\n",
    "supporting": [
      "InClassEx04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}